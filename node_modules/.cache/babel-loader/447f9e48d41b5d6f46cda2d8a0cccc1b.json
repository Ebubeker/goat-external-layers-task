{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/print/Print.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/print/Print.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Mapable } from \"../../mixins/Mapable\";\nimport * as olEvents from \"ol/events.js\";\nimport * as olMath from \"ol/math.js\"; // import { getPointResolution } from \"ol/proj\";\n\nimport { humanize, numberWithCommas } from \"../../utils/Helpers\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { getCurrentDate, getCurrentTime } from \"../../utils/Helpers\";\nimport Graticule from \"ol/layer/Graticule\";\nimport olScaleLine from \"ol/control/ScaleLine\";\nimport Stroke from \"ol/style/Stroke\";\nimport OlRotate from \"ol/control/Rotate\";\nimport OlAttribution from \"ol/control/Attribution\";\nimport OlMouseWheelZoom from \"ol/interaction/MouseWheelZoom\";\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nexport default {\n  mixins: [Mapable],\n  data: function data() {\n    return {\n      rules: {\n        required: [function (v) {\n          return !!v || \"Field is required\";\n        }]\n      },\n      rotationListenerKey: null,\n      scaleLineControl: null,\n      gridLineControl: null,\n      defaultOlRotateControl: null,\n      defaultOlAttributionControl: null,\n      defaultOlMouseWheelZoom: null\n    };\n  },\n  methods: _objectSpread({\n    humanize: humanize,\n    numberWithCommas: numberWithCommas,\n    getCurrentDate: getCurrentDate,\n    getCurrentTime: getCurrentTime,\n    changeRotation: function changeRotation(rotation) {\n      this.setRotation(rotation);\n    },\n\n    /**\n     * Create a print report based on the values of the 'layoutInfo' values.\n     * @param {string} format An output format corresponding to one format in the\n     *     capabilities document ('pdf').\n     */\n    printMap: function () {\n      var _printMap = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var orientation, format, paperSize, printCanvas, fileName, a, pdf;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                orientation = this.print.layout.orientation;\n                format = this.print.layout.format;\n                paperSize = this.print.layout.size; // Convert html to canvas\n\n                _context.next = 5;\n                return html2canvas(document.getElementById(\"map-print-wrapper\"), {\n                  scale: 5,\n                  allowTaint: true,\n                  useCORS: true\n                });\n\n              case 5:\n                printCanvas = _context.sent;\n                fileName = \"goat_print_\".concat(this.getCurrentDate(), \"_\").concat(this.getCurrentTime(), \".\").concat(this.print.selectedFormat);\n\n                if (this.print.selectedFormat === \"png\") {\n                  a = document.createElement(\"a\"); // toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\n\n                  a.href = printCanvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n                  a.download = fileName;\n                  a.click();\n                } else {\n                  pdf = new jsPDF(orientation, undefined, format); // Add image to pdf\n\n                  pdf.addImage(printCanvas, \"JPEG\", 0, 0, paperSize[0], paperSize[1]); // Save map\n\n                  pdf.save(fileName);\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function printMap() {\n        return _printMap.apply(this, arguments);\n      }\n\n      return printMap;\n    }(),\n\n    /**\n     * Set the current rotation value.\n     * Updating the rotation will redraw the mask or rotate the map (depending on the configuration).\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    setRotation: function setRotation(rotation) {\n      if (!this.map) {\n        throw new Error(\"Missing map\");\n      }\n\n      this.updateRotation_(rotation);\n      this.map.getView().setRotation(olMath.toRadians(this.print.rotation));\n    },\n\n    /**\n     * Set the current rotation value.\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    updateRotation_: function updateRotation_(rotation) {\n      this.print.rotation = olMath.clamp(rotation, -180, 180);\n    },\n\n    /**\n     * Set the print dpi value.\n     * @param {number} dpi A dpi value as existing in the dpis list field.\n     */\n    setDpi: function setDpi(dpi) {\n      this.print.dpi = dpi;\n    },\n    timeout: function timeout(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, mapMutations(\"map\", {\n    toggleSnackbar: \"TOGGLE_SNACKBAR\"\n  })),\n  activated: function activated() {\n    var _this = this;\n\n    this.print.active = true;\n    this.rotationListenerKey = olEvents.listen(this.map.getView(), \"change:rotation\", function (event) {\n      _this.updateRotation_(Math.round(olMath.toDegrees(event.target.getRotation())));\n    });\n\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(null);\n    }\n\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(false);\n      this.defaultOlAttributionControl.setCollapsible(false);\n    }\n\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(false);\n    }\n\n    this.map.addControl(this.scaleLineControl);\n    this.isochroneLayer.getSource().getFeatures().forEach(function (feature) {\n      feature.set(\"showLabel\", true);\n    });\n    this.isochroneLayer.getSource().changed();\n  },\n  deactivated: function deactivated() {\n    this.print.active = false;\n    this.print.grid = false;\n\n    if (!this.map) {\n      throw new Error(\"Missing map\");\n    }\n\n    if (this.gridLayer) {\n      this.map.removeLayer(this.gridLayer);\n    }\n\n    if (this.rotationListenerKey) {\n      olEvents.unlistenByKey(this.rotationListenerKey);\n    }\n\n    this.map.removeControl(this.scaleLineControl);\n\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(this.map);\n    }\n\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(true);\n      this.defaultOlAttributionControl.setCollapsible(true);\n    }\n\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(true);\n    }\n\n    this.isochroneLayer.getSource().getFeatures().forEach(function (feature) {\n      feature.set(\"showLabel\", false);\n    });\n    this.isochroneLayer.getSource().changed();\n    this.setRotation(0);\n    this.map.render();\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appColor: \"appColor\"\n  }), {}, mapFields(\"map\", {\n    print: \"print\"\n  }), {}, mapGetters(\"isochrones\", {\n    isochroneLayer: \"isochroneLayer\"\n  })),\n  created: function created() {\n    var _this2 = this;\n\n    this.gridLayer = new Graticule({\n      // the style to use for the lines, optional.\n      strokeStyle: new Stroke({\n        color: \"rgba(255,120,0,0.9)\",\n        width: 2,\n        lineDash: [0.5, 4]\n      }),\n      zIndex: 1000,\n      showLabels: true,\n      wrapX: false\n    });\n    this.scaleLineControl = new olScaleLine({\n      steps: 2,\n      bar: true,\n      text: true\n    });\n    this.map.getControls().getArray().forEach(function (control) {\n      if (control instanceof OlRotate) {\n        _this2.defaultOlRotateControl = control;\n      }\n\n      if (control instanceof OlAttribution) {\n        _this2.defaultOlAttributionControl = control;\n      }\n\n      if (control instanceof OlMouseWheelZoom) {\n        _this2.defaultOlMouseWheelZoom = control;\n      }\n    });\n  },\n  watch: {\n    \"print.grid\": function printGrid(state) {\n      if (state && this.gridLayer) {\n        this.map.addLayer(this.gridLayer);\n      }\n\n      if (!state && this.gridLayer) {\n        this.map.removeLayer(this.gridLayer);\n      }\n    }\n  }\n};",{"version":3,"sources":["Print.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-card flat>\n      <v-subheader>\n        <span class=\"title\">{{ $t(\"appBar.printMap.title\") }}</span>\n      </v-subheader>\n\n      <v-card-text class=\"pr-16 pl-16 pt-0 pb-0\">\n        <v-divider></v-divider>\n      </v-card-text>\n      <template>\n        <v-card-text>\n          <v-form ref=\"form\" lazy-validation>\n            <v-text-field\n              v-model=\"print.title\"\n              :label=\"$t(`appBar.printMap.form.title.label`)\"\n              type=\"text\"\n              maxlength=\"50\"\n              :counter=\"50\"\n            ></v-text-field>\n            <v-select\n              v-model=\"print.layout\"\n              :items=\"print.layouts\"\n              item-text=\"name\"\n              item-value=\"name\"\n              prepend-icon=\"map\"\n              :label=\"$t('appBar.printMap.form.layout.label')\"\n              :rules=\"rules.required\"\n              return-object\n              required\n            ></v-select>\n            <v-select\n              v-model=\"print.selectedCrs\"\n              :items=\"print.crs\"\n              prepend-icon=\"language\"\n              item-text=\"display\"\n              item-value=\"value\"\n              :label=\"$t('appBar.printMap.form.crs.label')\"\n              :rules=\"rules.required\"\n              required\n            ></v-select>\n\n            <v-select\n              v-model=\"print.selectedFormat\"\n              :items=\"print.outputFormats\"\n              prepend-icon=\"description\"\n              item-text=\"display\"\n              item-value=\"value\"\n              :label=\"$t('appBar.printMap.form.outputFormat.label')\"\n              :rules=\"rules.required\"\n              required\n            ></v-select>\n\n            <v-layout row class=\"ml-0\">\n              <v-flex xs9 class=\"pr-3\">\n                <v-slider\n                  class=\"pt-4\"\n                  prepend-icon=\"rotate_right\"\n                  :value=\"print.rotation\"\n                  @input=\"changeRotation\"\n                  :track-color=\"appColor.secondary\"\n                  :color=\"appColor.secondary\"\n                  :min=\"-180\"\n                  :max=\"180\"\n                ></v-slider>\n              </v-flex>\n\n              <v-flex xs3>\n                <v-text-field\n                  :value=\"print.rotation\"\n                  @input=\"changeRotation\"\n                  suffix=\"°\"\n                  class=\"mt-0\"\n                  type=\"number\"\n                ></v-text-field>\n              </v-flex>\n            </v-layout>\n            <v-layout row class=\"ml-0 mt-2\">\n              <v-flex xs6>\n                <v-checkbox\n                  :color=\"appColor.secondary\"\n                  class=\"ml-1\"\n                  v-model=\"print.legend\"\n                  :label=\"$t('appBar.printMap.form.legend')\"\n                ></v-checkbox>\n              </v-flex>\n              <v-flex xs6>\n                <v-checkbox\n                  :color=\"appColor.secondary\"\n                  class=\"ml-1\"\n                  v-model=\"print.grid\"\n                  :label=\"$t('appBar.printMap.form.grid')\"\n                ></v-checkbox>\n              </v-flex>\n            </v-layout>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn\n            class=\"white--text\"\n            :color=\"appColor.primary\"\n            @click=\"printMap\"\n          >\n            <v-icon left>print</v-icon\n            >{{ $t(\"appBar.printMap.form.submit\") }}</v-btn\n          >\n        </v-card-actions>\n      </template>\n    </v-card>\n  </v-flex>\n</template>\n\n<script>\nimport { Mapable } from \"../../mixins/Mapable\";\nimport * as olEvents from \"ol/events.js\";\nimport * as olMath from \"ol/math.js\";\n// import { getPointResolution } from \"ol/proj\";\nimport { humanize, numberWithCommas } from \"../../utils/Helpers\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { getCurrentDate, getCurrentTime } from \"../../utils/Helpers\";\nimport Graticule from \"ol/layer/Graticule\";\nimport olScaleLine from \"ol/control/ScaleLine\";\nimport Stroke from \"ol/style/Stroke\";\nimport OlRotate from \"ol/control/Rotate\";\nimport OlAttribution from \"ol/control/Attribution\";\nimport OlMouseWheelZoom from \"ol/interaction/MouseWheelZoom\";\n\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nexport default {\n  mixins: [Mapable],\n  data: () => ({\n    rules: {\n      required: [v => !!v || \"Field is required\"]\n    },\n    rotationListenerKey: null,\n    scaleLineControl: null,\n    gridLineControl: null,\n    defaultOlRotateControl: null,\n    defaultOlAttributionControl: null,\n    defaultOlMouseWheelZoom: null\n  }),\n  methods: {\n    humanize,\n    numberWithCommas,\n    getCurrentDate,\n    getCurrentTime,\n    changeRotation(rotation) {\n      this.setRotation(rotation);\n    },\n\n    /**\n     * Create a print report based on the values of the 'layoutInfo' values.\n     * @param {string} format An output format corresponding to one format in the\n     *     capabilities document ('pdf').\n     */\n    async printMap() {\n      const orientation = this.print.layout.orientation;\n      const format = this.print.layout.format;\n      const paperSize = this.print.layout.size;\n      // Convert html to canvas\n      const printCanvas = await html2canvas(\n        document.getElementById(\"map-print-wrapper\"),\n        {\n          scale: 5,\n          allowTaint: true,\n          useCORS: true\n        }\n      );\n      const fileName = `goat_print_${this.getCurrentDate()}_${this.getCurrentTime()}.${\n        this.print.selectedFormat\n      }`;\n      if (this.print.selectedFormat === \"png\") {\n        var a = document.createElement(\"a\");\n        // toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\n        a.href = printCanvas\n          .toDataURL(\"image/png\")\n          .replace(\"image/png\", \"image/octet-stream\");\n        a.download = fileName;\n        a.click();\n      } else {\n        var pdf = new jsPDF(orientation, undefined, format);\n        // Add image to pdf\n        pdf.addImage(printCanvas, \"JPEG\", 0, 0, paperSize[0], paperSize[1]);\n        // Save map\n        pdf.save(fileName);\n      }\n    },\n    /**\n     * Set the current rotation value.\n     * Updating the rotation will redraw the mask or rotate the map (depending on the configuration).\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    setRotation(rotation) {\n      if (!this.map) {\n        throw new Error(\"Missing map\");\n      }\n      this.updateRotation_(rotation);\n\n      this.map.getView().setRotation(olMath.toRadians(this.print.rotation));\n    },\n\n    /**\n     * Set the current rotation value.\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    updateRotation_(rotation) {\n      this.print.rotation = olMath.clamp(rotation, -180, 180);\n    },\n\n    /**\n     * Set the print dpi value.\n     * @param {number} dpi A dpi value as existing in the dpis list field.\n     */\n    setDpi(dpi) {\n      this.print.dpi = dpi;\n    },\n    timeout(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    },\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\"\n    })\n  },\n  activated: function() {\n    this.print.active = true;\n    this.rotationListenerKey = olEvents.listen(\n      this.map.getView(),\n      \"change:rotation\",\n      event => {\n        this.updateRotation_(\n          Math.round(olMath.toDegrees(event.target.getRotation()))\n        );\n      }\n    );\n\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(null);\n    }\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(false);\n      this.defaultOlAttributionControl.setCollapsible(false);\n    }\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(false);\n    }\n    this.map.addControl(this.scaleLineControl);\n    this.isochroneLayer\n      .getSource()\n      .getFeatures()\n      .forEach(feature => {\n        feature.set(\"showLabel\", true);\n      });\n    this.isochroneLayer.getSource().changed();\n  },\n  deactivated: function() {\n    this.print.active = false;\n    this.print.grid = false;\n    if (!this.map) {\n      throw new Error(\"Missing map\");\n    }\n    if (this.gridLayer) {\n      this.map.removeLayer(this.gridLayer);\n    }\n    if (this.rotationListenerKey) {\n      olEvents.unlistenByKey(this.rotationListenerKey);\n    }\n    this.map.removeControl(this.scaleLineControl);\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(this.map);\n    }\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(true);\n      this.defaultOlAttributionControl.setCollapsible(true);\n    }\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(true);\n    }\n    this.isochroneLayer\n      .getSource()\n      .getFeatures()\n      .forEach(feature => {\n        feature.set(\"showLabel\", false);\n      });\n    this.isochroneLayer.getSource().changed();\n    this.setRotation(0);\n    this.map.render();\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      print: \"print\"\n    }),\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\"\n    })\n  },\n  created() {\n    this.gridLayer = new Graticule({\n      // the style to use for the lines, optional.\n      strokeStyle: new Stroke({\n        color: \"rgba(255,120,0,0.9)\",\n        width: 2,\n        lineDash: [0.5, 4]\n      }),\n      zIndex: 1000,\n      showLabels: true,\n      wrapX: false\n    });\n    this.scaleLineControl = new olScaleLine({\n      steps: 2,\n      bar: true,\n      text: true\n    });\n    this.map\n      .getControls()\n      .getArray()\n      .forEach(control => {\n        if (control instanceof OlRotate) {\n          this.defaultOlRotateControl = control;\n        }\n        if (control instanceof OlAttribution) {\n          this.defaultOlAttributionControl = control;\n        }\n        if (control instanceof OlMouseWheelZoom) {\n          this.defaultOlMouseWheelZoom = control;\n        }\n      });\n  },\n  watch: {\n    \"print.grid\": function(state) {\n      if (state && this.gridLayer) {\n        this.map.addLayer(this.gridLayer);\n      }\n      if (!state && this.gridLayer) {\n        this.map.removeLayer(this.gridLayer);\n      }\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/components/print"}]}