{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/edit/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/edit/Edit.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _objectWithoutProperties from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { EventBus } from \"../../../EventBus\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../mixins/InteractionsToggle\";\nimport { Isochrones } from \"../../../mixins/Isochrones\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { mapFeatureTypeProps } from \"../../../utils/Layer\";\nimport OlSelectController from \"../../../controllers/OlSelectController\";\nimport OlEditController from \"../../../controllers/OlEditController\";\nimport { bldEntrancePointsStyle, getEditStyle, getFeatureHighlightStyle } from \"../../../style/OlStyleDefs\";\nimport OverlayPopup from \"../../viewer/ol/controls/Overlay\";\nimport ScenarioDialog from \"../../core/ScenarioDialog\";\nimport ApiService from \"../../../services/api.service\";\nimport axios from \"axios\";\nimport VJsonschemaForm from \"../../other/dynamicForms/index\";\nimport { geojsonToFeature, geometryToWKT } from \"../../../utils/MapUtils\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { debounce } from \"../../../utils/Helpers\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport { GET_SCENARIOS } from \"../../../store/actions.type\";\nexport default {\n  components: {\n    \"overlay-popup\": OverlayPopup,\n    \"scenario-dialog\": ScenarioDialog,\n    VJsonschemaForm: VJsonschemaForm\n  },\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts, Isochrones],\n  data: function data() {\n    return {\n      interactionType: \"edit-interaction\",\n      selectedFeatures: [],\n      editableLayers: [],\n      toggleSelection: undefined,\n      toggleEdit: undefined,\n      toggleSnapGuide: 0,\n      // Used for snap and other functionalities (Active by default).\n      toggleFeatureLabels: 0,\n      isUploadBusy: false,\n      isDeleteAllBusy: false,\n      //Popup configuration\n      popup: {\n        title: \"\",\n        isVisible: false,\n        el: null,\n        selectedInteraction: null\n      },\n      //Edit form\n      layerConf: {},\n      schema: {},\n      dataObject: {},\n      formValid: false,\n      //Others\n      mapCursorTypeEnum: {\n        add: \"crosshair\",\n        modify: \"pointer\",\n        delete: \"pointer\",\n        select: \"pointer\",\n        move: \"auto\",\n        modifyAttributes: \"pointer\",\n        addBldEntrance: \"pointer\",\n        drawHole: \"crosshair\"\n      },\n      //Data table\n      isTableLoading: false,\n      //Scenario Dialog\n      showScenarioDialog: false,\n      activeScenarioId: null,\n      editElVisible: true,\n      dataManageElVisible: true,\n      selectEditVisible: true,\n      selectFeaturesVisible: true,\n      dataTableElVisible: true,\n      scenarioSpeedDialFab: false,\n      // -------------------------\n      // ------------------------\n      olEditCtrl: null,\n      olSelectCtrl: null,\n      highlightLayer: null,\n      tempBldEntranceFeature: null,\n      featuresToCommit: [],\n      // Cache for poi modified feature\n      poiModifiedFeatures: [],\n      jsonFormKey: 0\n    };\n  },\n  watch: {\n    activeScenario: function activeScenario() {\n      // Fetch all features from the scenario\n      if (this.selectedLayer) {\n        this.fetchScenarioLayerFeatures(this.selectedLayer[\"name\"]);\n      }\n\n      if (!this.activeScenario) {\n        this.clearAll();\n        this.cleanPoiTreeNode();\n        this.poisAoisLayer.setVisible(true);\n        this.selectedLayer = null;\n        this.calculationMode.active = \"default\";\n      }\n\n      if (this.activeScenario) {\n        this.calculationMode.active = \"scenario\";\n      }\n\n      this.fetchScenarioLayerSchemas();\n    },\n    selectedLayer: function selectedLayer(value, oldValue) {\n      if (this.olEditCtrl && value) {\n        this.appConfig.app_ui.base_color.primary = this.scenarioLayerEditModeColor;\n        this.olEditCtrl.selectedLayer = value;\n        this.originIdName = this.original_id;\n        this.stop();\n        this.clearAll();\n\n        if (value && value.name === \"poi\") {\n          this.poisAoisLayer.setVisible(false);\n        } else {\n          this.cleanPoiTreeNode();\n          this.poisAoisLayer.setVisible(true);\n        } // Fetch features for the selected layer\n\n\n        this.fetchScenarioLayerFeatures(this.selectedLayer[\"name\"]);\n      }\n\n      if (!value && this.primaryColorBackup) {\n        if (oldValue.name === \"poi\") {\n          this.cleanPoiTreeNode();\n          this.poisAoisLayer.setVisible(true);\n          this.clearAll();\n        } // Revert color theme\n\n\n        this.appConfig.app_ui.base_color.primary = this.primaryColorBackup;\n      }\n    },\n    toggleSelection: {\n      handler: function handler(state, oldState) {\n        if (state !== undefined) {\n          this.olEditCtrl.removeInteraction();\n          this.toggleEdit = undefined;\n\n          if (oldState !== undefined) {\n            this.olSelectCtrl.removeInteraction();\n            EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n\n            if (this.map.getTarget().style) {\n              this.map.getTarget().style.cursor = \"\";\n            }\n          }\n\n          this.toggleSelectInteraction(state);\n        }\n      }\n    },\n    toggleEdit: {\n      handler: function handler(state, oldState) {\n        this.olSelectCtrl.removeInteraction();\n        this.toggleSelection = undefined;\n\n        if (oldState !== undefined) {\n          this.olEditCtrl.removeInteraction();\n          EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n\n          if (this.map.getTarget().style) {\n            this.map.getTarget().style.cursor = \"\";\n          }\n        }\n\n        if (state !== undefined) {\n          this.toggleEditInteraction(state);\n        }\n      }\n    },\n    toggleSnapGuide: function toggleSnapGuide(value) {\n      this.toggleSnapGuideInteraction(value);\n    },\n    toggleFeatureLabels: function toggleFeatureLabels(value) {\n      this.toggleFeatureLabelsInteraction(value);\n    },\n    dataObject: {\n      immediate: true,\n      handler: function () {\n        var _handler = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee() {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return this.$nextTick();\n\n                case 2:\n                  if (this.$refs[\"edit-form\"]) {\n                    this.$refs[\"edit-form\"].validate();\n                  }\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function handler() {\n          return _handler.apply(this, arguments);\n        }\n\n        return handler;\n      }(),\n      deep: true\n    },\n    selectedPoisOnlyKeys: function selectedPoisOnlyKeys() {\n      this.editLayer.getSource().changed();\n    },\n    \"calculationMode.active\": function calculationModeActive() {\n      this.editLayer.getSource().changed();\n    },\n    poisAois: function poisAois() {\n      // Add remove features.\n      if (this.selectedLayer && this.selectedLayer[\"name\"] === \"poi\") {\n        this.syncPoiFeatures();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.popup.el = this.$refs.popup;\n  },\n  methods: _objectSpread({\n    syncPoiFeatures: function syncPoiFeatures() {\n      var _this = this;\n\n      this.poisAoisLayer.getSource().getFeatures().forEach(function (feature) {\n        if (![\"MultiPolygon\", \"Polygon\"].includes(feature.getGeometry().getType())) {\n          var category = feature.get(\"category\");\n\n          var featureInEdit = _this.editLayer.getSource().getFeatureById(feature.get(\"id\"));\n\n          var isFeatureActive = _this.poisAois[category];\n\n          if (featureInEdit && !isFeatureActive) {\n            _this.editLayer.getSource().removeFeature(featureInEdit);\n          } else if (!featureInEdit && isFeatureActive) {\n            var isFeatureModified = false;\n\n            _this.poiModifiedFeatures.forEach(function (modifiedFeature) {\n              if (modifiedFeature.get(\"uid\") === feature.get(\"uid\")) {\n                isFeatureModified = true;\n              }\n            });\n\n            if (!isFeatureModified) {\n              var clonedFeature = feature.clone();\n              clonedFeature.setId(feature.get(\"id\"));\n              clonedFeature.set(\"layerName\", \"poi\");\n\n              _this.editLayer.getSource().addFeature(clonedFeature);\n            }\n          }\n        }\n      });\n    },\n\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound: function onMapBound() {\n      this.olSelectCtrl = new OlSelectController(this.map);\n      this.olSelectCtrl.createSelectionLayer(); // Initialize ol edit controller.\n\n      this.olEditCtrl = new OlEditController(this.map); //Initialize ol select controller.\n\n      this.createLayers();\n      this.olEditCtrl.highlightSource = this.highlightLayer.getSource();\n      this.olEditCtrl.popup = this.popup; //Initialize component layers\n\n      this.setUpCtxMenu();\n      this.toggleFeatureLabelsInteraction(this.toggleFeatureLabels);\n    },\n\n    /**\n     * Creates layers\n     */\n    createLayers: function createLayers() {\n      // Edit layer\n      var editLayer = new VectorImageLayer({\n        name: \"Edit Layer\",\n        displayInLayerList: false,\n        source: new VectorSource({\n          wrapX: false\n        }),\n        zIndex: 10,\n        style: getEditStyle(),\n        queryable: true\n      });\n      editLayer.getSource().on(\"changefeature\", this.onFeatureChange);\n      editLayer.getSource().on(\"change\", this.onEditSourceChange);\n      this.map.addLayer(editLayer);\n      this.editLayer = editLayer;\n      this.olEditCtrl.layer = editLayer;\n      this.olEditCtrl.source = editLayer.getSource(); // Highlight Layer\n\n      var highlightLayer = new VectorLayer({\n        displayInLayerList: false,\n        source: new VectorSource({\n          wrapX: false\n        }),\n        zIndex: 10,\n        style: getFeatureHighlightStyle()\n      });\n      this.map.addLayer(highlightLayer);\n      this.highlightLayer = highlightLayer; // Building entrance layer\n\n      var bldEntranceLayer = new VectorLayer({\n        name: \"bld_entrance_layer\",\n        displayInLayerList: false,\n        source: new VectorSource({\n          wrapX: false\n        }),\n        zIndex: 100,\n        queryable: false,\n        style: bldEntrancePointsStyle()\n      });\n      this.olEditCtrl.bldEntranceLayer = bldEntranceLayer;\n      this.bldEntranceLayer = bldEntranceLayer;\n      bldEntranceLayer.getSource().on(\"changefeature\", this.onBldEntranceFeatureChange);\n      this.map.addLayer(bldEntranceLayer);\n    },\n\n    /**\n     * Get Layer attribute fields\n     */\n    fetchScenarioLayerSchemas: function fetchScenarioLayerSchemas() {\n      var _this2 = this;\n\n      this.scenarioLayersConfig.forEach(function (config) {\n        var layerName = config.client_config.name;\n        var propertiesConfig = config.properties;\n        var props = [];\n        var layerConfig = {\n          listValues: {},\n          hiddenProps: [\"id\", \"way_id\", \"building_id\", \"uid\", \"building_modified_id\", \"geom\", \"class_id\"],\n          enableFileUpload: config.client_config.enableFileUpload || false\n        };\n        Object.keys(propertiesConfig).forEach(function (key) {\n          var columnConfig = {};\n          columnConfig.column_name = key;\n\n          if (key === \"geom\") {\n            columnConfig.data_type = \"USER-DEFINED\";\n          } else {\n            columnConfig.data_type = propertiesConfig[key].type;\n          }\n\n          if (config.required && config.required.includes(key)) {\n            columnConfig.is_nullable = \"NO\";\n          } else {\n            columnConfig.is_nullable = \"YES\";\n          }\n\n          props.push(columnConfig); // Check if it has enum values\n\n          if (propertiesConfig[key].enum) {\n            layerConfig.listValues[key] = {\n              values: propertiesConfig[key].enum\n            };\n          } // For pois add all list from poiIcon\n\n\n          if (key === \"category\" && [\"poi\"].includes(layerName)) {\n            layerConfig.listValues[key] = {\n              values: _this2.poiList\n            };\n          }\n        });\n        var jsonSchema = mapFeatureTypeProps(props, layerName, layerConfig);\n        _this2.schema[layerName] = jsonSchema;\n      });\n\n      if (this.layerName) {\n        this.updateReqFields(this.reqFields);\n        this.$forceUpdate();\n      }\n    },\n\n    /**\n     * Fetch scenario features for a layer\n     */\n    fetchScenarioLayerFeatures: function fetchScenarioLayerFeatures(layer) {\n      var _this3 = this;\n\n      var requests = [];\n      this.clearAll();\n      if (!this.activeScenario) return;\n      var modifiedFeaturesPromise = ApiService.get_(\"/scenarios/\".concat(this.activeScenario, \"/\").concat(layer, \"_modified/features?return_type=geojson\"));\n      requests.push(modifiedFeaturesPromise);\n\n      if (layer === \"building\") {\n        var populationModifiedFeaturePromise = ApiService.get_(\"/scenarios/\".concat(this.activeScenario, \"/population_modified/features?return_type=geojson\"));\n        requests.push(populationModifiedFeaturePromise);\n      }\n\n      this.isMapBusy = true;\n      axios.all(requests).then(axios.spread(function (modifiedLayer, population) {\n        [modifiedLayer, population].forEach(function (layerData, index) {\n          if (layerData) {\n            var features = geojsonToFeature(layerData.data, {\n              dataProjection: \"EPSG:4326\",\n              featureProjection: \"EPSG:3857\"\n            });\n\n            if (index === 1 && layer === \"building\") {\n              layer = \"population\";\n\n              _this3.bldEntranceLayer.getSource().clear();\n\n              _this3.bldEntranceLayer.getSource().addFeatures(features);\n\n              return;\n            }\n\n            features.forEach(function (feature) {\n              feature.setId(\"\".concat(layer, \"_\").concat(feature.getId()));\n              feature.set(\"layerName\", layer);\n            });\n\n            _this3.editLayer.getSource().addFeatures(features);\n\n            if (layer === \"poi\") {\n              _this3.poiModifiedFeatures = features;\n\n              _this3.turnOnAndLockPoiTreeNode(features, \"add\");\n            }\n          }\n        });\n\n        if (layer === \"poi\") {\n          _this3.syncPoiFeatures();\n        }\n\n        _this3.onEditSourceChange();\n      })).catch(function (error) {\n        throw new Error(error);\n      }).finally(function () {\n        _this3.isMapBusy = false;\n      });\n    },\n\n    /**\n     * When poi layer is selected check if category is already selected from user and lock it, if not select it first.\n     */\n    turnOnAndLockPoiTreeNode: function turnOnAndLockPoiTreeNode(features, type) {\n      var _this4 = this;\n\n      var uniqueCategories = _toConsumableArray(new Set(features.map(function (f) {\n        return f.get(\"category\");\n      })));\n\n      uniqueCategories.forEach(function (category) {\n        if (type == \"add\") {\n          if (!_this4.selectedPoisOnlyKeys.includes(category)) {\n            var poiNodeObj = _this4.poisTreeOnlyChildren[category];\n\n            if (poiNodeObj) {\n              poiNodeObj.isLocked = true;\n\n              _this4.selectedPoisAois.push(_this4.poisTreeOnlyChildren[category]);\n            }\n          } else {\n            _this4.selectedPoisAois.forEach(function (selectedPoi) {\n              if (selectedPoi.value === category) {\n                selectedPoi.isLocked = true;\n              }\n            });\n          }\n        }\n\n        if (type === \"unlock\") {\n          _this4.selectedPoisAois.forEach(function (selectedPoi) {\n            if (selectedPoi.values === category) {\n              selectedPoi.isLocked = false;\n            }\n          });\n        }\n      });\n    },\n    cleanPoiTreeNode: function cleanPoiTreeNode() {\n      this.selectedPoisAois.forEach(function (selectedPoi) {\n        if (selectedPoi.isLocked) {\n          selectedPoi.isLocked = false;\n        }\n      });\n    },\n\n    /**\n     * Toggle the select interaction\n     */\n    toggleSelectInteraction: function toggleSelectInteraction(state) {\n      if (state != undefined) {\n        EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = this.mapCursorTypeEnum[\"select\"];\n        }\n      } else {\n        EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = \"\";\n        }\n      }\n\n      var selectionType;\n\n      switch (state) {\n        case 0:\n          selectionType = \"multiple\";\n          break;\n\n        default:\n          break;\n      }\n\n      if (selectionType !== undefined) {\n        this.olSelectCtrl.addInteraction(selectionType, this.selectedLayer, this.onSelectionStart, this.onSelectionEnd);\n\n        if (this.addKeyupListener) {\n          this.addKeyupListener();\n        }\n      } else {\n        this.olSelectCtrl.removeInteraction();\n      }\n    },\n\n    /**\n     * Callback function executed when selection interaction starts.\n     */\n    onSelectionStart: function onSelectionStart() {\n      this.clear();\n    },\n\n    /**\n     * Callback function executed when selection interaction ends.\n     *\n     * @param  {ol/feature} features The features returned from selection interaction\n     */\n    onSelectionEnd: function onSelectionEnd(response) {\n      var _this5 = this;\n\n      this.toggleSelection = undefined;\n      this.olSelectCtrl.removeInteraction();\n\n      if (response) {\n        var features = geojsonToFeature(response.data, {\n          dataProjection: \"EPSG:4326\",\n          featureProjection: \"EPSG:3857\"\n        });\n        features.forEach(function (feature) {\n          feature.set(\"layerName\", _this5.selectedLayer[\"name\"]);\n        });\n        this.editLayer.getSource().addFeatures(features);\n      }\n    },\n\n    /**\n     * Toggle the edit interaction\n     */\n    toggleEditInteraction: function toggleEditInteraction(state) {\n      var _this6 = this;\n\n      var editType, startCb, endCb;\n\n      switch (state) {\n        case 1:\n          editType = \"add\";\n          startCb = this.onDrawStart;\n          endCb = this.onDrawEnd;\n          break;\n\n        case 2:\n          editType = \"modify\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n\n        case 3:\n          editType = \"modifyAttributes\";\n          startCb = this.openModifyAttributePopup;\n          break;\n\n        case 4:\n          editType = \"delete\";\n          endCb = this.openDeletePopup;\n          break;\n\n        case 5:\n          editType = \"move\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n\n        case 6:\n          editType = \"drawHole\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n\n        case 7:\n          editType = \"addBldEntrance\";\n          endCb = this.onBldEntranceInteractionEnd;\n          break;\n\n        default:\n          break;\n      }\n\n      if (editType !== undefined) {\n        this.olEditCtrl.addInteraction(editType, startCb, endCb);\n        EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n        this.$nextTick(function () {\n          if (_this6.map.getTarget().style) {\n            _this6.map.getTarget().style.cursor = _this6.mapCursorTypeEnum[editType];\n          }\n        });\n\n        if (this.addKeyupListener) {\n          this.addKeyupListener();\n        }\n\n        this.olEditCtrl.editType = editType;\n      } else {\n        this.olEditCtrl.editType = undefined;\n        this.olEditCtrl.removeInteraction();\n        EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = \"\";\n        }\n      }\n    },\n\n    /**\n     * Adds or remove snap interaction\n     */\n    toggleSnapGuideInteraction: function toggleSnapGuideInteraction(state) {\n      if (state === 0) {\n        this.olEditCtrl.addSnapGuideInteraction();\n        this.olEditCtrl.isSnapGuideActive = 1;\n      } else {\n        this.olEditCtrl.removeSnapGuideInteraction();\n        this.olEditCtrl.isSnapGuideActive = 0;\n      }\n    },\n\n    /**\n     * Toggle Feature labels\n     */\n    toggleFeatureLabelsInteraction: function toggleFeatureLabelsInteraction(state) {\n      this.editLayer.set(\"showLabels\", state);\n      this.editLayer.getSource().changed();\n    },\n\n    /**\n     * Open modify attribute popup\n     */\n    openModifyAttributePopup: function openModifyAttributePopup(evt) {\n      var _this7 = this;\n\n      var feature = this.editLayer.getSource().getClosestFeatureToCoordinate(evt.coordinate);\n      this.featuresToCommit = [];\n      this.highlightLayer.getSource().clear();\n\n      if (feature) {\n        var props = feature.getProperties();\n        this.$nextTick(function () {\n          for (var attr in _this7.dataObject) {\n            _this7.dataObject[attr] = attr in props ? props[attr] : null;\n          }\n\n          _this7.jsonFormKey += 1;\n        });\n        var geometry = feature.getGeometry();\n        var popupCoordinate = geometry.getCoordinates();\n\n        while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n          popupCoordinate = popupCoordinate[0];\n        }\n\n        this.map.getView().animate({\n          center: popupCoordinate,\n          duration: 400\n        });\n        this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n        this.featuresToCommit.push(feature);\n        this.highlightLayer.getSource().addFeature(feature.clone());\n        this.popup.title = \"modifyAttributes\";\n        this.popup.selectedInteraction = \"modifyAttributes\";\n        this.popup.isVisible = true;\n      }\n    },\n\n    /**\n     * Opens a popup for the delete confirmation\n     */\n    openDeletePopup: function openDeletePopup(evt) {\n      var feature;\n\n      if (evt.coordinate) {\n        var coordinate = evt.coordinate;\n        feature = this.editLayer.getSource().getClosestFeatureToCoordinate(coordinate);\n      } else {\n        //Triggered when user click scenario data table\n        //Create overlayer\n        this.olEditCtrl.createPopupOverlay();\n        feature = evt;\n      }\n\n      this.highlightLayer.getSource().addFeature(feature.clone());\n      this.featuresToCommit.push(feature);\n\n      if (feature) {\n        var geometry = feature.getGeometry();\n        var popupCoordinate = geometry.getCoordinates();\n\n        while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n          popupCoordinate = popupCoordinate[0];\n        }\n\n        this.map.getView().animate({\n          center: popupCoordinate,\n          duration: 400\n        });\n        this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n        this.popup.title = \"confirm\";\n        this.popup.selectedInteraction = \"delete\";\n        this.popup.isVisible = true;\n      }\n    },\n\n    /**\n     * Modify interaction start event handler\n     */\n    onModifyStart: function onModifyStart() {\n      this.featuresToCommit = [];\n      this.olEditCtrl.isInteractionOnProgress = true;\n    },\n\n    /**\n     * Modify interaction end event handler\n     */\n    onModifyEnd: function onModifyEnd() {\n      var _this8 = this;\n\n      this.olEditCtrl.isInteractionOnProgress = false;\n      this.clearDataObject();\n      var featuresToAdd = [];\n      var featuresToUpdate = [];\n      this.featuresToCommit.forEach(function (feature) {\n        var featureOut = _this8.setFeatureFields(feature);\n\n        var props = feature.getProperties();\n\n        if (props.editType !== \"d\") {\n          if (props.hasOwnProperty(\"edit_type\")) {\n            featureOut.setId(feature.getId());\n            featuresToUpdate.push(featureOut);\n          } else {\n            Object.keys(featureOut.getProperties()).forEach(function (prop) {\n              if (![\"edit_type\", _this8.original_id, \"geometry\"].includes(prop)) {\n                featureOut.set(prop, feature.get(prop));\n              }\n            });\n            featureOut.set(\"edit_type\", \"m\");\n            featureOut.set(_this8.original_id, feature.get(\"uid\") || feature.get(\"id\"));\n            featuresToAdd.push(featureOut);\n          }\n        }\n      });\n      this.createScenarioFeatures(featuresToAdd);\n      this.updateScenarioFeatures(featuresToUpdate);\n    },\n\n    /**\n     * Draw interaction start event handler\n     */\n    onDrawStart: function onDrawStart() {\n      this.featuresToCommit = [];\n    },\n\n    /**\n     * Draw interaction start event handler\n     */\n    onDrawEnd: function onDrawEnd(evt) {\n      var feature = evt.feature;\n      this.editLayer.getSource().addFeature(feature);\n      this.clearDataObject(); //Disable interaction until user fills the attributes for the feature and closes the popup\n\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(false);\n      }\n\n      this.featuresToCommit.push(feature);\n      this.highlightLayer.getSource().addFeature(feature.clone());\n      var popupCoordinate = feature.getGeometry().getCoordinates();\n\n      while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n        popupCoordinate = popupCoordinate[0];\n      }\n\n      this.map.getView().animate({\n        center: popupCoordinate,\n        duration: 400\n      });\n      this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n      this.popup.title = \"attributes\";\n      this.popup.selectedInteraction = \"add\";\n      this.popup.isVisible = true;\n    },\n    setFeatureFields: function setFeatureFields(feature) {\n      var props = feature.getProperties();\n      var featureOut = feature.clone();\n      var mandatoryProps = [].concat(_toConsumableArray(Object.keys(this.dataObject)), [\"edit_type\", this.original_id, \"geometry\", \"geom\"]);\n      Object.keys(props).forEach(function (prop) {\n        if (!mandatoryProps.includes(prop)) featureOut.unset(prop);\n      });\n      return featureOut;\n    },\n\n    /**\n     * Building Entrance interaction end.\n     */\n    onBldEntranceInteractionEnd: function onBldEntranceInteractionEnd(evt) {\n      var _this9 = this;\n\n      var coordinate;\n\n      if (evt.type === \"modifyend\") {\n        if (!this.tempBldEntranceFeature) return;\n        coordinate = this.tempBldEntranceFeature.getGeometry().getCoordinates();\n      } else {\n        coordinate = evt.feature.getGeometry().getCoordinates();\n      }\n\n      var buildingFeatureAtCoord;\n\n      if (evt.type === \"modifyend\") {\n        buildingFeatureAtCoord = this.olEditCtrl.source.getClosestFeatureToCoordinate(coordinate, function (candidate) {\n          if ((candidate.get(\"id\") || candidate.getId()) && _this9.tempBldEntranceFeature && _this9.tempBldEntranceFeature.get(\"building_modified_id\") === candidate.get(\"id\") || _this9.tempBldEntranceFeature.get(\"building_modified_id\") === candidate.get(\"id\") || _this9.tempBldEntranceFeature.get(\"building_modified_id\") === candidate.getId()) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      } else {\n        buildingFeatureAtCoord = this.olEditCtrl.source.getClosestFeatureToCoordinate(coordinate);\n      }\n\n      if (!buildingFeatureAtCoord && !buildingFeatureAtCoord.getId()) return; // This line restricts drawing entrance feature only in new drawn buildings (original_id is used as an identifier)\n\n      if (!buildingFeatureAtCoord.getProperties().hasOwnProperty(this.original_id)) {\n        return;\n      }\n\n      var bldEntranceCoordinate;\n\n      if (buildingFeatureAtCoord.getGeometry().intersectsCoordinate(coordinate)) {\n        bldEntranceCoordinate = coordinate;\n      } else {\n        var closestPoint = buildingFeatureAtCoord.getGeometry().getClosestPoint(coordinate);\n        bldEntranceCoordinate = closestPoint;\n\n        if (this.tempBldEntranceFeature && evt.type === \"modifyend\") {\n          this.tempBldEntranceFeature.setGeometry(new Point(bldEntranceCoordinate));\n        }\n      }\n\n      var bldEntranceFeature;\n\n      if (evt.type === \"modifyend\") {\n        // Update the existing building entrance feature\n        bldEntranceFeature = this.tempBldEntranceFeature; // Can't update the feature if id isn't available\n\n        if (!bldEntranceFeature.getId()) return; // Clone feature and transform for transaction.\n\n        var _bldEntranceFeature$g = bldEntranceFeature.getProperties(),\n            geometry = _bldEntranceFeature$g.geometry,\n            geom = _bldEntranceFeature$g.geom,\n            propsWithNoGeometry = _objectWithoutProperties(_bldEntranceFeature$g, [\"geometry\", \"geom\"]);\n\n        var clonedFeature = new Feature(_objectSpread({\n          geom: bldEntranceFeature.getGeometry().clone()\n        }, propsWithNoGeometry));\n        clonedFeature.setGeometryName(\"geom\");\n        ApiService.put(\"/scenarios/\".concat(this.activeScenario, \"/population_modified/features\"), {\n          features: [{\n            id: bldEntranceFeature.getId(),\n            geom: geometryToWKT(clonedFeature.getGeometry().clone().transform(\"EPSG:3857\", \"EPSG:4326\"))\n          }]\n        }).then(function (response) {\n          if (response.data) {\n            var feature = geojsonToFeature(response.data);\n\n            if (feature[0] && feature[0].get(\"id\")) {\n              bldEntranceFeature.setId(feature[0].get(\"id\"));\n            }\n          }\n        });\n      } else {\n        // Add new feature\n        bldEntranceFeature = new Feature({\n          geometry: new Point(bldEntranceCoordinate),\n          building_modified_id: buildingFeatureAtCoord.get(\"id\") || buildingFeatureAtCoord.get(\"id\") || buildingFeatureAtCoord.getId()\n        });\n        this.olEditCtrl.bldEntranceLayer.getSource().addFeature(bldEntranceFeature); // Clone feature and transform for transaction.\n\n        var _bldEntranceFeature$g2 = bldEntranceFeature.getProperties(),\n            _geometry = _bldEntranceFeature$g2.geometry,\n            _geom = _bldEntranceFeature$g2.geom,\n            _propsWithNoGeometry = _objectWithoutProperties(_bldEntranceFeature$g2, [\"geometry\", \"geom\"]);\n\n        var _clonedFeature = new Feature(_objectSpread({\n          geom: new Point(bldEntranceCoordinate)\n        }, _propsWithNoGeometry));\n\n        _clonedFeature.setGeometryName(\"geom\");\n\n        ApiService.post(\"/scenarios/\".concat(this.activeScenario, \"/population_modified/features\"), {\n          features: [_objectSpread({}, _clonedFeature.getProperties(), {\n            geom: geometryToWKT(_clonedFeature.getGeometry().clone().transform(\"EPSG:3857\", \"EPSG:4326\"))\n          })]\n        }).then(function (response) {\n          if (response.data) {\n            var feature = geojsonToFeature(response.data);\n\n            _this9.editLayer.getSource().changed();\n\n            if (feature[0] && feature[0].get(\"id\")) {\n              bldEntranceFeature.setId(feature[0].get(\"id\"));\n            }\n          }\n        });\n      }\n\n      setTimeout(function () {\n        _this9.tempBldEntranceFeature = null;\n      }, 100);\n    },\n\n    /**\n     * Feature change event handler for building entrance edit layer\n     */\n    onBldEntranceFeatureChange: function onBldEntranceFeatureChange(evt) {\n      if (evt.feature) {\n        // Used on modifyEnd event.\n        this.tempBldEntranceFeature = evt.feature;\n      }\n    },\n\n    /**\n     * Configure right-click for Edit.\n     */\n    setUpCtxMenu: function setUpCtxMenu() {\n      var _this10 = this;\n\n      if (this.contextmenu) {\n        this.olEditCtrl.contextmenu = this.contextmenu;\n        this.contextmenu.on(\"beforeopen\", function (evt) {\n          // Close helptoltip\n          if (_this10.olEditCtrl.helpTooltip) {\n            _this10.olEditCtrl.helpTooltip.setPosition(undefined);\n          }\n\n          var features = _this10.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: function layerFilter(candidate) {\n              if (candidate.get(\"name\") === \"bld_entrance_layer\") {\n                return true;\n              }\n\n              return false;\n            }\n          });\n\n          if (features.length > 0 && _this10.selectedLayer[\"name\"] === \"building\") {\n            _this10.contextmenu.extend([\"-\", // this is a separator\n            {\n              text: \"<i class=\\\"fa fa-trash fa-1x\\\" aria-hidden=\\\"true\\\"></i>&nbsp;&nbsp\".concat(_this10.$t(\"map.contextMenu.deleteBldEntrancePoint\")),\n              label: \"deleteBldEntrancePoint\",\n              callback: function callback() {\n                ApiService.delete(\"/scenarios/\".concat(_this10.activeScenario, \"/population_modified/features?id=\").concat(features[0].getId())).then(function (response) {\n                  if (response.data) {\n                    _this10.olEditCtrl.bldEntranceLayer.getSource().removeFeature(features[0]);\n\n                    _this10.editLayer.getSource().changed();\n                  }\n                });\n              }\n            }]);\n          }\n        });\n      }\n    },\n\n    /**\n     * Feature change event handler for edit layer\n     */\n    onFeatureChange: function onFeatureChange(evt) {\n      if ([\"modify\", \"move\", \"modifyAttributes\", \"drawHole\"].includes(this.olEditCtrl.editType)) {\n        var index = this.featuresToCommit.findIndex(function (i) {\n          return i.ol_uid === evt.feature.ol_uid;\n        });\n\n        if (index === -1) {\n          this.featuresToCommit.push(evt.feature);\n        } else {\n          this.featuresToCommit[index] = evt.feature;\n        }\n      }\n    },\n\n    /**\n     * Source change base event. Used to update scenario data table\n     * This event is called very often, so for performance improvement a\n     * debounce method  is used in updateDatatable\n     */\n    onEditSourceChange: function onEditSourceChange() {\n      this.isTableLoading = true;\n      this.updateDataTable();\n    },\n\n    /**\n     * Method called when edit layer source is changed.\n     * A debounce is addes to improve performance\n     * It updates the scenario data table.\n     */\n    updateDataTable: debounce(function () {\n      var _this11 = this;\n\n      if (!this.activeScenario) return;\n      var editLayerFeatures = this.editLayer.getSource().getFeatures();\n      var scenarioDataTable = [];\n      editLayerFeatures.forEach(function (f) {\n        var fid = f.getId();\n        var layerName = f.get(\"layerName\");\n        var isDeleted = false;\n        var status = \"uploaded\";\n        var type = \"\";\n        var originId;\n\n        if (f.get(\"edit_type\")) {\n          var editType = f.get(\"edit_type\");\n\n          if (editType === \"n\") {\n            type = \"new\";\n          } else if (editType === \"d\") {\n            type = \"deleted\";\n            isDeleted = true;\n            originId = f.get(_this11.original_id);\n          } else if (editType === \"m\") {\n            type = \"modified\";\n            originId = f.get(_this11.original_id);\n          }\n\n          var obj = {\n            fid: fid,\n            layerName: layerName,\n            isDeleted: isDeleted,\n            originId: originId,\n            status: status,\n            type: type\n          };\n          scenarioDataTable.push(obj);\n        }\n      });\n      this.scenarioDataTable = scenarioDataTable;\n      this.isTableLoading = false;\n    }, 900),\n    scenarioActionBtnHandler: function scenarioActionBtnHandler(item, type) {\n      var _this12 = this;\n\n      var fid = item.fid;\n      if (!fid) return;\n      var feature;\n      feature = this.editLayer.getSource().getFeatureById(fid);\n      if (!feature) return;\n\n      if (type === \"zoom\") {\n        this.map.getView().fit(feature.getGeometry().getExtent(), {\n          padding: [10, 10, 10, 10]\n        });\n        this.highlightLayer.getSource().addFeature(feature);\n        setTimeout(function () {\n          _this12.highlightLayer.getSource().removeFeature(feature);\n        }, 300);\n      } else if (type === \"delete\") {\n        this.openDeletePopup(feature);\n      } else if (type === \"restore\") {\n        this.map.getView().fit(feature.getGeometry().getExtent(), {\n          padding: [10, 10, 10, 10]\n        });\n        this.deleteScenarioFeatures([feature]);\n      }\n    },\n    isRestoreBtnVisible: function isRestoreBtnVisible(item) {\n      if (item.type !== \"deleted\" || !this.selectedLayer) {\n        return false;\n      }\n\n      return item.isDeleted;\n    },\n    isDeleteBtnVisible: function isDeleteBtnVisible(item) {\n      if (!item.originalId && item.isDeleted || !this.selectedLayer) {\n        return false;\n      }\n\n      return !item.isDeleted;\n    },\n\n    /**\n     * Clear data object that user has entered,\n     * so the next time the popup is opened the form is clean.\n     */\n    clearDataObject: function clearDataObject() {\n      var _this13 = this;\n\n      if (!this.layerName) return;\n      var properties = this.schema[this.layerName].properties;\n      var dataObject = {};\n      Object.keys(properties).forEach(function (key) {\n        if (properties[key] && properties[key][\"x-display\"] !== \"hidden\") {\n          dataObject[key] = null;\n          _this13.dataObject = dataObject;\n        }\n      });\n    },\n\n    /**\n     * Closes the popup if user choose cancel.\n     */\n    closePopup: function closePopup() {\n      var _this14 = this;\n\n      if (this.olEditCtrl.popupOverlay) {\n        this.olEditCtrl.popupOverlay.setPosition(undefined);\n        this.popup.isVisible = false;\n      }\n\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(true);\n      }\n\n      this.highlightLayer.getSource().clear();\n\n      if (this.interactionType === \"draw\") {\n        this.featuresToCommit.forEach(function (feature) {\n          if (_this14.editLayer.getSource().hasFeature(feature)) {\n            _this14.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      } // Removes features that are not modified\n\n\n      this.editLayer.getSource().getFeatures().forEach(function (feature) {\n        if (!feature.get(\"edit_type\") && feature.get(\"layerName\") !== \"poi\" && !feature.get(\"building_modified_id\") // building_modified_id is edge case to not clean population_modified features as they don't have an edit_type property\n        ) {\n            _this14.editLayer.getSource().removeFeature(feature);\n          }\n      });\n      this.featuresToCommit = [];\n    },\n\n    /**\n     * Clears all the selection and edit interactions.\n     */\n    clear: function clear() {\n      var _this15 = this;\n\n      // Removes features that are not modified\n      this.editLayer.getSource().getFeatures().forEach(function (feature) {\n        if (!feature.get(\"edit_type\") && feature.get(\"layerName\") !== \"poi\" && !feature.get(\"building_modified_id\") // building_modified_id is edge case to not clean population_modified features as they don't have an edit_type property\n        ) {\n            _this15.editLayer.getSource().removeFeature(feature);\n          }\n      });\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.clearDataObject();\n\n      if (this.contextmenu) {\n        this.contextmenu.close();\n      }\n\n      this.featuresToCommit = [];\n    },\n\n    /**\n     * Clears all the features from edit layer (triggered when user changes scenario)\n     */\n    clearAll: function clearAll() {\n      this.olEditCtrl.clear();\n      this.olSelectCtrl.clear();\n      this.editLayer.getSource().clear();\n      this.highlightLayer.getSource().clear();\n      this.bldEntranceLayer.getSource().clear();\n\n      if (this.contextmenu) {\n        this.contextmenu.close();\n      }\n\n      this.clearDataObject();\n      this.scenarioDataTable = [];\n      this.isInteractionOnProgress = false;\n      this.isTableLoading = false;\n      this.featuresToCommit = [];\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n    },\n\n    /**\n     * Delete all user scenario features in db.\n     */\n    deleteAll: function deleteAll() {\n      var _this16 = this;\n\n      this.$refs.confirm.open(this.$t(\"appBar.edit.deleteAllTitle\"), this.$t(\"appBar.edit.deleteAllMessage\"), {\n        color: this.appColor.primary\n      }).then(function (confirm) {\n        if (confirm) {\n          //1- Call api to delete all features.\n          _this16.isDeleteAllBusy = true;\n          ApiService.delete(\"/scenarios/\".concat(_this16.activeScenario, \"/\").concat(_this16.selectedLayer[\"name\"], \"_modified/features-all\")).then(function (response) {\n            _this16.isDeleteAllBusy = false;\n            _this16.isUploadBtnEnabled = true;\n\n            if (response.data === \"error\") {\n              //Show error message can't delete\n              _this16.toggleSnackbar({\n                type: \"error\",\n                //success or error\n                message: _this16.$t(\"map.snackbarMessages.cantDeleteAllScenarioFeatures\"),\n                state: true,\n                timeout: 4000\n              });\n            } else {\n              //Show success message\n              _this16.toggleSnackbar({\n                type: _this16.appColor.primary,\n                //success or error\n                message: _this16.$t(\"map.snackbarMessages.allScenarioFeaturesDelete\"),\n                state: true,\n                timeout: 4000\n              }); // Clear openlayers scenario features\n\n\n              _this16.stop();\n\n              if (_this16.selectedLayer[\"name\"] === \"poi\") {\n                _this16.fetchScenarioLayerFeatures(\"poi\");\n              } else {\n                _this16.clearAll();\n              }\n            }\n          }).catch(function () {\n            _this16.isDeleteAllBusy = false;\n          });\n        }\n      });\n    },\n\n    /**\n     * Delete scenario\n     */\n    deleteScenario: function deleteScenario() {\n      var _this17 = this;\n\n      this.$refs.confirm.open(this.$t(\"appBar.edit.deleteAllTitle\"), this.$t(\"appBar.edit.confirmDeleteScenario\"), {\n        color: this.appColor.primary\n      }).then(function (confirm) {\n        if (confirm) {\n          ApiService.delete(\"/scenarios/\".concat(_this17.activeScenario)).then(function (response) {\n            if (response.data === \"error\") {\n              //Show error message can't delete\n              _this17.toggleSnackbar({\n                type: \"error\",\n                //success or error\n                message: _this17.$t(\"map.snackbarMessages.cantDeleteScenario\"),\n                state: true,\n                timeout: 3000\n              });\n            } else {\n              //Show success message\n              _this17.toggleSnackbar({\n                type: _this17.appColor.primary,\n                //success or error\n                message: _this17.$t(\"map.snackbarMessages.scenarioDeleted\"),\n                state: true,\n                timeout: 3000\n              }); //- Refetch Scenario\n\n\n              _this17.$store.dispatch(\"scenarios/\".concat(GET_SCENARIOS)); //- Clear openlayers scenario features\n\n\n              _this17.clearAll();\n\n              _this17.selectedLayer = null;\n              _this17.activeScenario = null;\n            }\n          });\n        }\n      }).catch(function () {\n        _this17.toggleSnackbar({\n          type: \"error\",\n          //success or error\n          message: _this17.$t(\"map.snackbarMessages.cantDeleteScenario\"),\n          state: true,\n          timeout: 3000\n        });\n      });\n    },\n\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop: function stop() {\n      this.closePopup();\n      this.olSelectCtrl.removeInteraction();\n      this.olEditCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.toggleSelection = undefined;\n      this.toggleEdit = undefined;\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n\n      this.clear();\n    },\n\n    /**\n     * Translate method to avoid inline html logic\n     */\n    translate: function translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      var canTranslate = this.$te(\"map.\".concat(type, \".\").concat(key));\n\n      if (canTranslate) {\n        return this.$t(\"map.\".concat(type, \".\").concat(key));\n      } else {\n        return key;\n      }\n    },\n\n    /**\n     * Method used on popup save (draw)/ok(delete) depending on interaction type\n     */\n    ok: function ok(type) {\n      var featureOut = this.featuresToCommit[0].clone(); // Reset id of the original feature\n\n      featureOut.setId(this.featuresToCommit[0].getId());\n      var properties = this.featuresToCommit[0].getProperties();\n\n      if (type === \"add\") {\n        // New feature\n        featureOut.setProperties(this.dataObject);\n        featureOut.set(\"edit_type\", \"n\");\n        this.createScenarioFeatures([featureOut]);\n      }\n\n      if (type === \"modifyAttributes\") {\n        // Modified existing feature\n        var _featureOut = this.setFeatureFields(this.featuresToCommit[0]);\n\n        _featureOut.setProperties(this.dataObject);\n\n        var props = this.featuresToCommit[0].getProperties();\n\n        if (props.editType !== \"d\") {\n          if (props.hasOwnProperty(\"edit_type\")) {\n            _featureOut.setId(this.featuresToCommit[0].getId());\n\n            this.updateScenarioFeatures([_featureOut]);\n          } else {\n            _featureOut.set(\"edit_type\", \"m\");\n\n            _featureOut.set(this.original_id, this.featuresToCommit[0].get(\"uid\") || this.featuresToCommit[0].get(\"id\"));\n\n            this.createScenarioFeatures([_featureOut]);\n            this.editLayer.getSource().removeFeature(this.featuresToCommit[0]);\n          }\n        }\n      } else if (type === \"delete\" && !properties.hasOwnProperty(\"edit_type\")) {\n        // Deleted an origin feature (has to be created as deleted feature)\n        var allowedKeys = Object.keys(this.dataObject);\n        Object.keys(this.featuresToCommit[0].getProperties()).forEach(function (prop) {\n          if (!allowedKeys.includes(prop) && prop !== \"geometry\") {\n            featureOut.unset(prop);\n          }\n        });\n\n        if (this.featuresToCommit[0].get(\"id\")) {\n          var original_id_ = this.featuresToCommit[0].get(\"uid\") || this.featuresToCommit[0].get(\"id\");\n          featureOut.set(this.original_id, original_id_);\n        }\n\n        featureOut.set(\"edit_type\", \"d\");\n        this.createScenarioFeatures([featureOut]);\n        this.editLayer.getSource().removeFeature(this.featuresToCommit[0]);\n      } else if (type === \"delete\") {\n        // Deleted a feature which is already modified. Delete from \"_modified\" layer\n        this.deleteScenarioFeatures([featureOut]);\n      }\n\n      if (this.olEditCtrl.popupOverlay) {\n        this.olEditCtrl.popupOverlay.setPosition(undefined);\n        this.popup.isVisible = false;\n      }\n\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(true);\n      }\n\n      this.highlightLayer.getSource().clear();\n    },\n\n    /**\n     * ====API CALLS====\n     */\n\n    /**\n     * Create scenario features\n     */\n    createScenarioFeatures: function createScenarioFeatures(features) {\n      var _this18 = this;\n\n      if (features.length === 0) return;\n      var payload = features.map(function (feature) {\n        var transformed = _objectSpread({}, feature.getProperties(), {\n          geom: geometryToWKT(feature.getGeometry().clone().transform(\"EPSG:3857\", \"EPSG:4326\"))\n        });\n\n        delete transformed.geometry;\n        return transformed;\n      });\n      this.isMapBusy = true;\n      ApiService.post(this.scenarioApiBaseUrl, {\n        features: payload\n      }).then(function (response) {\n        // TODO: Don't remove features from featuresToCommit (Too late here. We should get the features from cloned features)\n        _this18.featuresToCommit.forEach(function (feature) {\n          if (_this18.editLayer.getSource().hasFeature(feature)) {\n            _this18.editLayer.getSource().removeFeature(feature);\n          }\n        });\n\n        var featuresWithId = geojsonToFeature(response.data, {\n          dataProjection: \"EPSG:4326\",\n          featureProjection: \"EPSG:3857\"\n        });\n        featuresWithId.forEach(function (feature) {\n          feature.setId(\"\".concat(_this18.selectedLayer[\"name\"], \"_\").concat(feature.getId()));\n          feature.set(\"layerName\", _this18.selectedLayer[\"name\"]);\n        });\n\n        if (_this18.selectedLayer[\"name\"] === \"poi\") {\n          var _this18$poiModifiedFe;\n\n          _this18.turnOnAndLockPoiTreeNode(featuresWithId, \"add\");\n\n          (_this18$poiModifiedFe = _this18.poiModifiedFeatures).push.apply(_this18$poiModifiedFe, _toConsumableArray(featuresWithId));\n        }\n\n        _this18.editLayer.getSource().addFeatures(featuresWithId);\n\n        _this18.refreshHeatmap(); // Activate building entrance interaction if selected layer is building\n\n\n        if (_this18.selectedLayer[\"name\"] === \"building\" && _this18.olEditCtrl.editType === \"add\") {\n          _this18.toggleEdit = 7;\n        }\n      }).catch(function (error) {\n        console.log(error);\n\n        _this18.toggleSnackbar({\n          type: \"error\",\n          //success or error\n          message: _this18.$t(\"appBar.edit.cantCreateScenarioFeature\"),\n          state: true,\n          timeout: 3000\n        });\n\n        _this18.featuresToCommit.forEach(function (feature) {\n          if (_this18.editLayer.getSource().hasFeature(feature)) {\n            _this18.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      }).finally(function () {\n        _this18.isMapBusy = false;\n        _this18.featuresToCommit = [];\n      });\n    },\n\n    /**\n     * Update scenario features\n     */\n    updateScenarioFeatures: function updateScenarioFeatures(features) {\n      var _this19 = this;\n\n      if (features.length === 0) return;\n      var payload = features.map(function (feature) {\n        var transformed = _objectSpread({\n          id: parseInt(feature.getId().split(\"_\")[1])\n        }, feature.getProperties(), {\n          geom: geometryToWKT(feature.getGeometry().clone().transform(\"EPSG:3857\", \"EPSG:4326\"))\n        });\n\n        delete transformed.edit_type;\n        delete transformed.geometry;\n        delete transformed[_this19.original_id];\n        return transformed;\n      });\n      this.isMapBusy = true;\n      ApiService.put(this.scenarioApiBaseUrl, {\n        features: payload\n      }).then(function (response) {\n        features.forEach(function (feature) {\n          var featureIn = _this19.editLayer.getSource().getFeatureById(feature.getId());\n\n          if (featureIn) {\n            _this19.editLayer.getSource().removeFeature(featureIn);\n          }\n        });\n        var featuresWithId = geojsonToFeature(response.data, {\n          dataProjection: \"EPSG:4326\",\n          featureProjection: \"EPSG:3857\"\n        });\n        featuresWithId.forEach(function (feature) {\n          feature.setId(\"\".concat(_this19.selectedLayer[\"name\"], \"_\").concat(feature.getId()));\n          feature.set(\"layerName\", _this19.selectedLayer[\"name\"]);\n        });\n\n        _this19.editLayer.getSource().addFeatures(featuresWithId);\n\n        _this19.refreshHeatmap();\n      }).catch(function () {\n        _this19.toggleSnackbar({\n          type: \"error\",\n          //success or error\n          message: _this19.$t(\"appBar.edit.canNotUpdateScenarioFeature\"),\n          state: true,\n          timeout: 3000\n        });\n\n        features.forEach(function (feature) {\n          if (_this19.editLayer.getSource().hasFeature(feature)) {\n            _this19.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      }).finally(function () {\n        _this19.isMapBusy = false;\n        _this19.featuresToCommit = [];\n      });\n    },\n\n    /**\n     * Delete scenario features\n     */\n    deleteScenarioFeatures: function deleteScenarioFeatures(features) {\n      var _this20 = this;\n\n      var queryParam = \"\";\n\n      if (features.length === 1) {\n        queryParam += \"id=\".concat(parseInt(features[0].getId().split(\"_\")[1]));\n      } else {\n        features.forEach(function (feature, index) {\n          var id = parseInt(feature.getId().split(\"_\")[1]);\n\n          if (id && index !== features - 1) {\n            queryParam += \"id=\".concat(id, \"&\");\n          } else if (id) {\n            queryParam += \"id=\".concat(id);\n          }\n        });\n      }\n\n      this.isMapBusy = true;\n      ApiService.delete(\"\".concat(this.scenarioApiBaseUrl, \"?\").concat(queryParam)).then(function () {\n        // For pois if there is no modified features, we need to unlock the tree node.\n        features.forEach(function (feature) {\n          if (feature.getId()) {\n            var featureIn = _this20.editLayer.getSource().getFeatureById(feature.getId());\n\n            if (featureIn) {\n              var props = featureIn.getProperties();\n\n              if ([\"m\", \"d\"].includes(props.edit_type)) {\n                featureIn.unset(\"edit_type\");\n\n                if (_this20.selectedLayer[\"name\"] === \"poi\") {\n                  // Find origin feature and add it here\n                  var originFeature = _this20.poisAoisLayer.getSource().getFeatures().filter(function (f) {\n                    return f.get(\"uid\") === featureIn.get(\"uid\");\n                  });\n\n                  if (Array.isArray(originFeature) && originFeature.length > 0) {\n                    var clonedFeature = originFeature[0].clone();\n                    clonedFeature.setId(originFeature[0].get(\"id\"));\n                    clonedFeature.set(\"layerName\", \"poi\");\n\n                    _this20.editLayer.getSource().addFeature(clonedFeature);\n                  } // Delete feature from pois modified features array\n\n\n                  _this20.poiModifiedFeatures.forEach(function (f) {\n                    if (f.get(\"uid\") === featureIn.get(\"uid\")) {\n                      _this20.poiModifiedFeatures.splice(_this20.poiModifiedFeatures.indexOf(f), 1);\n                    }\n                  });\n                }\n              }\n\n              if (_this20.selectedLayer[\"name\"] === \"building\" && featureIn.get(\"id\")) {\n                // Delete all bldEntrance features on the same building\n                var bldEntranceFeatures = _this20.bldEntranceLayer.getSource().getFeatures().filter(function (f) {\n                  return f.get(\"building_modified_id\") === featureIn.get(\"id\");\n                });\n\n                bldEntranceFeatures.forEach(function (f) {\n                  _this20.bldEntranceLayer.getSource().removeFeature(f);\n                });\n              }\n\n              _this20.editLayer.getSource().removeFeature(featureIn);\n            }\n          }\n        });\n\n        _this20.refreshHeatmap();\n      }).catch(function () {\n        _this20.toggleSnackbar({\n          type: \"error\",\n          //success or error\n          message: _this20.$t(\"appBar.edit.canNotDeleteScenarioFeature\"),\n          state: true,\n          timeout: 3000\n        });\n      }).finally(function () {\n        _this20.isMapBusy = false;\n        _this20.featuresToCommit = [];\n      });\n    },\n    refreshHeatmap: function refreshHeatmap() {\n      if (this.selectedLayer[\"name\"]) {\n        EventBus.$emit(\"update-heatmap\", \"poi\");\n      }\n\n      if (this.selectedLayer[\"building\"]) {\n        // TODO: Update only when building population is added\n        EventBus.$emit(\"update-heatmap\", \"population\");\n      }\n    }\n  }, mapMutations(\"map\", {\n    toggleSnackbar: \"TOGGLE_SNACKBAR\",\n    updateReqFields: \"UPDATE_REQ_FIELDS\",\n    setBldEntranceLayer: \"SET_BLD_ENTRANCE_LAYER\",\n    setEditLayer: \"SET_EDIT_LAYER\"\n  })),\n  computed: _objectSpread({\n    headers: function headers() {\n      return [{\n        text: this.$t(\"appBar.edit.table.layer\"),\n        value: \"layerName\",\n        sortable: false,\n        align: \"center\",\n        width: \"20%\"\n      }, {\n        text: this.$t(\"appBar.edit.table.status\"),\n        value: \"status\",\n        sortable: false,\n        align: \"center\",\n        width: \"25%\"\n      }, {\n        text: this.$t(\"appBar.edit.table.type\"),\n        value: \"type\",\n        sortable: false,\n        align: \"center\",\n        width: \"25%\"\n      }, {\n        text: this.$t(\"appBar.edit.table.actions\"),\n        value: \"action\",\n        sortable: false,\n        align: \"center\",\n        width: \"25%\"\n      }];\n    },\n    scenarioLayersConfig: function scenarioLayersConfig() {\n      var schemas = this.openapiConfig.components.schemas;\n      var scenarioLayersConfig = [schemas.ScenarioPoisModifiedCreate, schemas.ScenarioWaysModifiedCreate, schemas.ScenarioBuildingsModifiedCreate];\n      return scenarioLayersConfig;\n    },\n    layerName: function layerName() {\n      var value;\n\n      if (this.selectedLayer) {\n        value = this.selectedLayer[\"name\"];\n      } else {\n        value = \"\";\n      }\n\n      return value;\n    },\n    reqFields: function reqFields() {\n      var layerSchema = this.schema[this.layerName];\n      var layerFieldsKeys = Object.keys(layerSchema.properties);\n      return layerFieldsKeys.filter(function (el) {\n        return ![\"way_id\", \"uid\", \"building_modified_id\", \"building_id\", \"id\", \"scenario_id\"].includes(el) && layerSchema.required.includes(el);\n      });\n    },\n    options: function options() {\n      return {\n        debug: false,\n        disableAll: false,\n        autoFoldObjects: true\n      };\n    },\n    original_id: function original_id() {\n      if (!this.selectedLayer) return \"\";\n\n      if (this.selectedLayer[\"name\"] === \"poi\") {\n        return \"uid\";\n      } else if (this.selectedLayer[\"name\"] === \"building\") {\n        return \"building_id\";\n      } else if (this.selectedLayer[\"name\"] === \"way\") {\n        return \"way_id\";\n      } else {\n        return \"\";\n      }\n    },\n    poiList: function poiList() {\n      var _this21 = this;\n\n      return Object.keys(this.poiIcons).filter(function (poiName) {\n        return !!_this21.poisConfig[poiName];\n      });\n    },\n    scenarioApiBaseUrl: function scenarioApiBaseUrl() {\n      return \"/scenarios/\".concat(this.activeScenario, \"/\").concat(this.selectedLayer[\"name\"], \"_modified/features\");\n    }\n  }, mapGetters(\"auth\", {\n    currentUser: \"currentUser\"\n  }), {}, mapGetters(\"app\", {\n    appColor: \"appColor\",\n    calculationMode: \"calculationMode\",\n    openapiConfig: \"openapiConfig\",\n    poiIcons: \"poiIcons\",\n    poisConfig: \"poisConfig\",\n    poisTreeOnlyChildren: \"poisTreeOnlyChildren\",\n    scenarioLayerEditModeColor: \"scenarioLayerEditModeColor\"\n  }), {}, mapGetters(\"map\", {\n    contextmenu: \"contextmenu\",\n    layers: \"layers\"\n  }), {}, mapGetters(\"poisaois\", {\n    poisAoisLayer: \"poisAoisLayer\",\n    poisAois: \"poisAois\",\n    selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n  }), {}, mapFields(\"poisaois\", {\n    selectedPoisAois: \"selectedPoisAois\"\n  }), {}, mapFields(\"scenarios\", {\n    scenarioDataTable: \"scenarioDataTable\",\n    scenarios: \"scenarios\",\n    activeScenario: \"activeScenario\"\n  }), {\n    scenarioList: function scenarioList() {\n      return [{\n        id: null,\n        scenario_name: this.$t(\"appBar.edit.noSelection\")\n      }].concat(_toConsumableArray(this.scenarios));\n    }\n  }, mapGetters(\"scenarios\", {\n    activeScenarioObj: \"activeScenarioObj\"\n  }), {}, mapFields(\"map\", {\n    selectedLayer: \"selectedEditLayer\",\n    isMapBusy: \"isMapBusy\",\n    editLayer: \"editLayer\",\n    bldEntranceLayer: \"bldEntranceLayer\"\n  }), {}, mapFields(\"app\", {\n    appConfig: \"appConfig\",\n    calculationMode: \"calculationMode\"\n  })),\n  created: function created() {\n    var editableLayers = [];\n    this.scenarioLayersConfig.forEach(function (config) {\n      editableLayers.push(config.client_config);\n    });\n    this.editableLayers = editableLayers;\n    this.fetchScenarioLayerSchemas();\n    this.primaryColorBackup = this.appConfig.app_ui.base_color.primary;\n  }\n};",{"version":3,"sources":["Edit.vue"],"names":[],"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","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-card flat>\n      <v-subheader class=\"mb-4\">\n        <span class=\"title\">{{ $t(\"appBar.edit.title\") }}</span>\n      </v-subheader>\n      <v-card-text class=\"pt-0 pb-0 px-0 mx-0\">\n        <v-divider></v-divider>\n      </v-card-text>\n      <v-card-text class=\"pa-2\">\n        <div v-if=\"scenarioList.length === 1 && scenarioList[0].id === null\">\n          <v-tooltip top>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn\n                v-on=\"on\"\n                class=\"mt-n11 ml-2\"\n                :color=\"appColor.primary\"\n                @click=\"showScenarioDialog = true\"\n                fab\n                dark\n                small\n              >\n                <v-icon dark>add</v-icon>\n              </v-btn>\n            </template>\n            <span>{{ $t(\"appBar.edit.createScenario\") }}</span>\n          </v-tooltip>\n        </div>\n      </v-card-text>\n\n      <v-card class=\"px-16 mx-4 py-0 mb-2 fill-height\" flat>\n        <!-- CREATE SCENARIO  -->\n        <div v-if=\"scenarioList.length > 1\">\n          <v-row class=\"mt-4\" no-gutters no-wrap>\n            <v-select\n              v-model=\"activeScenario\"\n              :items=\"scenarioList\"\n              style=\"max-width: 260px;\"\n              item-text=\"scenario_name\"\n              item-value=\"id\"\n              label=\"Select scenario\"\n              solo\n            >\n              <template\n                class=\"create-scenario-text\"\n                slot=\"selection\"\n                slot-scope=\"{ item }\"\n              >\n                {{ item.scenario_name }}\n              </template>\n              <template\n                class=\"create-scenario-text\"\n                slot=\"item\"\n                slot-scope=\"{ item }\"\n              >\n                {{ item.scenario_name }}\n              </template>\n            </v-select>\n\n            <div v-if=\"activeScenario\">\n              <v-speed-dial\n                style=\"z-index:100;\"\n                v-model=\"scenarioSpeedDialFab\"\n                direction=\"bottom\"\n                class=\"ml-3 mt-2\"\n                transition=\"slide-y-reverse-transition\"\n              >\n                <template v-slot:activator>\n                  <v-btn\n                    v-model=\"scenarioSpeedDialFab\"\n                    :color=\"scenarioSpeedDialFab ? 'error' : appColor.primary\"\n                    dark\n                    small\n                    fab\n                  >\n                    <v-icon v-if=\"scenarioSpeedDialFab\">\n                      close\n                    </v-icon>\n                    <v-icon v-else>\n                      more_vert\n                    </v-icon>\n                  </v-btn>\n                </template>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-on=\"on\"\n                      :color=\"appColor.primary\"\n                      fab\n                      dark\n                      x-small\n                      v-if=\"scenarios.length < currentUser.limit_scenarios\"\n                      @click=\"showScenarioDialog = true\"\n                    >\n                      <v-icon dark>add</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.createScenario\") }}</span>\n                </v-tooltip>\n                <v-tooltip v-show=\"activeScenario\" top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"activeScenario\"\n                      v-on=\"on\"\n                      :color=\"appColor.primary\"\n                      fab\n                      dark\n                      x-small\n                      @click=\"\n                        showScenarioDialog = true;\n                        activeScenarioId = activeScenario;\n                      \"\n                    >\n                      <v-icon dark>edit</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.editScenarioName\") }}</span>\n                </v-tooltip>\n                <v-tooltip v-show=\"activeScenario\" top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"activeScenario\"\n                      v-on=\"on\"\n                      color=\"error\"\n                      fab\n                      dark\n                      x-small\n                      @click=\"deleteScenario\"\n                    >\n                      <v-icon dark>delete</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.deleteScenario\") }}</span>\n                </v-tooltip>\n              </v-speed-dial>\n            </div>\n            <div v-else>\n              <v-tooltip top>\n                <template v-slot:activator=\"{ on }\">\n                  <v-btn\n                    v-on=\"on\"\n                    :color=\"appColor.primary\"\n                    class=\"ml-3 mt-2\"\n                    fab\n                    :disabled=\"scenarios.length >= currentUser.limit_scenarios\"\n                    small\n                    @click=\"showScenarioDialog = true\"\n                  >\n                    <v-icon color=\"white\">add</v-icon>\n                  </v-btn>\n                </template>\n                <span>{{ $t(\"appBar.edit.createScenario\") }}</span>\n              </v-tooltip>\n            </div>\n          </v-row>\n        </div>\n        <v-alert\n          v-if=\"scenarios.length >= currentUser.limit_scenarios\"\n          dense\n          outlined\n          type=\"error\"\n        >\n          {{ $t(\"appBar.edit.scenarioLimitReached\") }}\n        </v-alert>\n        <div v-if=\"scenarioList.length > 1 && activeScenario\">\n          <v-divider></v-divider>\n          <v-subheader class=\"ml-0 pl-0 mb-0 pb-0\">\n            <v-icon :style=\"`color:${appColor.secondary};`\" small class=\"mr-2\"\n              >fas fa-layer-group</v-icon\n            >\n            <h3>{{ $t(\"appBar.edit.selectLayer\") }}</h3>\n          </v-subheader>\n          <v-select\n            class=\"mt-4\"\n            :items=\"editableLayers\"\n            v-model=\"selectedLayer\"\n            item-value=\"name\"\n            return-object\n            solo\n            :label=\"$t('appBar.edit.layerToEdit')\"\n          >\n            <template slot=\"selection\" slot-scope=\"{ item }\">\n              {{ translate(\"layerName\", item.name) }}\n            </template>\n            <template slot=\"item\" slot-scope=\"{ item }\">\n              {{ translate(\"layerName\", item.name) }}\n            </template>\n          </v-select>\n        </div>\n\n        <template v-if=\"selectedLayer && schema[layerName] && activeScenario\">\n          <v-divider></v-divider>\n          <!-- ==== <EDIT> ====-->\n\n          <v-subheader\n            v-show=\"selectedLayer !== null && activeScenario\"\n            class=\"clickable ml-0 pl-0\"\n            @click=\"editElVisible = !editElVisible\"\n          >\n            <v-icon\n              :style=\"\n                editElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              small\n              class=\"mr-2\"\n              >fas fa-edit</v-icon\n            >\n            <h3>{{ $t(\"appBar.edit.editTools\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon v-html=\"editElVisible === true ? 'remove' : 'add'\"></v-icon>\n          </v-subheader>\n\n          <div class=\"ml-2\" v-if=\"editElVisible\">\n            <span\n              v-show=\"selectedLayer != null && selectedLayer['name'] !== 'poi'\"\n              class=\"py-1 mb-0 mt-3 pl-0 ml-0\"\n            >\n              <h4>{{ $t(\"appBar.edit.selectFeatures\") }}</h4>\n            </span>\n\n            <v-flex\n              xs12\n              v-show=\"selectedLayer != null && selectFeaturesVisible\"\n              class=\"mt-1 pt-0 mb-4\"\n            >\n              <v-btn-toggle\n                v-show=\"selectedLayer['name'] != 'poi'\"\n                v-model=\"toggleSelection\"\n              >\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn v-on=\"on\" text>\n                      <v-icon>far fa-dot-circle</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.drawCircle\") }}</span>\n                </v-tooltip>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn v-on=\"on\" text v-show=\"false\">\n                      <v-icon>far fa-hand-pointer</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.selectOnMap\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n            </v-flex>\n\n            <span v-show=\"selectedLayer != null\" class=\"py-1 mb-0 pl-0 ml-0\">\n              <h4>{{ $t(\"appBar.edit.editTools\") }}</h4>\n            </span>\n\n            <v-flex\n              xs12\n              v-show=\"selectEditVisible && selectedLayer != null\"\n              class=\"mt-1 pt-0 mb-3\"\n            >\n              <v-btn-toggle v-model=\"toggleEdit\">\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn :value=\"1\" v-on=\"on\" text>\n                      <v-icon medium>add</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.drawFeatureTooltip\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip\n                  v-show=\"selectedLayer['canModifyGeom'] !== false\"\n                  top\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"selectedLayer['canModifyGeom'] !== false\"\n                      :value=\"2\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-edit</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.modifyFeatureTooltip\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      :value=\"3\"\n                      v-show=\"selectedLayer['modifyAttributes'] === true\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-list-alt</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.modifyAttributes\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn :value=\"4\" v-on=\"on\" text>\n                      <v-icon>far fa-trash-alt</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.deleteFeature\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip\n                  top\n                  v-show=\"\n                    !['Point'].some(r =>\n                      selectedLayer['editGeometry'].includes(r)\n                    )\n                  \"\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"\n                        !['Point', 'LineString'].some(r =>\n                          selectedLayer['editGeometry'].includes(r)\n                        )\n                      \"\n                      :value=\"5\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-clone</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.moveFeature\") }}</span>\n                </v-tooltip>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      :value=\"6\"\n                      v-show=\"\n                        !['Point', 'LineString'].some(r =>\n                          selectedLayer['editGeometry'].includes(r)\n                        )\n                      \"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-object-group</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.drawPolygonHole\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n              <br />\n\n              <v-btn-toggle v-model=\"toggleEdit\">\n                <v-tooltip v-if=\"selectedLayer['name'] === 'building'\" top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      class=\"ml-0 mr-2 mt-2\"\n                      v-if=\"selectedLayer['name'] === 'building'\"\n                      :value=\"7\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-building</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.addBldEntrance\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n\n              <v-btn-toggle v-model=\"toggleSnapGuide\">\n                <v-tooltip\n                  top\n                  v-if=\"\n                    ['Polygon', 'MultiPolygon'].some(r =>\n                      selectedLayer['editGeometry'].includes(r)\n                    )\n                  \"\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn class=\"ml-0 mt-2\" v-on=\"on\" text>\n                      <v-icon>fas fa-border-all</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.snapGuide\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n\n              <v-btn-toggle v-model=\"toggleFeatureLabels\">\n                <v-tooltip\n                  top\n                  v-if=\"\n                    ['Polygon', 'MultiPolygon'].some(r =>\n                      selectedLayer['editGeometry'].includes(r)\n                    )\n                  \"\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn class=\"ml-2 mt-2\" v-on=\"on\" text>\n                      <v-icon>fas fa-font</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.featureLabels\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n            </v-flex>\n          </div>\n          <v-divider></v-divider>\n          <!-- ==== </EDIT> ==== -->\n        </template>\n\n        <template v-if=\"activeScenario && selectedLayer && schema[layerName]\">\n          <!-- ==== <DATA TABLE> ====-->\n          <v-subheader\n            class=\"clickable ml-0 pl-0\"\n            @click=\"dataTableElVisible = !dataTableElVisible\"\n          >\n            <v-icon\n              :style=\"\n                dataTableElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              small\n              class=\"mr-2\"\n              >far fa-list-alt</v-icon\n            >\n            <h3>{{ $t(\"appBar.edit.scenarioFeatures\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon\n              v-html=\"dataTableElVisible === true ? 'remove' : 'add'\"\n            ></v-icon>\n          </v-subheader>\n          <div class=\"ml-2\" v-if=\"dataTableElVisible\">\n            <v-expand-transition>\n              <v-flex xs12 class=\"mt-1 pt-0 mb-0\">\n                <v-data-table\n                  :headers=\"headers\"\n                  :loading=\"isTableLoading\"\n                  :items=\"scenarioDataTable\"\n                  :items-per-page=\"15\"\n                  class=\"elevation-0\"\n                >\n                  <template v-slot:item.status=\"{ item }\">\n                    <v-chip\n                      small\n                      :color=\"\n                        item.status === 'uploaded' ? appColor.primary : 'error'\n                      \"\n                      dark\n                      class=\"mx-0 px-1\"\n                      >{{ $t(`appBar.edit.status.${item.status}`) }}</v-chip\n                    >\n                  </template>\n                  <template v-slot:item.type=\"{ item }\">\n                    <span>{{ $t(`appBar.edit.type.${item.type}`) }}</span>\n                  </template>\n\n                  <template v-slot:item.action=\"{ item }\">\n                    <!-- zoom to scenario feature -->\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-icon\n                          v-on=\"on\"\n                          :disabled=\"isUploadBusy\"\n                          class=\"scenario-icon\"\n                          @click=\"scenarioActionBtnHandler(item, 'zoom')\"\n                        >\n                          zoom_out_map\n                        </v-icon>\n                      </template>\n                      <span>{{ $t(`map.tooltips.zoomToFeature`) }}</span>\n                    </v-tooltip>\n                    <!-- delete scenario feature -->\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-icon\n                          v-show=\"isDeleteBtnVisible(item)\"\n                          class=\"scenario-icon-delete\"\n                          :disabled=\"isUploadBusy\"\n                          v-on=\"on\"\n                          @click=\"scenarioActionBtnHandler(item, 'delete')\"\n                        >\n                          delete\n                        </v-icon>\n                      </template>\n                      <span>{{ $t(`map.tooltips.deleteFeature`) }}</span>\n                    </v-tooltip>\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-icon\n                          v-show=\"isRestoreBtnVisible(item)\"\n                          class=\"scenario-icon\"\n                          :disabled=\"isUploadBusy\"\n                          v-on=\"on\"\n                          @click=\"scenarioActionBtnHandler(item, 'restore')\"\n                        >\n                          restore_from_trash\n                        </v-icon>\n                      </template>\n                      <span>{{ $t(`map.tooltips.restoreFeature`) }}</span>\n                    </v-tooltip>\n                  </template>\n                </v-data-table>\n              </v-flex>\n            </v-expand-transition>\n          </div>\n          <!-- ==== < /DATA TABLE> ====-->\n        </template>\n      </v-card>\n      <!-- ----- -->\n      <v-card-actions v-if=\"selectedLayer && schema[layerName]\">\n        <v-spacer></v-spacer>\n\n        <v-hover v-slot=\"{ hover }\">\n          <v-btn\n            v-show=\"selectedLayer\"\n            class=\"white--text\"\n            :color=\"hover ? 'error' : 'grey'\"\n            outlined\n            :loading=\"isDeleteAllBusy\"\n            :disabled=\"scenarioDataTable.length === 0 || isUploadBusy\"\n            @click=\"deleteAll\"\n          >\n            <v-icon left>delete</v-icon>{{ $t(\"appBar.edit.clearBtn\") }}\n          </v-btn>\n        </v-hover>\n      </v-card-actions>\n    </v-card>\n\n    <!-- Scenario dialog -->\n    <scenario-dialog\n      :visible=\"showScenarioDialog\"\n      :scenarioId=\"activeScenarioId\"\n      @close=\"\n        showScenarioDialog = false;\n        activeScenarioId = null;\n      \"\n    ></scenario-dialog>\n    <!-- Confirm Delete all  -->\n    <confirm ref=\"confirm\"></confirm>\n    <!-- Popup overlay  -->\n    <overlay-popup\n      style=\"cursor: default;\"\n      :title=\"$t(`map.popup.${popup.title}`)\"\n      v-show=\"popup.isVisible\"\n      ref=\"popup\"\n    >\n      <v-btn icon>\n        <v-icon>close</v-icon>\n      </v-btn>\n      <template v-slot:close>\n        <v-btn @click=\"closePopup()\" icon>\n          <v-icon>close</v-icon>\n        </v-btn>\n      </template>\n      <template v-slot:body>\n        <div v-if=\"popup.selectedInteraction === 'delete'\">\n          <b>{{ $t(\"appBar.edit.popup.deleteFeatureMsg\") }}</b>\n        </div>\n        <div\n          v-else-if=\"\n            ['add', 'modifyAttributes'].includes(popup.selectedInteraction)\n          \"\n        >\n          <v-form ref=\"edit-form\" v-model=\"formValid\">\n            <v-jsonschema-form\n              style=\"width:260px;\"\n              v-if=\"schema[layerName] && popup && popup.isVisible\"\n              :schema=\"schema[layerName]\"\n              :model=\"dataObject\"\n              :key=\"jsonFormKey\"\n              :options=\"options\"\n            />\n          </v-form>\n        </div>\n      </template>\n      <template v-slot:actions>\n        <template v-if=\"popup.selectedInteraction === 'delete'\">\n          <v-btn color=\"primary darken-1\" @click=\"ok('delete')\" text>{{\n            $t(\"buttonLabels.yes\")\n          }}</v-btn>\n          <v-btn color=\"grey\" text @click=\"closePopup()\">{{\n            $t(\"buttonLabels.cancel\")\n          }}</v-btn>\n        </template>\n        <template\n          v-else-if=\"\n            ['add', 'modifyAttributes'].includes(popup.selectedInteraction)\n          \"\n        >\n          <v-btn\n            color=\"primary darken-1\"\n            :disabled=\"formValid === false\"\n            @click=\"ok(popup.selectedInteraction)\"\n            text\n            >{{ $t(\"buttonLabels.save\") }}</v-btn\n          >\n          <v-btn color=\"grey\" text @click=\"closePopup()\">{{\n            $t(\"buttonLabels.cancel\")\n          }}</v-btn>\n        </template>\n      </template>\n    </overlay-popup>\n  </v-flex>\n</template>\n\n<script>\nimport { EventBus } from \"../../../EventBus\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../mixins/InteractionsToggle\";\nimport { Isochrones } from \"../../../mixins/Isochrones\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { mapFeatureTypeProps } from \"../../../utils/Layer\";\nimport OlSelectController from \"../../../controllers/OlSelectController\";\nimport OlEditController from \"../../../controllers/OlEditController\";\nimport {\n  bldEntrancePointsStyle,\n  getEditStyle,\n  getFeatureHighlightStyle\n} from \"../../../style/OlStyleDefs\";\nimport OverlayPopup from \"../../viewer/ol/controls/Overlay\";\nimport ScenarioDialog from \"../../core/ScenarioDialog\";\nimport ApiService from \"../../../services/api.service\";\nimport axios from \"axios\";\nimport VJsonschemaForm from \"../../other/dynamicForms/index\";\n\nimport { geojsonToFeature, geometryToWKT } from \"../../../utils/MapUtils\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { debounce } from \"../../../utils/Helpers\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport { GET_SCENARIOS } from \"../../../store/actions.type\";\n\nexport default {\n  components: {\n    \"overlay-popup\": OverlayPopup,\n    \"scenario-dialog\": ScenarioDialog,\n    VJsonschemaForm\n  },\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts, Isochrones],\n  data: () => ({\n    interactionType: \"edit-interaction\",\n    selectedFeatures: [],\n    editableLayers: [],\n    toggleSelection: undefined,\n    toggleEdit: undefined,\n    toggleSnapGuide: 0, // Used for snap and other functionalities (Active by default).\n    toggleFeatureLabels: 0,\n    isUploadBusy: false,\n    isDeleteAllBusy: false,\n    //Popup configuration\n    popup: {\n      title: \"\",\n      isVisible: false,\n      el: null,\n      selectedInteraction: null\n    },\n    //Edit form\n    layerConf: {},\n    schema: {},\n    dataObject: {},\n    formValid: false,\n    //Others\n    mapCursorTypeEnum: {\n      add: \"crosshair\",\n      modify: \"pointer\",\n      delete: \"pointer\",\n      select: \"pointer\",\n      move: \"auto\",\n      modifyAttributes: \"pointer\",\n      addBldEntrance: \"pointer\",\n      drawHole: \"crosshair\"\n    },\n    //Data table\n    isTableLoading: false,\n    //Scenario Dialog\n    showScenarioDialog: false,\n    activeScenarioId: null,\n\n    editElVisible: true,\n    dataManageElVisible: true,\n    selectEditVisible: true,\n    selectFeaturesVisible: true,\n    dataTableElVisible: true,\n    scenarioSpeedDialFab: false,\n    // -------------------------\n    // ------------------------\n    olEditCtrl: null,\n    olSelectCtrl: null,\n    highlightLayer: null,\n    tempBldEntranceFeature: null,\n    featuresToCommit: [],\n    // Cache for poi modified feature\n    poiModifiedFeatures: [],\n    jsonFormKey: 0\n  }),\n  watch: {\n    activeScenario() {\n      // Fetch all features from the scenario\n      if (this.selectedLayer) {\n        this.fetchScenarioLayerFeatures(this.selectedLayer[\"name\"]);\n      }\n\n      if (!this.activeScenario) {\n        this.clearAll();\n        this.cleanPoiTreeNode();\n        this.poisAoisLayer.setVisible(true);\n        this.selectedLayer = null;\n        this.calculationMode.active = \"default\";\n      }\n      if (this.activeScenario) {\n        this.calculationMode.active = \"scenario\";\n      }\n      this.fetchScenarioLayerSchemas();\n    },\n    selectedLayer(value, oldValue) {\n      if (this.olEditCtrl && value) {\n        this.appConfig.app_ui.base_color.primary = this.scenarioLayerEditModeColor;\n        this.olEditCtrl.selectedLayer = value;\n        this.originIdName = this.original_id;\n        this.stop();\n        this.clearAll();\n        if (value && value.name === \"poi\") {\n          this.poisAoisLayer.setVisible(false);\n        } else {\n          this.cleanPoiTreeNode();\n          this.poisAoisLayer.setVisible(true);\n        }\n        // Fetch features for the selected layer\n        this.fetchScenarioLayerFeatures(this.selectedLayer[\"name\"]);\n      }\n\n      if (!value && this.primaryColorBackup) {\n        if (oldValue.name === \"poi\") {\n          this.cleanPoiTreeNode();\n          this.poisAoisLayer.setVisible(true);\n          this.clearAll();\n        }\n        // Revert color theme\n        this.appConfig.app_ui.base_color.primary = this.primaryColorBackup;\n      }\n    },\n    toggleSelection: {\n      handler(state, oldState) {\n        if (state !== undefined) {\n          this.olEditCtrl.removeInteraction();\n          this.toggleEdit = undefined;\n          if (oldState !== undefined) {\n            this.olSelectCtrl.removeInteraction();\n            EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n            if (this.map.getTarget().style) {\n              this.map.getTarget().style.cursor = \"\";\n            }\n          }\n          this.toggleSelectInteraction(state);\n        }\n      }\n    },\n    toggleEdit: {\n      handler(state, oldState) {\n        this.olSelectCtrl.removeInteraction();\n        this.toggleSelection = undefined;\n        if (oldState !== undefined) {\n          this.olEditCtrl.removeInteraction();\n          EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n          if (this.map.getTarget().style) {\n            this.map.getTarget().style.cursor = \"\";\n          }\n        }\n        if (state !== undefined) {\n          this.toggleEditInteraction(state);\n        }\n      }\n    },\n    toggleSnapGuide(value) {\n      this.toggleSnapGuideInteraction(value);\n    },\n    toggleFeatureLabels(value) {\n      this.toggleFeatureLabelsInteraction(value);\n    },\n    dataObject: {\n      immediate: true,\n      async handler() {\n        await this.$nextTick();\n        if (this.$refs[\"edit-form\"]) {\n          this.$refs[\"edit-form\"].validate();\n        }\n      },\n      deep: true\n    },\n    selectedPoisOnlyKeys() {\n      this.editLayer.getSource().changed();\n    },\n    \"calculationMode.active\": function() {\n      this.editLayer.getSource().changed();\n    },\n    poisAois() {\n      // Add remove features.\n      if (this.selectedLayer && this.selectedLayer[\"name\"] === \"poi\") {\n        this.syncPoiFeatures();\n      }\n    }\n  },\n  mounted() {\n    this.popup.el = this.$refs.popup;\n  },\n  methods: {\n    syncPoiFeatures() {\n      this.poisAoisLayer\n        .getSource()\n        .getFeatures()\n        .forEach(feature => {\n          if (\n            ![\"MultiPolygon\", \"Polygon\"].includes(\n              feature.getGeometry().getType()\n            )\n          ) {\n            const category = feature.get(\"category\");\n            const featureInEdit = this.editLayer\n              .getSource()\n              .getFeatureById(feature.get(\"id\"));\n            const isFeatureActive = this.poisAois[category];\n            if (featureInEdit && !isFeatureActive) {\n              this.editLayer.getSource().removeFeature(featureInEdit);\n            } else if (!featureInEdit && isFeatureActive) {\n              let isFeatureModified = false;\n              this.poiModifiedFeatures.forEach(modifiedFeature => {\n                if (modifiedFeature.get(\"uid\") === feature.get(\"uid\")) {\n                  isFeatureModified = true;\n                }\n              });\n              if (!isFeatureModified) {\n                const clonedFeature = feature.clone();\n                clonedFeature.setId(feature.get(\"id\"));\n                clonedFeature.set(\"layerName\", \"poi\");\n                this.editLayer.getSource().addFeature(clonedFeature);\n              }\n            }\n          }\n        });\n    },\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      this.olSelectCtrl = new OlSelectController(this.map);\n      this.olSelectCtrl.createSelectionLayer();\n      // Initialize ol edit controller.\n      this.olEditCtrl = new OlEditController(this.map);\n      //Initialize ol select controller.\n      this.createLayers();\n      this.olEditCtrl.highlightSource = this.highlightLayer.getSource();\n      this.olEditCtrl.popup = this.popup;\n      //Initialize component layers\n      this.setUpCtxMenu();\n      this.toggleFeatureLabelsInteraction(this.toggleFeatureLabels);\n    },\n\n    /**\n     * Creates layers\n     */\n    createLayers() {\n      // Edit layer\n      const editLayer = new VectorImageLayer({\n        name: \"Edit Layer\",\n        displayInLayerList: false,\n        source: new VectorSource({ wrapX: false }),\n        zIndex: 10,\n        style: getEditStyle(),\n        queryable: true\n      });\n      editLayer.getSource().on(\"changefeature\", this.onFeatureChange);\n      editLayer.getSource().on(\"change\", this.onEditSourceChange);\n      this.map.addLayer(editLayer);\n      this.editLayer = editLayer;\n      this.olEditCtrl.layer = editLayer;\n      this.olEditCtrl.source = editLayer.getSource();\n      // Highlight Layer\n      const highlightLayer = new VectorLayer({\n        displayInLayerList: false,\n        source: new VectorSource({ wrapX: false }),\n        zIndex: 10,\n        style: getFeatureHighlightStyle()\n      });\n      this.map.addLayer(highlightLayer);\n      this.highlightLayer = highlightLayer;\n      // Building entrance layer\n      const bldEntranceLayer = new VectorLayer({\n        name: \"bld_entrance_layer\",\n        displayInLayerList: false,\n        source: new VectorSource({ wrapX: false }),\n        zIndex: 100,\n        queryable: false,\n        style: bldEntrancePointsStyle()\n      });\n      this.olEditCtrl.bldEntranceLayer = bldEntranceLayer;\n      this.bldEntranceLayer = bldEntranceLayer;\n      bldEntranceLayer\n        .getSource()\n        .on(\"changefeature\", this.onBldEntranceFeatureChange);\n      this.map.addLayer(bldEntranceLayer);\n    },\n    /**\n     * Get Layer attribute fields\n     */\n    fetchScenarioLayerSchemas() {\n      this.scenarioLayersConfig.forEach(config => {\n        const layerName = config.client_config.name;\n        const propertiesConfig = config.properties;\n        const props = [];\n        const layerConfig = {\n          listValues: {},\n          hiddenProps: [\n            \"id\",\n            \"way_id\",\n            \"building_id\",\n            \"uid\",\n            \"building_modified_id\",\n            \"geom\",\n            \"class_id\"\n          ],\n          enableFileUpload: config.client_config.enableFileUpload || false\n        };\n\n        Object.keys(propertiesConfig).forEach(key => {\n          const columnConfig = {};\n          columnConfig.column_name = key;\n          if (key === \"geom\") {\n            columnConfig.data_type = \"USER-DEFINED\";\n          } else {\n            columnConfig.data_type = propertiesConfig[key].type;\n          }\n          if (config.required && config.required.includes(key)) {\n            columnConfig.is_nullable = \"NO\";\n          } else {\n            columnConfig.is_nullable = \"YES\";\n          }\n          props.push(columnConfig);\n          // Check if it has enum values\n          if (propertiesConfig[key].enum) {\n            layerConfig.listValues[key] = {\n              values: propertiesConfig[key].enum\n            };\n          }\n          // For pois add all list from poiIcon\n          if (key === \"category\" && [\"poi\"].includes(layerName)) {\n            layerConfig.listValues[key] = {\n              values: this.poiList\n            };\n          }\n        });\n\n        const jsonSchema = mapFeatureTypeProps(props, layerName, layerConfig);\n        this.schema[layerName] = jsonSchema;\n      });\n      if (this.layerName) {\n        this.updateReqFields(this.reqFields);\n        this.$forceUpdate();\n      }\n    },\n    /**\n     * Fetch scenario features for a layer\n     */\n    fetchScenarioLayerFeatures(layer) {\n      const requests = [];\n      this.clearAll();\n      if (!this.activeScenario) return;\n\n      const modifiedFeaturesPromise = ApiService.get_(\n        `/scenarios/${this.activeScenario}/${layer}_modified/features?return_type=geojson`\n      );\n      requests.push(modifiedFeaturesPromise);\n      if (layer === \"building\") {\n        const populationModifiedFeaturePromise = ApiService.get_(\n          `/scenarios/${this.activeScenario}/population_modified/features?return_type=geojson`\n        );\n        requests.push(populationModifiedFeaturePromise);\n      }\n      this.isMapBusy = true;\n\n      axios\n        .all(requests)\n        .then(\n          axios.spread((modifiedLayer, population) => {\n            [modifiedLayer, population].forEach((layerData, index) => {\n              if (layerData) {\n                const features = geojsonToFeature(layerData.data, {\n                  dataProjection: \"EPSG:4326\",\n                  featureProjection: \"EPSG:3857\"\n                });\n\n                if (index === 1 && layer === \"building\") {\n                  layer = \"population\";\n                  this.bldEntranceLayer.getSource().clear();\n                  this.bldEntranceLayer.getSource().addFeatures(features);\n                  return;\n                }\n                features.forEach(feature => {\n                  feature.setId(`${layer}_${feature.getId()}`);\n                  feature.set(\"layerName\", layer);\n                });\n                this.editLayer.getSource().addFeatures(features);\n                if (layer === \"poi\") {\n                  this.poiModifiedFeatures = features;\n                  this.turnOnAndLockPoiTreeNode(features, \"add\");\n                }\n              }\n            });\n            if (layer === \"poi\") {\n              this.syncPoiFeatures();\n            }\n            this.onEditSourceChange();\n          })\n        )\n        .catch(error => {\n          throw new Error(error);\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n        });\n    },\n    /**\n     * When poi layer is selected check if category is already selected from user and lock it, if not select it first.\n     */\n    turnOnAndLockPoiTreeNode(features, type) {\n      const uniqueCategories = [\n        ...new Set(features.map(f => f.get(\"category\")))\n      ];\n      uniqueCategories.forEach(category => {\n        if (type == \"add\") {\n          if (!this.selectedPoisOnlyKeys.includes(category)) {\n            const poiNodeObj = this.poisTreeOnlyChildren[category];\n            if (poiNodeObj) {\n              poiNodeObj.isLocked = true;\n              this.selectedPoisAois.push(this.poisTreeOnlyChildren[category]);\n            }\n          } else {\n            this.selectedPoisAois.forEach(selectedPoi => {\n              if (selectedPoi.value === category) {\n                selectedPoi.isLocked = true;\n              }\n            });\n          }\n        }\n        if (type === \"unlock\") {\n          this.selectedPoisAois.forEach(selectedPoi => {\n            if (selectedPoi.values === category) {\n              selectedPoi.isLocked = false;\n            }\n          });\n        }\n      });\n    },\n    cleanPoiTreeNode() {\n      this.selectedPoisAois.forEach(selectedPoi => {\n        if (selectedPoi.isLocked) {\n          selectedPoi.isLocked = false;\n        }\n      });\n    },\n    /**\n     * Toggle the select interaction\n     */\n    toggleSelectInteraction(state) {\n      if (state != undefined) {\n        EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = this.mapCursorTypeEnum[\"select\"];\n        }\n      } else {\n        EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = \"\";\n        }\n      }\n      let selectionType;\n      switch (state) {\n        case 0:\n          selectionType = \"multiple\";\n          break;\n        default:\n          break;\n      }\n      if (selectionType !== undefined) {\n        this.olSelectCtrl.addInteraction(\n          selectionType,\n          this.selectedLayer,\n          this.onSelectionStart,\n          this.onSelectionEnd\n        );\n        if (this.addKeyupListener) {\n          this.addKeyupListener();\n        }\n      } else {\n        this.olSelectCtrl.removeInteraction();\n      }\n    },\n    /**\n     * Callback function executed when selection interaction starts.\n     */\n    onSelectionStart() {\n      this.clear();\n    },\n    /**\n     * Callback function executed when selection interaction ends.\n     *\n     * @param  {ol/feature} features The features returned from selection interaction\n     */\n    onSelectionEnd(response) {\n      this.toggleSelection = undefined;\n      this.olSelectCtrl.removeInteraction();\n      if (response) {\n        const features = geojsonToFeature(response.data, {\n          dataProjection: \"EPSG:4326\",\n          featureProjection: \"EPSG:3857\"\n        });\n        features.forEach(feature => {\n          feature.set(\"layerName\", this.selectedLayer[\"name\"]);\n        });\n        this.editLayer.getSource().addFeatures(features);\n      }\n    },\n\n    /**\n     * Toggle the edit interaction\n     */\n    toggleEditInteraction(state) {\n      let editType, startCb, endCb;\n      switch (state) {\n        case 1:\n          editType = \"add\";\n          startCb = this.onDrawStart;\n          endCb = this.onDrawEnd;\n          break;\n        case 2:\n          editType = \"modify\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n        case 3:\n          editType = \"modifyAttributes\";\n          startCb = this.openModifyAttributePopup;\n          break;\n        case 4:\n          editType = \"delete\";\n          endCb = this.openDeletePopup;\n          break;\n        case 5:\n          editType = \"move\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n        case 6:\n          editType = \"drawHole\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n        case 7:\n          editType = \"addBldEntrance\";\n          endCb = this.onBldEntranceInteractionEnd;\n          break;\n        default:\n          break;\n      }\n      if (editType !== undefined) {\n        this.olEditCtrl.addInteraction(editType, startCb, endCb);\n        EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n        this.$nextTick(() => {\n          if (this.map.getTarget().style) {\n            this.map.getTarget().style.cursor = this.mapCursorTypeEnum[\n              editType\n            ];\n          }\n        });\n        if (this.addKeyupListener) {\n          this.addKeyupListener();\n        }\n        this.olEditCtrl.editType = editType;\n      } else {\n        this.olEditCtrl.editType = undefined;\n        this.olEditCtrl.removeInteraction();\n        EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = \"\";\n        }\n      }\n    },\n\n    /**\n     * Adds or remove snap interaction\n     */\n    toggleSnapGuideInteraction(state) {\n      if (state === 0) {\n        this.olEditCtrl.addSnapGuideInteraction();\n        this.olEditCtrl.isSnapGuideActive = 1;\n      } else {\n        this.olEditCtrl.removeSnapGuideInteraction();\n        this.olEditCtrl.isSnapGuideActive = 0;\n      }\n    },\n\n    /**\n     * Toggle Feature labels\n     */\n\n    toggleFeatureLabelsInteraction(state) {\n      this.editLayer.set(\"showLabels\", state);\n      this.editLayer.getSource().changed();\n    },\n\n    /**\n     * Open modify attribute popup\n     */\n    openModifyAttributePopup(evt) {\n      const feature = this.editLayer\n        .getSource()\n        .getClosestFeatureToCoordinate(evt.coordinate);\n      this.featuresToCommit = [];\n      this.highlightLayer.getSource().clear();\n      if (feature) {\n        const props = feature.getProperties();\n        this.$nextTick(() => {\n          for (const attr in this.dataObject) {\n            this.dataObject[attr] = attr in props ? props[attr] : null;\n          }\n          this.jsonFormKey += 1;\n        });\n        const geometry = feature.getGeometry();\n        let popupCoordinate = geometry.getCoordinates();\n        while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n          popupCoordinate = popupCoordinate[0];\n        }\n        this.map.getView().animate({\n          center: popupCoordinate,\n          duration: 400\n        });\n        this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n        this.featuresToCommit.push(feature);\n        this.highlightLayer.getSource().addFeature(feature.clone());\n        this.popup.title = \"modifyAttributes\";\n        this.popup.selectedInteraction = \"modifyAttributes\";\n        this.popup.isVisible = true;\n      }\n    },\n    /**\n     * Opens a popup for the delete confirmation\n     */\n    openDeletePopup(evt) {\n      let feature;\n      if (evt.coordinate) {\n        const coordinate = evt.coordinate;\n        feature = this.editLayer\n          .getSource()\n          .getClosestFeatureToCoordinate(coordinate);\n      } else {\n        //Triggered when user click scenario data table\n        //Create overlayer\n        this.olEditCtrl.createPopupOverlay();\n        feature = evt;\n      }\n\n      this.highlightLayer.getSource().addFeature(feature.clone());\n      this.featuresToCommit.push(feature);\n      if (feature) {\n        const geometry = feature.getGeometry();\n        let popupCoordinate = geometry.getCoordinates();\n        while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n          popupCoordinate = popupCoordinate[0];\n        }\n        this.map.getView().animate({\n          center: popupCoordinate,\n          duration: 400\n        });\n        this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n        this.popup.title = \"confirm\";\n        this.popup.selectedInteraction = \"delete\";\n        this.popup.isVisible = true;\n      }\n    },\n\n    /**\n     * Modify interaction start event handler\n     */\n    onModifyStart() {\n      this.featuresToCommit = [];\n      this.olEditCtrl.isInteractionOnProgress = true;\n    },\n    /**\n     * Modify interaction end event handler\n     */\n    onModifyEnd() {\n      this.olEditCtrl.isInteractionOnProgress = false;\n      this.clearDataObject();\n      const featuresToAdd = [];\n      const featuresToUpdate = [];\n      this.featuresToCommit.forEach(feature => {\n        const featureOut = this.setFeatureFields(feature);\n        const props = feature.getProperties();\n        if (props.editType !== \"d\") {\n          if (props.hasOwnProperty(\"edit_type\")) {\n            featureOut.setId(feature.getId());\n            featuresToUpdate.push(featureOut);\n          } else {\n            Object.keys(featureOut.getProperties()).forEach(prop => {\n              if (![\"edit_type\", this.original_id, \"geometry\"].includes(prop)) {\n                featureOut.set(prop, feature.get(prop));\n              }\n            });\n            featureOut.set(\"edit_type\", \"m\");\n            featureOut.set(\n              this.original_id,\n              feature.get(\"uid\") || feature.get(\"id\")\n            );\n            featuresToAdd.push(featureOut);\n          }\n        }\n      });\n      this.createScenarioFeatures(featuresToAdd);\n      this.updateScenarioFeatures(featuresToUpdate);\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onDrawStart() {\n      this.featuresToCommit = [];\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onDrawEnd(evt) {\n      const feature = evt.feature;\n      this.editLayer.getSource().addFeature(feature);\n      this.clearDataObject();\n      //Disable interaction until user fills the attributes for the feature and closes the popup\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(false);\n      }\n      this.featuresToCommit.push(feature);\n      this.highlightLayer.getSource().addFeature(feature.clone());\n      let popupCoordinate = feature.getGeometry().getCoordinates();\n      while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n        popupCoordinate = popupCoordinate[0];\n      }\n      this.map.getView().animate({\n        center: popupCoordinate,\n        duration: 400\n      });\n      this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n      this.popup.title = \"attributes\";\n      this.popup.selectedInteraction = \"add\";\n      this.popup.isVisible = true;\n    },\n    setFeatureFields(feature) {\n      const props = feature.getProperties();\n      const featureOut = feature.clone();\n      const mandatoryProps = [\n        ...Object.keys(this.dataObject),\n        \"edit_type\",\n        this.original_id,\n        \"geometry\",\n        \"geom\"\n      ];\n      Object.keys(props).forEach(prop => {\n        if (!mandatoryProps.includes(prop)) featureOut.unset(prop);\n      });\n      return featureOut;\n    },\n\n    /**\n     * Building Entrance interaction end.\n     */\n    onBldEntranceInteractionEnd(evt) {\n      let coordinate;\n      if (evt.type === \"modifyend\") {\n        if (!this.tempBldEntranceFeature) return;\n        coordinate = this.tempBldEntranceFeature.getGeometry().getCoordinates();\n      } else {\n        coordinate = evt.feature.getGeometry().getCoordinates();\n      }\n\n      let buildingFeatureAtCoord;\n      if (evt.type === \"modifyend\") {\n        buildingFeatureAtCoord = this.olEditCtrl.source.getClosestFeatureToCoordinate(\n          coordinate,\n          candidate => {\n            if (\n              ((candidate.get(\"id\") || candidate.getId()) &&\n                this.tempBldEntranceFeature &&\n                this.tempBldEntranceFeature.get(\"building_modified_id\") ===\n                  candidate.get(\"id\")) ||\n              this.tempBldEntranceFeature.get(\"building_modified_id\") ===\n                candidate.get(\"id\") ||\n              this.tempBldEntranceFeature.get(\"building_modified_id\") ===\n                candidate.getId()\n            ) {\n              return true;\n            } else {\n              return false;\n            }\n          }\n        );\n      } else {\n        buildingFeatureAtCoord = this.olEditCtrl.source.getClosestFeatureToCoordinate(\n          coordinate\n        );\n      }\n\n      if (!buildingFeatureAtCoord && !buildingFeatureAtCoord.getId()) return;\n\n      // This line restricts drawing entrance feature only in new drawn buildings (original_id is used as an identifier)\n      if (\n        !buildingFeatureAtCoord.getProperties().hasOwnProperty(this.original_id)\n      ) {\n        return;\n      }\n\n      let bldEntranceCoordinate;\n      if (\n        buildingFeatureAtCoord.getGeometry().intersectsCoordinate(coordinate)\n      ) {\n        bldEntranceCoordinate = coordinate;\n      } else {\n        const closestPoint = buildingFeatureAtCoord\n          .getGeometry()\n          .getClosestPoint(coordinate);\n        bldEntranceCoordinate = closestPoint;\n        if (this.tempBldEntranceFeature && evt.type === \"modifyend\") {\n          this.tempBldEntranceFeature.setGeometry(\n            new Point(bldEntranceCoordinate)\n          );\n        }\n      }\n      let bldEntranceFeature;\n      if (evt.type === \"modifyend\") {\n        // Update the existing building entrance feature\n        bldEntranceFeature = this.tempBldEntranceFeature;\n\n        // Can't update the feature if id isn't available\n        if (!bldEntranceFeature.getId()) return;\n\n        // Clone feature and transform for transaction.\n        const {\n          // eslint-disable-next-line no-unused-vars\n          geometry,\n          // eslint-disable-next-line no-unused-vars\n          geom,\n          ...propsWithNoGeometry\n        } = bldEntranceFeature.getProperties();\n        const clonedFeature = new Feature({\n          geom: bldEntranceFeature.getGeometry().clone(),\n          ...propsWithNoGeometry\n        });\n        clonedFeature.setGeometryName(\"geom\");\n        ApiService.put(\n          `/scenarios/${this.activeScenario}/population_modified/features`,\n          {\n            features: [\n              {\n                id: bldEntranceFeature.getId(),\n                geom: geometryToWKT(\n                  clonedFeature\n                    .getGeometry()\n                    .clone()\n                    .transform(\"EPSG:3857\", \"EPSG:4326\")\n                )\n              }\n            ]\n          }\n        ).then(response => {\n          if (response.data) {\n            const feature = geojsonToFeature(response.data);\n            if (feature[0] && feature[0].get(\"id\")) {\n              bldEntranceFeature.setId(feature[0].get(\"id\"));\n            }\n          }\n        });\n      } else {\n        // Add new feature\n        bldEntranceFeature = new Feature({\n          geometry: new Point(bldEntranceCoordinate),\n          building_modified_id:\n            buildingFeatureAtCoord.get(\"id\") ||\n            buildingFeatureAtCoord.get(\"id\") ||\n            buildingFeatureAtCoord.getId()\n        });\n        this.olEditCtrl.bldEntranceLayer\n          .getSource()\n          .addFeature(bldEntranceFeature);\n\n        // Clone feature and transform for transaction.\n        const {\n          // eslint-disable-next-line no-unused-vars\n          geometry,\n          // eslint-disable-next-line no-unused-vars\n          geom,\n          ...propsWithNoGeometry\n        } = bldEntranceFeature.getProperties();\n        const clonedFeature = new Feature({\n          geom: new Point(bldEntranceCoordinate),\n          ...propsWithNoGeometry\n        });\n        clonedFeature.setGeometryName(\"geom\");\n        ApiService.post(\n          `/scenarios/${this.activeScenario}/population_modified/features`,\n          {\n            features: [\n              {\n                ...clonedFeature.getProperties(),\n                geom: geometryToWKT(\n                  clonedFeature\n                    .getGeometry()\n                    .clone()\n                    .transform(\"EPSG:3857\", \"EPSG:4326\")\n                )\n              }\n            ]\n          }\n        ).then(response => {\n          if (response.data) {\n            const feature = geojsonToFeature(response.data);\n            this.editLayer.getSource().changed();\n            if (feature[0] && feature[0].get(\"id\")) {\n              bldEntranceFeature.setId(feature[0].get(\"id\"));\n            }\n          }\n        });\n      }\n\n      setTimeout(() => {\n        this.tempBldEntranceFeature = null;\n      }, 100);\n    },\n    /**\n     * Feature change event handler for building entrance edit layer\n     */\n    onBldEntranceFeatureChange(evt) {\n      if (evt.feature) {\n        // Used on modifyEnd event.\n        this.tempBldEntranceFeature = evt.feature;\n      }\n    },\n    /**\n     * Configure right-click for Edit.\n     */\n    setUpCtxMenu() {\n      if (this.contextmenu) {\n        this.olEditCtrl.contextmenu = this.contextmenu;\n        this.contextmenu.on(\"beforeopen\", evt => {\n          // Close helptoltip\n          if (this.olEditCtrl.helpTooltip) {\n            this.olEditCtrl.helpTooltip.setPosition(undefined);\n          }\n          const features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"bld_entrance_layer\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          if (\n            features.length > 0 &&\n            this.selectedLayer[\"name\"] === \"building\"\n          ) {\n            this.contextmenu.extend([\n              \"-\", // this is a separator\n              {\n                text: `<i class=\"fa fa-trash fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.deleteBldEntrancePoint\"\n                )}`,\n                label: \"deleteBldEntrancePoint\",\n                callback: () => {\n                  ApiService.delete(\n                    `/scenarios/${\n                      this.activeScenario\n                    }/population_modified/features?id=${features[0].getId()}`\n                  ).then(response => {\n                    if (response.data) {\n                      this.olEditCtrl.bldEntranceLayer\n                        .getSource()\n                        .removeFeature(features[0]);\n                      this.editLayer.getSource().changed();\n                    }\n                  });\n                }\n              }\n            ]);\n          }\n        });\n      }\n    },\n    /**\n     * Feature change event handler for edit layer\n     */\n    onFeatureChange(evt) {\n      if (\n        [\"modify\", \"move\", \"modifyAttributes\", \"drawHole\"].includes(\n          this.olEditCtrl.editType\n        )\n      ) {\n        const index = this.featuresToCommit.findIndex(\n          i => i.ol_uid === evt.feature.ol_uid\n        );\n        if (index === -1) {\n          this.featuresToCommit.push(evt.feature);\n        } else {\n          this.featuresToCommit[index] = evt.feature;\n        }\n      }\n    },\n    /**\n     * Source change base event. Used to update scenario data table\n     * This event is called very often, so for performance improvement a\n     * debounce method  is used in updateDatatable\n     */\n    onEditSourceChange() {\n      this.isTableLoading = true;\n      this.updateDataTable();\n    },\n\n    /**\n     * Method called when edit layer source is changed.\n     * A debounce is addes to improve performance\n     * It updates the scenario data table.\n     */\n    updateDataTable: debounce(function() {\n      if (!this.activeScenario) return;\n      const editLayerFeatures = this.editLayer.getSource().getFeatures();\n      const scenarioDataTable = [];\n      editLayerFeatures.forEach(f => {\n        const fid = f.getId();\n        const layerName = f.get(\"layerName\");\n        let isDeleted = false;\n        let status = \"uploaded\";\n        let type = \"\";\n        let originId;\n        if (f.get(\"edit_type\")) {\n          const editType = f.get(\"edit_type\");\n          if (editType === \"n\") {\n            type = \"new\";\n          } else if (editType === \"d\") {\n            type = \"deleted\";\n            isDeleted = true;\n            originId = f.get(this.original_id);\n          } else if (editType === \"m\") {\n            type = \"modified\";\n            originId = f.get(this.original_id);\n          }\n          const obj = {\n            fid,\n            layerName,\n            isDeleted,\n            originId,\n            status,\n            type\n          };\n          scenarioDataTable.push(obj);\n        }\n      });\n      this.scenarioDataTable = scenarioDataTable;\n      this.isTableLoading = false;\n    }, 900),\n\n    scenarioActionBtnHandler(item, type) {\n      const fid = item.fid;\n      if (!fid) return;\n      let feature;\n      feature = this.editLayer.getSource().getFeatureById(fid);\n      if (!feature) return;\n      if (type === \"zoom\") {\n        this.map.getView().fit(feature.getGeometry().getExtent(), {\n          padding: [10, 10, 10, 10]\n        });\n        this.highlightLayer.getSource().addFeature(feature);\n        setTimeout(() => {\n          this.highlightLayer.getSource().removeFeature(feature);\n        }, 300);\n      } else if (type === \"delete\") {\n        this.openDeletePopup(feature);\n      } else if (type === \"restore\") {\n        this.map.getView().fit(feature.getGeometry().getExtent(), {\n          padding: [10, 10, 10, 10]\n        });\n        this.deleteScenarioFeatures([feature]);\n      }\n    },\n    isRestoreBtnVisible(item) {\n      if (item.type !== \"deleted\" || !this.selectedLayer) {\n        return false;\n      }\n      return item.isDeleted;\n    },\n    isDeleteBtnVisible(item) {\n      if ((!item.originalId && item.isDeleted) || !this.selectedLayer) {\n        return false;\n      }\n      return !item.isDeleted;\n    },\n\n    /**\n     * Clear data object that user has entered,\n     * so the next time the popup is opened the form is clean.\n     */\n    clearDataObject() {\n      if (!this.layerName) return;\n      const properties = this.schema[this.layerName].properties;\n      const dataObject = {};\n      Object.keys(properties).forEach(key => {\n        if (properties[key] && properties[key][\"x-display\"] !== \"hidden\") {\n          dataObject[key] = null;\n          this.dataObject = dataObject;\n        }\n      });\n    },\n\n    /**\n     * Closes the popup if user choose cancel.\n     */\n    closePopup() {\n      if (this.olEditCtrl.popupOverlay) {\n        this.olEditCtrl.popupOverlay.setPosition(undefined);\n        this.popup.isVisible = false;\n      }\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(true);\n      }\n      this.highlightLayer.getSource().clear();\n      if (this.interactionType === \"draw\") {\n        this.featuresToCommit.forEach(feature => {\n          if (this.editLayer.getSource().hasFeature(feature)) {\n            this.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      }\n      // Removes features that are not modified\n\n      this.editLayer\n        .getSource()\n        .getFeatures()\n        .forEach(feature => {\n          if (\n            !feature.get(\"edit_type\") &&\n            feature.get(\"layerName\") !== \"poi\" &&\n            !feature.get(\"building_modified_id\") // building_modified_id is edge case to not clean population_modified features as they don't have an edit_type property\n          ) {\n            this.editLayer.getSource().removeFeature(feature);\n          }\n        });\n\n      this.featuresToCommit = [];\n    },\n    /**\n     * Clears all the selection and edit interactions.\n     */\n    clear() {\n      // Removes features that are not modified\n      this.editLayer\n        .getSource()\n        .getFeatures()\n        .forEach(feature => {\n          if (\n            !feature.get(\"edit_type\") &&\n            feature.get(\"layerName\") !== \"poi\" &&\n            !feature.get(\"building_modified_id\") // building_modified_id is edge case to not clean population_modified features as they don't have an edit_type property\n          ) {\n            this.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.clearDataObject();\n      if (this.contextmenu) {\n        this.contextmenu.close();\n      }\n      this.featuresToCommit = [];\n    },\n\n    /**\n     * Clears all the features from edit layer (triggered when user changes scenario)\n     */\n    clearAll() {\n      this.olEditCtrl.clear();\n      this.olSelectCtrl.clear();\n      this.editLayer.getSource().clear();\n      this.highlightLayer.getSource().clear();\n      this.bldEntranceLayer.getSource().clear();\n      if (this.contextmenu) {\n        this.contextmenu.close();\n      }\n      this.clearDataObject();\n      this.scenarioDataTable = [];\n      this.isInteractionOnProgress = false;\n      this.isTableLoading = false;\n      this.featuresToCommit = [];\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n    },\n    /**\n     * Delete all user scenario features in db.\n     */\n    deleteAll() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"appBar.edit.deleteAllTitle\"),\n          this.$t(\"appBar.edit.deleteAllMessage\"),\n          { color: this.appColor.primary }\n        )\n\n        .then(confirm => {\n          if (confirm) {\n            //1- Call api to delete all features.\n            this.isDeleteAllBusy = true;\n            ApiService.delete(\n              `/scenarios/${this.activeScenario}/${this.selectedLayer[\"name\"]}_modified/features-all`\n            )\n              .then(response => {\n                this.isDeleteAllBusy = false;\n                this.isUploadBtnEnabled = true;\n                if (response.data === \"error\") {\n                  //Show error message can't delete\n                  this.toggleSnackbar({\n                    type: \"error\", //success or error\n                    message: this.$t(\n                      `map.snackbarMessages.cantDeleteAllScenarioFeatures`\n                    ),\n                    state: true,\n                    timeout: 4000\n                  });\n                } else {\n                  //Show success message\n                  this.toggleSnackbar({\n                    type: this.appColor.primary, //success or error\n                    message: this.$t(\n                      `map.snackbarMessages.allScenarioFeaturesDelete`\n                    ),\n                    state: true,\n                    timeout: 4000\n                  });\n                  // Clear openlayers scenario features\n                  this.stop();\n                  if (this.selectedLayer[\"name\"] === \"poi\") {\n                    this.fetchScenarioLayerFeatures(\"poi\");\n                  } else {\n                    this.clearAll();\n                  }\n                }\n              })\n              .catch(() => {\n                this.isDeleteAllBusy = false;\n              });\n          }\n        });\n    },\n    /**\n     * Delete scenario\n     */\n    deleteScenario() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"appBar.edit.deleteAllTitle\"),\n          this.$t(\"appBar.edit.confirmDeleteScenario\"),\n          { color: this.appColor.primary }\n        )\n\n        .then(confirm => {\n          if (confirm) {\n            ApiService.delete(`/scenarios/${this.activeScenario}`).then(\n              response => {\n                if (response.data === \"error\") {\n                  //Show error message can't delete\n                  this.toggleSnackbar({\n                    type: \"error\", //success or error\n                    message: this.$t(\"map.snackbarMessages.cantDeleteScenario\"),\n                    state: true,\n                    timeout: 3000\n                  });\n                } else {\n                  //Show success message\n                  this.toggleSnackbar({\n                    type: this.appColor.primary, //success or error\n                    message: this.$t(\"map.snackbarMessages.scenarioDeleted\"),\n                    state: true,\n                    timeout: 3000\n                  });\n\n                  //- Refetch Scenario\n                  this.$store.dispatch(`scenarios/${GET_SCENARIOS}`);\n                  //- Clear openlayers scenario features\n                  this.clearAll();\n                  this.selectedLayer = null;\n                  this.activeScenario = null;\n                }\n              }\n            );\n          }\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(\"map.snackbarMessages.cantDeleteScenario\"),\n            state: true,\n            timeout: 3000\n          });\n        });\n    },\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop() {\n      this.closePopup();\n      this.olSelectCtrl.removeInteraction();\n      this.olEditCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.toggleSelection = undefined;\n      this.toggleEdit = undefined;\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n      this.clear();\n    },\n    /**\n     * Translate method to avoid inline html logic\n     */\n    translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      const canTranslate = this.$te(`map.${type}.${key}`);\n      if (canTranslate) {\n        return this.$t(`map.${type}.${key}`);\n      } else {\n        return key;\n      }\n    },\n    /**\n     * Method used on popup save (draw)/ok(delete) depending on interaction type\n     */\n    ok(type) {\n      const featureOut = this.featuresToCommit[0].clone();\n      // Reset id of the original feature\n      featureOut.setId(this.featuresToCommit[0].getId());\n      const properties = this.featuresToCommit[0].getProperties();\n      if (type === \"add\") {\n        // New feature\n        featureOut.setProperties(this.dataObject);\n        featureOut.set(\"edit_type\", \"n\");\n        this.createScenarioFeatures([featureOut]);\n      }\n      if (type === \"modifyAttributes\") {\n        // Modified existing feature\n        const featureOut = this.setFeatureFields(this.featuresToCommit[0]);\n        featureOut.setProperties(this.dataObject);\n        const props = this.featuresToCommit[0].getProperties();\n        if (props.editType !== \"d\") {\n          if (props.hasOwnProperty(\"edit_type\")) {\n            featureOut.setId(this.featuresToCommit[0].getId());\n            this.updateScenarioFeatures([featureOut]);\n          } else {\n            featureOut.set(\"edit_type\", \"m\");\n            featureOut.set(\n              this.original_id,\n              this.featuresToCommit[0].get(\"uid\") ||\n                this.featuresToCommit[0].get(\"id\")\n            );\n            this.createScenarioFeatures([featureOut]);\n            this.editLayer.getSource().removeFeature(this.featuresToCommit[0]);\n          }\n        }\n      } else if (type === \"delete\" && !properties.hasOwnProperty(\"edit_type\")) {\n        // Deleted an origin feature (has to be created as deleted feature)\n        const allowedKeys = Object.keys(this.dataObject);\n        Object.keys(this.featuresToCommit[0].getProperties()).forEach(prop => {\n          if (!allowedKeys.includes(prop) && prop !== \"geometry\") {\n            featureOut.unset(prop);\n          }\n        });\n        if (this.featuresToCommit[0].get(\"id\")) {\n          const original_id_ =\n            this.featuresToCommit[0].get(\"uid\") ||\n            this.featuresToCommit[0].get(\"id\");\n          featureOut.set(this.original_id, original_id_);\n        }\n        featureOut.set(\"edit_type\", \"d\");\n        this.createScenarioFeatures([featureOut]);\n        this.editLayer.getSource().removeFeature(this.featuresToCommit[0]);\n      } else if (type === \"delete\") {\n        // Deleted a feature which is already modified. Delete from \"_modified\" layer\n        this.deleteScenarioFeatures([featureOut]);\n      }\n      if (this.olEditCtrl.popupOverlay) {\n        this.olEditCtrl.popupOverlay.setPosition(undefined);\n        this.popup.isVisible = false;\n      }\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(true);\n      }\n      this.highlightLayer.getSource().clear();\n    },\n\n    /**\n     * ====API CALLS====\n     */\n    /**\n     * Create scenario features\n     */\n    createScenarioFeatures(features) {\n      if (features.length === 0) return;\n      let payload = features.map(feature => {\n        const transformed = {\n          ...feature.getProperties(),\n          geom: geometryToWKT(\n            feature\n              .getGeometry()\n              .clone()\n              .transform(\"EPSG:3857\", \"EPSG:4326\")\n          )\n        };\n        delete transformed.geometry;\n        return transformed;\n      });\n      this.isMapBusy = true;\n      ApiService.post(this.scenarioApiBaseUrl, {\n        features: payload\n      })\n        .then(response => {\n          // TODO: Don't remove features from featuresToCommit (Too late here. We should get the features from cloned features)\n          this.featuresToCommit.forEach(feature => {\n            if (this.editLayer.getSource().hasFeature(feature)) {\n              this.editLayer.getSource().removeFeature(feature);\n            }\n          });\n          const featuresWithId = geojsonToFeature(response.data, {\n            dataProjection: \"EPSG:4326\",\n            featureProjection: \"EPSG:3857\"\n          });\n          featuresWithId.forEach(feature => {\n            feature.setId(`${this.selectedLayer[\"name\"]}_${feature.getId()}`);\n            feature.set(\"layerName\", this.selectedLayer[\"name\"]);\n          });\n          if (this.selectedLayer[\"name\"] === \"poi\") {\n            this.turnOnAndLockPoiTreeNode(featuresWithId, \"add\");\n            this.poiModifiedFeatures.push(...featuresWithId);\n          }\n          this.editLayer.getSource().addFeatures(featuresWithId);\n          this.refreshHeatmap();\n          // Activate building entrance interaction if selected layer is building\n          if (\n            this.selectedLayer[\"name\"] === \"building\" &&\n            this.olEditCtrl.editType === \"add\"\n          ) {\n            this.toggleEdit = 7;\n          }\n        })\n        .catch(error => {\n          console.log(error);\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(`appBar.edit.cantCreateScenarioFeature`),\n            state: true,\n            timeout: 3000\n          });\n          this.featuresToCommit.forEach(feature => {\n            if (this.editLayer.getSource().hasFeature(feature)) {\n              this.editLayer.getSource().removeFeature(feature);\n            }\n          });\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n          this.featuresToCommit = [];\n        });\n    },\n    /**\n     * Update scenario features\n     */\n    updateScenarioFeatures(features) {\n      if (features.length === 0) return;\n      let payload = features.map(feature => {\n        const transformed = {\n          id: parseInt(feature.getId().split(\"_\")[1]),\n          ...feature.getProperties(),\n          geom: geometryToWKT(\n            feature\n              .getGeometry()\n              .clone()\n              .transform(\"EPSG:3857\", \"EPSG:4326\")\n          )\n        };\n        delete transformed.edit_type;\n        delete transformed.geometry;\n        delete transformed[this.original_id];\n        return transformed;\n      });\n      this.isMapBusy = true;\n      ApiService.put(this.scenarioApiBaseUrl, {\n        features: payload\n      })\n        .then(response => {\n          features.forEach(feature => {\n            const featureIn = this.editLayer\n              .getSource()\n              .getFeatureById(feature.getId());\n            if (featureIn) {\n              this.editLayer.getSource().removeFeature(featureIn);\n            }\n          });\n          const featuresWithId = geojsonToFeature(response.data, {\n            dataProjection: \"EPSG:4326\",\n            featureProjection: \"EPSG:3857\"\n          });\n          featuresWithId.forEach(feature => {\n            feature.setId(`${this.selectedLayer[\"name\"]}_${feature.getId()}`);\n            feature.set(\"layerName\", this.selectedLayer[\"name\"]);\n          });\n          this.editLayer.getSource().addFeatures(featuresWithId);\n          this.refreshHeatmap();\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(`appBar.edit.canNotUpdateScenarioFeature`),\n            state: true,\n            timeout: 3000\n          });\n          features.forEach(feature => {\n            if (this.editLayer.getSource().hasFeature(feature)) {\n              this.editLayer.getSource().removeFeature(feature);\n            }\n          });\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n          this.featuresToCommit = [];\n        });\n    },\n    /**\n     * Delete scenario features\n     */\n    deleteScenarioFeatures(features) {\n      let queryParam = \"\";\n      if (features.length === 1) {\n        queryParam += `id=${parseInt(features[0].getId().split(\"_\")[1])}`;\n      } else {\n        features.forEach((feature, index) => {\n          const id = parseInt(feature.getId().split(\"_\")[1]);\n          if (id && index !== features - 1) {\n            queryParam += `id=${id}&`;\n          } else if (id) {\n            queryParam += `id=${id}`;\n          }\n        });\n      }\n      this.isMapBusy = true;\n      ApiService.delete(`${this.scenarioApiBaseUrl}?${queryParam}`)\n        .then(() => {\n          // For pois if there is no modified features, we need to unlock the tree node.\n          features.forEach(feature => {\n            if (feature.getId()) {\n              const featureIn = this.editLayer\n                .getSource()\n                .getFeatureById(feature.getId());\n              if (featureIn) {\n                const props = featureIn.getProperties();\n                if ([\"m\", \"d\"].includes(props.edit_type)) {\n                  featureIn.unset(\"edit_type\");\n                  if (this.selectedLayer[\"name\"] === \"poi\") {\n                    // Find origin feature and add it here\n                    const originFeature = this.poisAoisLayer\n                      .getSource()\n                      .getFeatures()\n                      .filter(f => f.get(\"uid\") === featureIn.get(\"uid\"));\n                    if (\n                      Array.isArray(originFeature) &&\n                      originFeature.length > 0\n                    ) {\n                      const clonedFeature = originFeature[0].clone();\n                      clonedFeature.setId(originFeature[0].get(\"id\"));\n                      clonedFeature.set(\"layerName\", \"poi\");\n                      this.editLayer.getSource().addFeature(clonedFeature);\n                    }\n                    // Delete feature from pois modified features array\n                    this.poiModifiedFeatures.forEach(f => {\n                      if (f.get(\"uid\") === featureIn.get(\"uid\")) {\n                        this.poiModifiedFeatures.splice(\n                          this.poiModifiedFeatures.indexOf(f),\n                          1\n                        );\n                      }\n                    });\n                  }\n                }\n                if (\n                  this.selectedLayer[\"name\"] === \"building\" &&\n                  featureIn.get(\"id\")\n                ) {\n                  // Delete all bldEntrance features on the same building\n                  const bldEntranceFeatures = this.bldEntranceLayer\n                    .getSource()\n                    .getFeatures()\n                    .filter(\n                      f => f.get(\"building_modified_id\") === featureIn.get(\"id\")\n                    );\n                  bldEntranceFeatures.forEach(f => {\n                    this.bldEntranceLayer.getSource().removeFeature(f);\n                  });\n                }\n\n                this.editLayer.getSource().removeFeature(featureIn);\n              }\n            }\n          });\n          this.refreshHeatmap();\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(`appBar.edit.canNotDeleteScenarioFeature`),\n            state: true,\n            timeout: 3000\n          });\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n          this.featuresToCommit = [];\n        });\n    },\n    refreshHeatmap() {\n      if (this.selectedLayer[\"name\"]) {\n        EventBus.$emit(\"update-heatmap\", \"poi\");\n      }\n      if (this.selectedLayer[\"building\"]) {\n        // TODO: Update only when building population is added\n        EventBus.$emit(\"update-heatmap\", \"population\");\n      }\n    },\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\",\n      updateReqFields: \"UPDATE_REQ_FIELDS\",\n      setBldEntranceLayer: \"SET_BLD_ENTRANCE_LAYER\",\n      setEditLayer: \"SET_EDIT_LAYER\"\n    })\n  },\n  computed: {\n    headers() {\n      return [\n        {\n          text: this.$t(\"appBar.edit.table.layer\"),\n          value: \"layerName\",\n          sortable: false,\n          align: \"center\",\n          width: \"20%\"\n        },\n        {\n          text: this.$t(\"appBar.edit.table.status\"),\n          value: \"status\",\n          sortable: false,\n          align: \"center\",\n          width: \"25%\"\n        },\n        {\n          text: this.$t(\"appBar.edit.table.type\"),\n          value: \"type\",\n          sortable: false,\n          align: \"center\",\n          width: \"25%\"\n        },\n        {\n          text: this.$t(\"appBar.edit.table.actions\"),\n          value: \"action\",\n          sortable: false,\n          align: \"center\",\n          width: \"25%\"\n        }\n      ];\n    },\n    scenarioLayersConfig() {\n      const schemas = this.openapiConfig.components.schemas;\n      const scenarioLayersConfig = [\n        schemas.ScenarioPoisModifiedCreate,\n        schemas.ScenarioWaysModifiedCreate,\n        schemas.ScenarioBuildingsModifiedCreate\n      ];\n      return scenarioLayersConfig;\n    },\n    layerName() {\n      let value;\n      if (this.selectedLayer) {\n        value = this.selectedLayer[\"name\"];\n      } else {\n        value = \"\";\n      }\n      return value;\n    },\n    reqFields() {\n      const layerSchema = this.schema[this.layerName];\n      const layerFieldsKeys = Object.keys(layerSchema.properties);\n      return layerFieldsKeys.filter(\n        el =>\n          ![\n            \"way_id\",\n            \"uid\",\n            \"building_modified_id\",\n            \"building_id\",\n            \"id\",\n            \"scenario_id\"\n          ].includes(el) && layerSchema.required.includes(el)\n      );\n    },\n    options() {\n      return {\n        debug: false,\n        disableAll: false,\n        autoFoldObjects: true\n      };\n    },\n    original_id() {\n      if (!this.selectedLayer) return \"\";\n      if (this.selectedLayer[\"name\"] === \"poi\") {\n        return \"uid\";\n      } else if (this.selectedLayer[\"name\"] === \"building\") {\n        return \"building_id\";\n      } else if (this.selectedLayer[\"name\"] === \"way\") {\n        return \"way_id\";\n      } else {\n        return \"\";\n      }\n    },\n    poiList() {\n      return Object.keys(this.poiIcons).filter(\n        poiName => !!this.poisConfig[poiName]\n      );\n    },\n    scenarioApiBaseUrl() {\n      return `/scenarios/${this.activeScenario}/${this.selectedLayer[\"name\"]}_modified/features`;\n    },\n    ...mapGetters(\"auth\", { currentUser: \"currentUser\" }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      calculationMode: \"calculationMode\",\n      openapiConfig: \"openapiConfig\",\n      poiIcons: \"poiIcons\",\n      poisConfig: \"poisConfig\",\n      poisTreeOnlyChildren: \"poisTreeOnlyChildren\",\n      scenarioLayerEditModeColor: \"scenarioLayerEditModeColor\"\n    }),\n    ...mapGetters(\"map\", {\n      contextmenu: \"contextmenu\",\n      layers: \"layers\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAoisLayer: \"poisAoisLayer\",\n      poisAois: \"poisAois\",\n      selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n    }),\n    ...mapFields(\"poisaois\", {\n      selectedPoisAois: \"selectedPoisAois\"\n    }),\n    ...mapFields(\"scenarios\", {\n      scenarioDataTable: \"scenarioDataTable\",\n      scenarios: \"scenarios\",\n      activeScenario: \"activeScenario\"\n    }),\n    scenarioList() {\n      return [\n        { id: null, scenario_name: this.$t(\"appBar.edit.noSelection\") },\n        ...this.scenarios\n      ];\n    },\n    ...mapGetters(\"scenarios\", {\n      activeScenarioObj: \"activeScenarioObj\"\n    }),\n    ...mapFields(\"map\", {\n      selectedLayer: \"selectedEditLayer\",\n      isMapBusy: \"isMapBusy\",\n      editLayer: \"editLayer\",\n      bldEntranceLayer: \"bldEntranceLayer\"\n    }),\n    ...mapFields(\"app\", {\n      appConfig: \"appConfig\",\n      calculationMode: \"calculationMode\"\n    })\n  },\n  created() {\n    const editableLayers = [];\n    this.scenarioLayersConfig.forEach(config => {\n      editableLayers.push(config.client_config);\n    });\n    this.editableLayers = editableLayers;\n    this.fetchScenarioLayerSchemas();\n    this.primaryColorBackup = this.appConfig.app_ui.base_color.primary;\n  }\n};\n</script>\n<style scoped>\n.scenario-icon:hover {\n  cursor: pointer;\n  color: #30c2ff;\n}\n.scenario-icon-delete:hover {\n  cursor: pointer;\n  color: red;\n}\n\n.create-scenario-text {\n  display: block;\n  width: 150px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n"],"sourceRoot":"src/components/layers/edit"}]}