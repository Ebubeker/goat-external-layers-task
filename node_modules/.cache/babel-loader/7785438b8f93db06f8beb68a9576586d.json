{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/core/Confirm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/core/Confirm.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      dialog: false,\n      resolve: null,\n      reject: null,\n      message: null,\n      title: null,\n      options: {\n        color: \"primary\",\n        width: 290,\n        zIndex: 200,\n        icon: \"delete\",\n        showYes: true,\n        showNo: true,\n        yesText: \"\",\n        // The value will be overwritted\n        noText: \"\" // The value will be overwritted\n\n      }\n    };\n  },\n  methods: {\n    open: function open(title, message, options) {\n      var _this = this;\n\n      this.dialog = true;\n      this.title = title;\n      this.message = message;\n      this.options = Object.assign(this.options, options);\n      return new Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n      });\n    },\n    agree: function agree() {\n      this.resolve(true);\n      this.dialog = false;\n    },\n    cancel: function cancel() {\n      this.resolve(false);\n      this.dialog = false;\n    }\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appColor: \"appColor\"\n  }))\n};\n/**\n * Vuetify Confirm Dialog component\n *\n * Insert component where you want to use it:\n * <confirm ref=\"confirm\"></confirm>\n *\n * Call it:\n * this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' }).then((confirm) => {})\n * Or use await:\n * if (await this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' })) {\n *   // yes\n * }\n * else {\n *   // cancel\n * }\n *\n * Alternatively you can place it in main App component and access it globally via this.$root.$confirm\n * <template>\n *   <v-app>\n *     ...\n *     <confirm ref=\"confirm\"></confirm>\n *   </v-app>\n * </template>\n *\n * mounted() {\n *   this.$root.$confirm = this.$refs.confirm.open\n * }\n */",{"version":3,"sources":["Confirm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,MAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA,IAFA;AAGA,MAAA,MAAA,EAAA,IAHA;AAIA,MAAA,OAAA,EAAA,IAJA;AAKA,MAAA,KAAA,EAAA,IALA;AAMA,MAAA,OAAA,EAAA;AACA,QAAA,KAAA,EAAA,SADA;AAEA,QAAA,KAAA,EAAA,GAFA;AAGA,QAAA,MAAA,EAAA,GAHA;AAIA,QAAA,IAAA,EAAA,QAJA;AAKA,QAAA,OAAA,EAAA,IALA;AAMA,QAAA,MAAA,EAAA,IANA;AAOA,QAAA,OAAA,EAAA,EAPA;AAOA;AACA,QAAA,MAAA,EAAA,EARA,CAQA;;AARA;AANA,KAAA;AAAA,GADA;AAkBA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,gBACA,KADA,EACA,OADA,EACA,OADA,EACA;AAAA;;AACA,WAAA,MAAA,GAAA,IAAA;AACA,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,OAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,OAAA,EAAA,OAAA,CAAA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,QAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA,QAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA,OAHA,CAAA;AAIA,KAVA;AAWA,IAAA,KAXA,mBAWA;AACA,WAAA,OAAA,CAAA,IAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACA,KAdA;AAeA,IAAA,MAfA,oBAeA;AACA,WAAA,OAAA,CAAA,KAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACA;AAlBA,GAlBA;AAsCA,EAAA,QAAA,oBACA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAAA,CADA;AAtCA,CAAA;AA4CA","sourcesContent":["<template>\n  <v-dialog\n    v-model=\"dialog\"\n    :max-width=\"options.width\"\n    @keydown.esc=\"cancel\"\n    v-bind:style=\"{ zIndex: options.zIndex }\"\n  >\n    <v-card>\n      <v-app-bar dark :color=\"appColor.primary\" dense flat>\n        <v-app-bar-nav-icon\n          ><v-icon>{{ options.icon }}</v-icon></v-app-bar-nav-icon\n        >\n        <v-toolbar-title class=\"white--text\">{{ title }}</v-toolbar-title>\n      </v-app-bar>\n      <v-card-text\n        class=\"body-1 font-weight-medium mt-3 mb-0 pb-0\"\n        v-show=\"!!message\"\n        >{{ message }}</v-card-text\n      >\n      <v-card-actions class=\"pt-0\">\n        <v-spacer></v-spacer>\n        <v-btn\n          v-show=\"options.showYes\"\n          color=\"primary darken-1\"\n          text\n          @click.native=\"agree\"\n          >{{ options.yesText || $t(\"buttonLabels.yes\") }}</v-btn\n        >\n        <v-btn\n          v-show=\"options.showNo\"\n          color=\"grey\"\n          text\n          @click.native=\"cancel\"\n          >{{ options.noText || $t(\"buttonLabels.cancel\") }}</v-btn\n        >\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  data: () => ({\n    dialog: false,\n    resolve: null,\n    reject: null,\n    message: null,\n    title: null,\n    options: {\n      color: \"primary\",\n      width: 290,\n      zIndex: 200,\n      icon: \"delete\",\n      showYes: true,\n      showNo: true,\n      yesText: \"\", // The value will be overwritted\n      noText: \"\" // The value will be overwritted\n    }\n  }),\n  methods: {\n    open(title, message, options) {\n      this.dialog = true;\n      this.title = title;\n      this.message = message;\n      this.options = Object.assign(this.options, options);\n      return new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n    },\n    agree() {\n      this.resolve(true);\n      this.dialog = false;\n    },\n    cancel() {\n      this.resolve(false);\n      this.dialog = false;\n    }\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n/**\n * Vuetify Confirm Dialog component\n *\n * Insert component where you want to use it:\n * <confirm ref=\"confirm\"></confirm>\n *\n * Call it:\n * this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' }).then((confirm) => {})\n * Or use await:\n * if (await this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' })) {\n *   // yes\n * }\n * else {\n *   // cancel\n * }\n *\n * Alternatively you can place it in main App component and access it globally via this.$root.$confirm\n * <template>\n *   <v-app>\n *     ...\n *     <confirm ref=\"confirm\"></confirm>\n *   </v-app>\n * </template>\n *\n * mounted() {\n *   this.$root.$confirm = this.$refs.confirm.open\n * }\n */\n</script>\n"],"sourceRoot":"src/components/core"}]}