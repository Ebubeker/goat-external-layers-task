{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/Legend.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/Legend.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.starts-with\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport { EventBus } from \"../../../../EventBus\";\nimport { Mapable } from \"../../../../mixins/Mapable\";\nimport { getWMSLegendURL } from \"../../../../utils/Layer\";\nimport LegendRenderer from \"../../../../utils/LegendRenderer\";\nimport { mapFields } from \"vuex-map-fields\";\nexport default {\n  mixins: [Mapable],\n  name: \"map-legend\",\n  props: {\n    color: {\n      type: String,\n      default: \"#2BB381\"\n    }\n  },\n  data: function data() {\n    return {\n      layers: [],\n      panel: [],\n      isMapMounted: false,\n      isRendered: false\n    };\n  },\n  methods: {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound: function onMapBound() {\n      var _this = this;\n\n      var me = this;\n      me.layers = me.map.getLayers().getArray().filter(function (layer) {\n        return layer.get(\"displayInLegend\") !== false;\n      });\n      this.isMapMounted = true;\n      EventBus.$on(\"openLegend\", function () {\n        return _this.panel.push(0);\n      });\n      EventBus.$on(\"closeLegend\", function () {\n        return _this.panel = [];\n      });\n    },\n    getWMSLegendImageUrl: function getWMSLegendImageUrl(item, layerName) {\n      var layerUrl = item.getSource().getUrl();\n\n      if (layerUrl.startsWith(\"/\")) {\n        layerUrl = window.location.origin + layerUrl;\n      }\n\n      var style = item.getSource().getParams().STYLES;\n      var legedUrl = getWMSLegendURL(layerUrl, layerName, undefined, undefined, undefined, undefined, item.getSource().serverType_, 120, undefined, undefined, undefined, this.$i18n.locale, style);\n      return legedUrl;\n    },\n    renderLegend: function renderLegend(item, index) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        var styleObj = _this2.vectorTileStyles;\n        var name = item.get(\"name\");\n        var styleTranslation = _this2.vectorTileStyles[name].translation;\n        var currentLocale = _this2.$i18n.locale;\n\n        if (styleObj[name] && styleObj[name].format === \"geostyler\") {\n          var el = _this2.$refs[\"legend-vector-\".concat(index)];\n\n          el = el ? el : [];\n\n          if (el.length) {\n            if (Array.isArray(el) && el.length > 0) {\n              el = el[0];\n            } // Remove existing svg elements on update (Workaround)\n\n\n            if (el && el.childNodes.length > 0) {\n              el.removeChild(el.childNodes[0]);\n            }\n\n            var style = styleObj[name].style;\n\n            var filteredStyle = _this2.filterStylesOnActiveMode(style);\n\n            var renderer = new LegendRenderer({\n              maxColumnWidth: 240,\n              overflow: \"auto\",\n              styles: [filteredStyle || style],\n              size: [230, 300],\n              translation: {\n                styleTranslation: styleTranslation,\n                currentLocale: currentLocale\n              }\n            });\n            renderer.render(el);\n          }\n        }\n      }, 100);\n    },\n    filterStylesOnActiveModeByLayerName: function filterStylesOnActiveModeByLayerName(name) {\n      //get Filtered style on active mode based on layer name\n      var style = this.vectorTileStyles[name].style;\n      var filteredStyle = this.filterStylesOnActiveMode(style);\n      return filteredStyle || style;\n    },\n    filterStylesOnActiveMode: function filterStylesOnActiveMode(style) {\n      //get Filtered style on active mode based on style object\n      var styleRules = style.rules;\n      var filteredRules = [];\n      var activeMode = this.calculationMode.active;\n\n      var newStyle = _objectSpread({}, style);\n\n      if (Array.isArray(styleRules)) {\n        styleRules.forEach(function (rule) {\n          if (Array.isArray(rule.filter)) {\n            var showInLegend = true;\n            rule.filter.forEach(function (filter) {\n              /** FILTER CURRENT MODES. */\n              if (Array.isArray(filter) && filter.includes(\"modus\")) {\n                showInLegend = false;\n                var operator = filter[0];\n                var value = filter[2];\n\n                if (value === activeMode && operator === \"==\") {\n                  showInLegend = true;\n                } else if (value !== activeMode && operator === \"!=\") {\n                  showInLegend = true;\n                }\n              }\n            });\n            if (showInLegend) filteredRules.push(rule); // Add all other rules in the legend\n          } else {\n            filteredRules.push(rule);\n          }\n        });\n\n        if (Array.isArray(filteredRules)) {\n          newStyle.rules = filteredRules;\n        }\n\n        return newStyle;\n      }\n    },\n    onExpansionPanelClick: function onExpansionPanelClick() {\n      if (!this.isRendered) {\n        this.$forceUpdate();\n        this.isRendered = true;\n      }\n    },\n    layerVisibility: function layerVisibility(item) {\n      if (this.map.getView().getResolution() <= item.get(\"maxResolution\") && item.getVisible() === true && item.get(\"displayInLegend\") !== false && item.get(\"group\") !== \"basemap\" && this.isMapMounted === true && this.vectorTileStyles) {\n        return true;\n      }\n\n      return false;\n    }\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    calculationMode: \"calculationMode\"\n  }), {}, mapFields(\"map\", {\n    vectorTileStyles: \"vectorTileStyles\"\n  })),\n  watch: {\n    \"calculationMode.active\": function calculationModeActive() {\n      this.$forceUpdate();\n    }\n  }\n};",{"version":3,"sources":["Legend.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <span></span>\n</template>\n<script>\nimport { mapGetters } from \"vuex\";\nimport { EventBus } from \"../../../../EventBus\";\nimport { Mapable } from \"../../../../mixins/Mapable\";\nimport { getWMSLegendURL } from \"../../../../utils/Layer\";\nimport LegendRenderer from \"../../../../utils/LegendRenderer\";\nimport { mapFields } from \"vuex-map-fields\";\nexport default {\n  mixins: [Mapable],\n  name: \"map-legend\",\n  props: {\n    color: { type: String, default: \"#2BB381\" }\n  },\n  data: () => ({\n    layers: [],\n    panel: [],\n    isMapMounted: false,\n    isRendered: false\n  }),\n  methods: {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      const me = this;\n      me.layers = me.map\n        .getLayers()\n        .getArray()\n        .filter(layer => layer.get(\"displayInLegend\") !== false);\n      this.isMapMounted = true;\n      EventBus.$on(\"openLegend\", () => this.panel.push(0));\n      EventBus.$on(\"closeLegend\", () => (this.panel = []));\n    },\n    getWMSLegendImageUrl(item, layerName) {\n      let layerUrl = item.getSource().getUrl();\n      if (layerUrl.startsWith(\"/\")) {\n        layerUrl = window.location.origin + layerUrl;\n      }\n      const style = item.getSource().getParams().STYLES;\n      const legedUrl = getWMSLegendURL(\n        layerUrl,\n        layerName,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        item.getSource().serverType_,\n        120,\n        undefined,\n        undefined,\n        undefined,\n        this.$i18n.locale,\n        style\n      );\n      return legedUrl;\n    },\n    renderLegend(item, index) {\n      setTimeout(() => {\n        const styleObj = this.vectorTileStyles;\n        const name = item.get(\"name\");\n        let styleTranslation = this.vectorTileStyles[name].translation;\n        const currentLocale = this.$i18n.locale;\n        if (styleObj[name] && styleObj[name].format === \"geostyler\") {\n          let el = this.$refs[`legend-vector-${index}`];\n          el = el ? el : [];\n          if (el.length) {\n            if (Array.isArray(el) && el.length > 0) {\n              el = el[0];\n            }\n            // Remove existing svg elements on update (Workaround)\n            if (el && el.childNodes.length > 0) {\n              el.removeChild(el.childNodes[0]);\n            }\n            const style = styleObj[name].style;\n            const filteredStyle = this.filterStylesOnActiveMode(style);\n\n            const renderer = new LegendRenderer({\n              maxColumnWidth: 240,\n              overflow: \"auto\",\n              styles: [filteredStyle || style],\n              size: [230, 300],\n              translation: { styleTranslation, currentLocale }\n            });\n            renderer.render(el);\n          }\n        }\n      }, 100);\n    },\n    filterStylesOnActiveModeByLayerName(name) {\n      //get Filtered style on active mode based on layer name\n      const style = this.vectorTileStyles[name].style;\n      const filteredStyle = this.filterStylesOnActiveMode(style);\n      return filteredStyle || style;\n    },\n    filterStylesOnActiveMode(style) {\n      //get Filtered style on active mode based on style object\n      const styleRules = style.rules;\n      const filteredRules = [];\n      const activeMode = this.calculationMode.active;\n      let newStyle = { ...style };\n      if (Array.isArray(styleRules)) {\n        styleRules.forEach(rule => {\n          if (Array.isArray(rule.filter)) {\n            let showInLegend = true;\n            rule.filter.forEach(filter => {\n              /** FILTER CURRENT MODES. */\n              if (Array.isArray(filter) && filter.includes(\"modus\")) {\n                showInLegend = false;\n                const operator = filter[0];\n                const value = filter[2];\n                if (value === activeMode && operator === \"==\") {\n                  showInLegend = true;\n                } else if (value !== activeMode && operator === \"!=\") {\n                  showInLegend = true;\n                }\n              }\n            });\n            if (showInLegend) filteredRules.push(rule);\n            // Add all other rules in the legend\n          } else {\n            filteredRules.push(rule);\n          }\n        });\n        if (Array.isArray(filteredRules)) {\n          newStyle.rules = filteredRules;\n        }\n        return newStyle;\n      }\n    },\n    onExpansionPanelClick() {\n      if (!this.isRendered) {\n        this.$forceUpdate();\n        this.isRendered = true;\n      }\n    },\n    layerVisibility(item) {\n      if (\n        this.map.getView().getResolution() <= item.get(\"maxResolution\") &&\n        item.getVisible() === true &&\n        item.get(\"displayInLegend\") !== false &&\n        item.get(\"group\") !== \"basemap\" &&\n        this.isMapMounted === true &&\n        this.vectorTileStyles\n      ) {\n        return true;\n      }\n      return false;\n    }\n  },\n\n  computed: {\n    ...mapGetters(\"app\", {\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\"\n    })\n  },\n  watch: {\n    \"calculationMode.active\": function() {\n      this.$forceUpdate();\n    }\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.v-expansion-panel-header {\n  min-height: 30px;\n  padding: 5px;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 2px 0px 0px 5px;\n}\n</style>\n"],"sourceRoot":"src/components/viewer/ol/controls"}]}