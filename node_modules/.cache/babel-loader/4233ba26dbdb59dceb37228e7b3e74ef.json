{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js??ref--13-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/utils/Url.js","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/utils/Url.js","mtime":1657636289867},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js","mtime":1657636581253}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.search\";\n\n/**\n * URL related util methods\n */\nvar UrlUtil = {\n  /**\n   * Returns all query params of the given search part (querySearch) of an URL\n   * as JS object (key-value).\n   * If querySearch is not provided it is derived from the current location.\n   *\n   * @param  {String} querySearch Search part (querySearch) of an URL\n   * @return {Object}             Key-value pairs of the URL parameters\n   */\n  getQueryParams: function getQueryParams(querySearch) {\n    if (!querySearch) {\n      querySearch = document.location.search;\n    }\n\n    querySearch = querySearch.split(\"+\").join(\" \");\n    var re = /[?&]?([^=]+)=([^&]*)/g;\n    var params = {};\n    var tokens;\n\n    while (tokens = re.exec(querySearch)) {\n      params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\n    }\n\n    return params;\n  },\n\n  /**\n   * Returns a dedicated URL parameter if existing.\n   * If querySearch is not provided it is derived from the current location.\n   *\n   * @param  {String} param       The URL param name\n   * @param  {String} querySearch Search part (querySearch) of an URL\n   * @return {String}             Value of the given URL param\n   */\n  getQueryParam: function getQueryParam(param, querySearch) {\n    var params = this.getQueryParams(querySearch);\n    var value;\n    Object.keys(params).forEach(function (key) {\n      if (key === param) {\n        value = params[key];\n        return;\n      }\n    });\n    return value;\n  },\n\n  /**\n   * Returns a dedicated URL parameter if existing.\n   * If querySearch is not provided it is derived from the current location.\n   *\n   * @param  {String} uri       The URL\n   * @param  {String} key       The URL key\n   * @param  {String} value     The URL value\n   * @return {String}           Value of the given URL param\n   */\n  updateQueryStringParameter: function updateQueryStringParameter(uri, key, value) {\n    var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n    var separator = uri.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n\n    if (uri.match(re)) {\n      return uri.replace(re, \"$1\" + key + \"=\" + value + \"$2\");\n    } else {\n      return uri + separator + key + \"=\" + value;\n    }\n  }\n};\nexport default UrlUtil;",{"version":3,"sources":["/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/utils/Url.js"],"names":["UrlUtil","getQueryParams","querySearch","document","location","search","split","join","re","params","tokens","exec","decodeURIComponent","getQueryParam","param","value","Object","keys","forEach","key","updateQueryStringParameter","uri","RegExp","separator","indexOf","match","replace"],"mappings":";;;;;;;;AAAA;;;AAGA,IAAMA,OAAO,GAAG;AACd;;;;;;;;AAQAC,EAAAA,cATc,0BASCC,WATD,EASc;AAC1B,QAAI,CAACA,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,MAAhC;AACD;;AACDH,IAAAA,WAAW,GAAGA,WAAW,CAACI,KAAZ,CAAkB,GAAlB,EAAuBC,IAAvB,CAA4B,GAA5B,CAAd;AAEA,QAAMC,EAAE,GAAG,uBAAX;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,MAAJ;;AACA,WAAQA,MAAM,GAAGF,EAAE,CAACG,IAAH,CAAQT,WAAR,CAAjB,EAAwC;AACtCO,MAAAA,MAAM,CAACG,kBAAkB,CAACF,MAAM,CAAC,CAAD,CAAP,CAAnB,CAAN,GAAwCE,kBAAkB,CAACF,MAAM,CAAC,CAAD,CAAP,CAA1D;AACD;;AAED,WAAOD,MAAP;AACD,GAvBa;;AAyBd;;;;;;;;AAQAI,EAAAA,aAjCc,yBAiCAC,KAjCA,EAiCOZ,WAjCP,EAiCoB;AAChC,QAAMO,MAAM,GAAG,KAAKR,cAAL,CAAoBC,WAApB,CAAf;AACA,QAAIa,KAAJ;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYR,MAAZ,EAAoBS,OAApB,CAA4B,UAAAC,GAAG,EAAI;AACjC,UAAIA,GAAG,KAAKL,KAAZ,EAAmB;AACjBC,QAAAA,KAAK,GAAGN,MAAM,CAACU,GAAD,CAAd;AACA;AACD;AACF,KALD;AAOA,WAAOJ,KAAP;AACD,GA5Ca;;AA8Cd;;;;;;;;;AASAK,EAAAA,0BAvDc,sCAuDaC,GAvDb,EAuDkBF,GAvDlB,EAuDuBJ,KAvDvB,EAuD8B;AAC1C,QAAIP,EAAE,GAAG,IAAIc,MAAJ,CAAW,WAAWH,GAAX,GAAiB,WAA5B,EAAyC,GAAzC,CAAT;AACA,QAAII,SAAS,GAAGF,GAAG,CAACG,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAhD;;AACA,QAAIH,GAAG,CAACI,KAAJ,CAAUjB,EAAV,CAAJ,EAAmB;AACjB,aAAOa,GAAG,CAACK,OAAJ,CAAYlB,EAAZ,EAAgB,OAAOW,GAAP,GAAa,GAAb,GAAmBJ,KAAnB,GAA2B,IAA3C,CAAP;AACD,KAFD,MAEO;AACL,aAAOM,GAAG,GAAGE,SAAN,GAAkBJ,GAAlB,GAAwB,GAAxB,GAA8BJ,KAArC;AACD;AACF;AA/Da,CAAhB;AAkEA,eAAef,OAAf","sourcesContent":["/**\n * URL related util methods\n */\nconst UrlUtil = {\n  /**\n   * Returns all query params of the given search part (querySearch) of an URL\n   * as JS object (key-value).\n   * If querySearch is not provided it is derived from the current location.\n   *\n   * @param  {String} querySearch Search part (querySearch) of an URL\n   * @return {Object}             Key-value pairs of the URL parameters\n   */\n  getQueryParams(querySearch) {\n    if (!querySearch) {\n      querySearch = document.location.search;\n    }\n    querySearch = querySearch.split(\"+\").join(\" \");\n\n    const re = /[?&]?([^=]+)=([^&]*)/g;\n    let params = {};\n    let tokens;\n    while ((tokens = re.exec(querySearch))) {\n      params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\n    }\n\n    return params;\n  },\n\n  /**\n   * Returns a dedicated URL parameter if existing.\n   * If querySearch is not provided it is derived from the current location.\n   *\n   * @param  {String} param       The URL param name\n   * @param  {String} querySearch Search part (querySearch) of an URL\n   * @return {String}             Value of the given URL param\n   */\n  getQueryParam(param, querySearch) {\n    const params = this.getQueryParams(querySearch);\n    let value;\n    Object.keys(params).forEach(key => {\n      if (key === param) {\n        value = params[key];\n        return;\n      }\n    });\n\n    return value;\n  },\n\n  /**\n   * Returns a dedicated URL parameter if existing.\n   * If querySearch is not provided it is derived from the current location.\n   *\n   * @param  {String} uri       The URL\n   * @param  {String} key       The URL key\n   * @param  {String} value     The URL value\n   * @return {String}           Value of the given URL param\n   */\n  updateQueryStringParameter(uri, key, value) {\n    var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n    var separator = uri.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n    if (uri.match(re)) {\n      return uri.replace(re, \"$1\" + key + \"=\" + value + \"$2\");\n    } else {\n      return uri + separator + key + \"=\" + value;\n    }\n  }\n};\n\nexport default UrlUtil;\n"]}]}