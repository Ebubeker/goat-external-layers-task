{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/heatmaps/Heatmaps.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/heatmaps/Heatmaps.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { EventBus } from \"../../EventBus\";\nimport { Mapable } from \"../../mixins/Mapable\";\nimport { mapFields } from \"vuex-map-fields\";\nimport Legend from \"../viewer/ol/controls/Legend\";\nimport LayerTree from \"../layers/layerTree/LayerTree\";\nimport StyleDialog from \"../layers/changeStyle/StyleDialog.vue\";\nimport InLegend from \"../viewer/ol/controls/InLegend.vue\";\nimport ApiService from \"../../services/api.service\";\nimport { GET_USER_CUSTOM_DATA } from \"../../store/actions.type\";\nexport default {\n  mixins: [Mapable, Legend, LayerTree],\n  components: {\n    InLegend: InLegend,\n    StyleDialog: StyleDialog\n  },\n  data: function data() {\n    return {\n      heatmapPanel: [0],\n      heatmapGroup: {},\n      interactionType: \"heatmap-interaction\",\n      heatmapsWithPois: [\"heatmap_accessibility_population\", \"heatmap_local_accessibility\"],\n      updateHeatmaps: {\n        poi: [\"heatmap_local_accessibility\", \"heatmap_accessibility_population\"],\n        population: [\"heatmap_accessibility_population\", \"heatmap_population\"]\n      },\n      currentItem: null,\n      styleDialogKey: 0,\n      styleDialogStatus: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    EventBus.$on(\"updateStyleDialogStatusForLayerOrder\", function (value) {\n      _this.styleDialogStatus = value;\n    });\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appColor: \"appColor\",\n    appConfig: \"appConfig\",\n    calculationMode: \"calculationMode\",\n    unCalculatedDataUploadIds: \"unCalculatedDataUploadIds\"\n  }), {}, mapGetters(\"poisaois\", {\n    selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n  }), {}, mapGetters(\"scenarios\", {\n    activeScenario: \"activeScenario\"\n  }), {}, mapFields(\"map\", {\n    heatmapCancelToken: \"heatmapCancelToken\"\n  }), {}, mapFields(\"app\", {\n    isRecomputingHeatmap: \"isRecomputingHeatmap\"\n  })),\n  methods: _objectSpread({}, mapMutations(\"map\", {\n    toggleSnackbar: \"TOGGLE_SNACKBAR\"\n  }), {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     * and registers the current map layers.\n     */\n    onMapBound: function onMapBound() {\n      var _this2 = this;\n\n      this.map.getLayers().getArray().forEach(function (layer) {\n        if (layer.get(\"group\") && layer.get(\"group\") === \"heatmap\") {\n          if (!_this2.heatmapGroup[layer.get(\"group\")]) {\n            _this2.heatmapGroup[layer.get(\"group\")] = [];\n          }\n\n          layer.set(\"attributeDisplayStatusKey\", 0);\n\n          _this2.heatmapGroup[layer.get(\"group\")].push(layer);\n        }\n      });\n      EventBus.$on(\"update-heatmap\", function (updateHeatmapsLinkedTo) {\n        _this2.refreshHeatmap(updateHeatmapsLinkedTo);\n      });\n    },\n    toggleHeatmapOptions: function toggleHeatmapOptions(layer) {\n      layer.set(\"showOptions\", !layer.get(\"showOptions\"));\n    },\n    translate: function translate(type, key) {\n      var canTranslate = this.$te(\"map.\".concat(type, \".\").concat(key));\n\n      if (canTranslate) {\n        return this.$t(\"map.\".concat(type, \".\").concat(key));\n      } else {\n        return key;\n      }\n    },\n    openStyleDialog: function openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n\n      if (this.currentItem && this.currentItem.get(\"name\") !== item.get(\"name\")) {\n        this.styleDialogKey += 1;\n      }\n\n      if (this.currentItem && this.currentItem.get(\"layerTreeKey\") >= 0 && this.currentItem.get(\"name\") !== item.get(\"name\")) {\n        this.currentItem.set(\"layerTreeKey\", this.currentItem.get(\"layerTreeKey\") + 1);\n      }\n\n      this.currentItem = item;\n    },\n    toggleLayerVisibility: function toggleLayerVisibility(layer, group) {\n      if (this.heatmapCancelToken instanceof Function) {\n        this.heatmapCancelToken(\"cancelled\");\n        this.heatmapCancelToken = null;\n      } //Turn off other heatmaps if layer group is heatmap.\n\n\n      if (layer.get(\"group\") === \"heatmap\") {\n        group.forEach(function (lc) {\n          if (lc.get(\"name\") === layer.get(\"name\")) return;\n          lc.setVisible(false);\n          lc.set(\"showOptions\", false);\n        });\n      }\n\n      layer.setVisible(!layer.getVisible());\n\n      if (layer.getVisible() === false) {\n        layer.set(\"showOptions\", false);\n      } else {\n        if (this.heatmapCancelToken instanceof Function) {\n          this.heatmapCancelToken(\"cancelled\");\n          this.heatmapCancelToken = null;\n        }\n\n        layer.getSource().refresh();\n        this.checkIfHeatmapNeedsPois(layer);\n        layer.set(\"showOptions\", true);\n      }\n    },\n    refreshAllVisibleHeatmaps: function refreshAllVisibleHeatmaps() {\n      var _this3 = this;\n\n      this.heatmapGroup[\"heatmap\"].forEach(function (layer) {\n        if (layer.getVisible()) {\n          _this3.checkIfHeatmapNeedsPois(layer);\n\n          if (_this3.heatmapCancelToken instanceof Function) {\n            _this3.heatmapCancelToken(\"cancelled\");\n\n            _this3.heatmapCancelToken = null;\n          }\n\n          layer.getSource().refresh();\n        }\n      });\n    },\n    refreshHeatmap: function refreshHeatmap(update) {\n      var _this4 = this;\n\n      if (this.heatmapCancelToken instanceof Function) {\n        this.heatmapCancelToken(\"cancelled\");\n        this.heatmapCancelToken = null;\n      }\n\n      if (this.updateHeatmaps[update]) {\n        this.updateHeatmaps[update].forEach(function (heatmapName) {\n          _this4.heatmapGroup[\"heatmap\"].forEach(function (layer) {\n            if (layer.get(\"name\") === heatmapName && layer.getVisible()) {\n              _this4.checkIfHeatmapNeedsPois(layer);\n\n              if (_this4.heatmapCancelToken instanceof Function) {\n                _this4.heatmapCancelToken(\"cancelled\");\n\n                _this4.heatmapCancelToken = null;\n              }\n\n              layer.getSource().refresh();\n            }\n          });\n        });\n      }\n    },\n    recomputeHeatmaps: function recomputeHeatmaps() {\n      var _this5 = this;\n\n      this.isRecomputingHeatmap = true;\n      var queryParam = \"\";\n      this.unCalculatedDataUploadIds.forEach(function (id, index) {\n        if (id && index !== _this5.unCalculatedDataUploadIds.length - 1) {\n          queryParam += \"id=\".concat(id, \"&\");\n        } else if (id) {\n          queryParam += \"id=\".concat(id);\n        }\n      });\n      ApiService.get_(\"/heatmap/compute/data-upload?\".concat(queryParam)).then(function () {\n        _this5.toggleSnackbar({\n          type: _this5.appColor.primary,\n          message: _this5.$t(\"heatmaps.heatmapComputedSuccessfully\"),\n          state: true,\n          timeout: 3000\n        });\n      }).catch(function () {\n        _this5.toggleSnackbar({\n          type: _this5.appColor.primary,\n          message: _this5.$t(\"heatmaps.heatmapComputationFailed\"),\n          state: true,\n          timeout: 3000\n        });\n      }).finally(function () {\n        _this5.$store.dispatch(\"app/\".concat(GET_USER_CUSTOM_DATA));\n\n        _this5.isRecomputingHeatmap = false;\n      });\n    },\n    checkIfHeatmapNeedsPois: function checkIfHeatmapNeedsPois(layer) {\n      this.toggleSnackbar({\n        state: false\n      });\n\n      if (this.selectedPoisOnlyKeys.length === 0 && this.heatmapsWithPois.includes(layer.get(\"name\"))) {\n        this.toggleSnackbar({\n          type: \"error\",\n          message: this.$t(\"map.snackbarMessages.selectAmenities\"),\n          state: true,\n          timeout: 4000\n        });\n        return true;\n      } else {\n        return false;\n      }\n    },\n    isHeatmapDisabled: function isHeatmapDisabled(layer) {\n      if (this.heatmapsWithPois.includes(layer.get(\"name\")) && this.unCalculatedDataUploadIds.length > 0) {\n        layer.setVisible(false);\n        layer.set(\"showOptions\", false);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }),\n  watch: {\n    selectedPoisOnlyKeys: function selectedPoisOnlyKeys() {\n      this.refreshAllVisibleHeatmaps();\n    },\n    activeScenario: function activeScenario() {\n      this.refreshAllVisibleHeatmaps();\n    },\n    \"calculationMode.active\": function calculationModeActive() {\n      this.refreshAllVisibleHeatmaps();\n    }\n  }\n};",{"version":3,"sources":["Heatmaps.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <vue-scroll>\n      <template>\n        <!-- HEATMAP LAYERS -->\n        <v-expansion-panels accordion multiple v-model=\"heatmapPanel\">\n          <v-expansion-panel\n            v-for=\"(layerGroupValue, layerGroupKey) in heatmapGroup\"\n            :key=\"layerGroupKey\"\n            expand\n          >\n            <v-expansion-panel-header\n              class=\"elevation-2\"\n              expand-icon=\"\"\n              v-slot=\"{ open }\"\n            >\n              <v-layout row wrap align-center>\n                <v-flex xs1>\n                  <img\n                    height=\"20\"\n                    width=\"20\"\n                    class=\"mr-3\"\n                    src=\"img/layer-style-icons/hexagon.svg\"\n                  />\n                </v-flex>\n                <v-flex xs10 class=\"light-text\" style=\"font-size:medium;\">\n                  <div>\n                    <b>{{ translate(\"layerGroup\", layerGroupKey) }}</b>\n                  </div>\n                </v-flex>\n                <v-flex xs1>\n                  <v-icon v-html=\"open ? 'remove' : 'add'\"></v-icon>\n                </v-flex>\n              </v-layout>\n            </v-expansion-panel-header>\n            <v-expansion-panel-content>\n              <!-- LAYERS -->\n              <v-expansion-panels readonly>\n                <v-expansion-panel\n                  v-for=\"(layer, i) in layerGroupValue\"\n                  :key=\"i\"\n                  :disabled=\"isHeatmapDisabled(layer)\"\n                  class=\"layer-row\"\n                  :style=\"{\n                    backgroundColor: isHeatmapDisabled(layer)\n                      ? '#ECECEC'\n                      : '#ffffff'\n                  }\"\n                  :class=\"{\n                    'expansion-panel__container--active':\n                      layer.get('showOptions') === true\n                  }\"\n                >\n                  <v-expansion-panel-header expand-icon=\"\" v-slot=\"{}\">\n                    <v-layout row class=\"pl-1\" wrap align-center>\n                      <v-flex class=\"checkbox\" xs1>\n                        <v-checkbox\n                          :color=\"appColor.secondary\"\n                          :input-value=\"layer.getVisible()\"\n                          @change=\"\n                            toggleLayerVisibility(layer, layerGroupValue)\n                          \"\n                        ></v-checkbox>\n                      </v-flex>\n                      <v-flex xs10 class=\"light-text\">\n                        <h4 class=\"pl-2\">\n                          {{ translate(\"layerName\", layer.get(\"name\")) }}\n                        </h4>\n                      </v-flex>\n                      <v-flex xs1>\n                        <v-icon\n                          v-show=\"layer.getVisible()\"\n                          small\n                          style=\"width: 30px; height: 30px;\"\n                          v-html=\"\n                            layer.get('showOptions')\n                              ? 'fas fa-chevron-down'\n                              : 'fas fa-chevron-up'\n                          \"\n                          :class=\"{\n                            'expansion-panel__container--active': layer.get(\n                              'showOptions'\n                            )\n                          }\"\n                          @click.stop=\"toggleHeatmapOptions(layer)\"\n                        ></v-icon>\n                      </v-flex>\n                    </v-layout>\n                  </v-expansion-panel-header>\n                  <!-- --- -->\n                  <!-- LAYER LEGEND AND SETTINGS  -->\n                  <v-card\n                    class=\"pt-2\"\n                    v-show=\"layer.get('showOptions') === true\"\n                    style=\"background-color: white;\"\n                    transition=\"slide-y-reverse-transition\"\n                  >\n                    <InLegend :layer=\"layer\"></InLegend>\n                    <v-layout row style=\"width:100%;padding-left: 10px;\">\n                      <v-flex\n                        class=\"xs2\"\n                        style=\"text-align:center;\"\n                        v-if=\"\n                          ['VECTORTILE', 'VECTOR', 'MVT', 'GEOBUF'].includes(\n                            layer.get('type').toUpperCase()\n                          )\n                        \"\n                      >\n                        <v-icon\n                          v-ripple\n                          style=\"color:#B0B0B0;margin-top:3px;cursor:pointer\"\n                          dark\n                          @click=\"openStyleDialog(layer)\"\n                        >\n                          fas fa-cog\n                        </v-icon>\n                      </v-flex>\n                      <v-flex\n                        :class=\"{\n                          xs10:\n                            ['VECTORTILE', 'VECTOR', 'MVT', 'GEOBUF'].includes(\n                              layer.get('type').toUpperCase()\n                            ) == true,\n                          xs12: false\n                        }\"\n                      >\n                        <v-slider\n                          :value=\"layer.getOpacity()\"\n                          class=\"mx-5\"\n                          step=\"0.05\"\n                          min=\"0\"\n                          max=\"1\"\n                          @input=\"changeLayerOpacity($event, layer)\"\n                          :label=\"$t('layerTree.settings.transparency')\"\n                          :color=\"appColor.secondary\"\n                        ></v-slider>\n                      </v-flex>\n                    </v-layout>\n                  </v-card>\n                  <!-- --- -->\n                </v-expansion-panel>\n              </v-expansion-panels>\n            </v-expansion-panel-content>\n          </v-expansion-panel>\n        </v-expansion-panels>\n      </template>\n      <v-card-actions v-if=\"unCalculatedDataUploadIds.length > 0\">\n        <v-spacer></v-spacer>\n        <v-btn\n          :loading=\"isRecomputingHeatmap\"\n          class=\"white--text\"\n          @click=\"recomputeHeatmaps\"\n          :color=\"appColor.primary\"\n        >\n          <v-icon left>fas fa-refresh</v-icon\n          >{{ $t(\"heatmaps.recomputeHeatmap\") }}</v-btn\n        >\n      </v-card-actions>\n    </vue-scroll>\n    <span v-if=\"styleDialogStatus\">\n      <StyleDialog\n        :item=\"currentItem\"\n        :translate=\"translate\"\n        :key=\"styleDialogKey\"\n        :styleDialogStatus=\"styleDialogStatus\"\n      ></StyleDialog>\n    </span>\n  </v-flex>\n</template>\n<script>\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { EventBus } from \"../../EventBus\";\nimport { Mapable } from \"../../mixins/Mapable\";\nimport { mapFields } from \"vuex-map-fields\";\nimport Legend from \"../viewer/ol/controls/Legend\";\nimport LayerTree from \"../layers/layerTree/LayerTree\";\nimport StyleDialog from \"../layers/changeStyle/StyleDialog.vue\";\nimport InLegend from \"../viewer/ol/controls/InLegend.vue\";\nimport ApiService from \"../../services/api.service\";\nimport { GET_USER_CUSTOM_DATA } from \"../../store/actions.type\";\n\nexport default {\n  mixins: [Mapable, Legend, LayerTree],\n  components: {\n    InLegend,\n    StyleDialog\n  },\n  data: () => ({\n    heatmapPanel: [0],\n    heatmapGroup: {},\n    interactionType: \"heatmap-interaction\",\n    heatmapsWithPois: [\n      \"heatmap_accessibility_population\",\n      \"heatmap_local_accessibility\"\n    ],\n\n    updateHeatmaps: {\n      poi: [\"heatmap_local_accessibility\", \"heatmap_accessibility_population\"],\n      population: [\"heatmap_accessibility_population\", \"heatmap_population\"]\n    },\n    currentItem: null,\n    styleDialogKey: 0,\n    styleDialogStatus: false\n  }),\n\n  mounted() {\n    EventBus.$on(\"updateStyleDialogStatusForLayerOrder\", value => {\n      this.styleDialogStatus = value;\n    });\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      calculationMode: \"calculationMode\",\n      unCalculatedDataUploadIds: \"unCalculatedDataUploadIds\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n    }),\n    ...mapGetters(\"scenarios\", {\n      activeScenario: \"activeScenario\"\n    }),\n    ...mapFields(\"map\", {\n      heatmapCancelToken: \"heatmapCancelToken\"\n    }),\n    ...mapFields(\"app\", {\n      isRecomputingHeatmap: \"isRecomputingHeatmap\"\n    })\n  },\n  methods: {\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\"\n    }),\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     * and registers the current map layers.\n     */\n    onMapBound() {\n      this.map\n        .getLayers()\n        .getArray()\n        .forEach(layer => {\n          if (layer.get(\"group\") && layer.get(\"group\") === \"heatmap\") {\n            if (!this.heatmapGroup[layer.get(\"group\")]) {\n              this.heatmapGroup[layer.get(\"group\")] = [];\n            }\n            layer.set(\"attributeDisplayStatusKey\", 0);\n            this.heatmapGroup[layer.get(\"group\")].push(layer);\n          }\n        });\n      EventBus.$on(\"update-heatmap\", updateHeatmapsLinkedTo => {\n        this.refreshHeatmap(updateHeatmapsLinkedTo);\n      });\n    },\n    toggleHeatmapOptions(layer) {\n      layer.set(\"showOptions\", !layer.get(\"showOptions\"));\n    },\n    translate(type, key) {\n      const canTranslate = this.$te(`map.${type}.${key}`);\n      if (canTranslate) {\n        return this.$t(`map.${type}.${key}`);\n      } else {\n        return key;\n      }\n    },\n    openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.styleDialogKey += 1;\n      }\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"layerTreeKey\") >= 0 &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.currentItem.set(\n          \"layerTreeKey\",\n          this.currentItem.get(\"layerTreeKey\") + 1\n        );\n      }\n      this.currentItem = item;\n    },\n    toggleLayerVisibility(layer, group) {\n      if (this.heatmapCancelToken instanceof Function) {\n        this.heatmapCancelToken(\"cancelled\");\n        this.heatmapCancelToken = null;\n      }\n      //Turn off other heatmaps if layer group is heatmap.\n      if (layer.get(\"group\") === \"heatmap\") {\n        group.forEach(lc => {\n          if (lc.get(\"name\") === layer.get(\"name\")) return;\n          lc.setVisible(false);\n          lc.set(\"showOptions\", false);\n        });\n      }\n      layer.setVisible(!layer.getVisible());\n      if (layer.getVisible() === false) {\n        layer.set(\"showOptions\", false);\n      } else {\n        if (this.heatmapCancelToken instanceof Function) {\n          this.heatmapCancelToken(\"cancelled\");\n          this.heatmapCancelToken = null;\n        }\n        layer.getSource().refresh();\n        this.checkIfHeatmapNeedsPois(layer);\n        layer.set(\"showOptions\", true);\n      }\n    },\n    refreshAllVisibleHeatmaps() {\n      this.heatmapGroup[\"heatmap\"].forEach(layer => {\n        if (layer.getVisible()) {\n          this.checkIfHeatmapNeedsPois(layer);\n          if (this.heatmapCancelToken instanceof Function) {\n            this.heatmapCancelToken(\"cancelled\");\n            this.heatmapCancelToken = null;\n          }\n          layer.getSource().refresh();\n        }\n      });\n    },\n    refreshHeatmap(update) {\n      if (this.heatmapCancelToken instanceof Function) {\n        this.heatmapCancelToken(\"cancelled\");\n        this.heatmapCancelToken = null;\n      }\n      if (this.updateHeatmaps[update]) {\n        this.updateHeatmaps[update].forEach(heatmapName => {\n          this.heatmapGroup[\"heatmap\"].forEach(layer => {\n            if (layer.get(\"name\") === heatmapName && layer.getVisible()) {\n              this.checkIfHeatmapNeedsPois(layer);\n              if (this.heatmapCancelToken instanceof Function) {\n                this.heatmapCancelToken(\"cancelled\");\n                this.heatmapCancelToken = null;\n              }\n              layer.getSource().refresh();\n            }\n          });\n        });\n      }\n    },\n    recomputeHeatmaps() {\n      this.isRecomputingHeatmap = true;\n      let queryParam = \"\";\n      this.unCalculatedDataUploadIds.forEach((id, index) => {\n        if (id && index !== this.unCalculatedDataUploadIds.length - 1) {\n          queryParam += `id=${id}&`;\n        } else if (id) {\n          queryParam += `id=${id}`;\n        }\n      });\n      ApiService.get_(`/heatmap/compute/data-upload?${queryParam}`)\n        .then(() => {\n          this.toggleSnackbar({\n            type: this.appColor.primary,\n            message: this.$t(\"heatmaps.heatmapComputedSuccessfully\"),\n            state: true,\n            timeout: 3000\n          });\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: this.appColor.primary,\n            message: this.$t(\"heatmaps.heatmapComputationFailed\"),\n            state: true,\n            timeout: 3000\n          });\n        })\n        .finally(() => {\n          this.$store.dispatch(`app/${GET_USER_CUSTOM_DATA}`);\n          this.isRecomputingHeatmap = false;\n        });\n    },\n    checkIfHeatmapNeedsPois(layer) {\n      this.toggleSnackbar({ state: false });\n      if (\n        this.selectedPoisOnlyKeys.length === 0 &&\n        this.heatmapsWithPois.includes(layer.get(\"name\"))\n      ) {\n        this.toggleSnackbar({\n          type: \"error\",\n          message: this.$t(\"map.snackbarMessages.selectAmenities\"),\n          state: true,\n          timeout: 4000\n        });\n        return true;\n      } else {\n        return false;\n      }\n    },\n    isHeatmapDisabled(layer) {\n      if (\n        this.heatmapsWithPois.includes(layer.get(\"name\")) &&\n        this.unCalculatedDataUploadIds.length > 0\n      ) {\n        layer.setVisible(false);\n        layer.set(\"showOptions\", false);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  watch: {\n    selectedPoisOnlyKeys() {\n      this.refreshAllVisibleHeatmaps();\n    },\n    activeScenario() {\n      this.refreshAllVisibleHeatmaps();\n    },\n    \"calculationMode.active\": function() {\n      this.refreshAllVisibleHeatmaps();\n    }\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.v-expansion-panel__header {\n  cursor: default;\n}\n.active-icon {\n  color: #30c2ff;\n}\n\n.expansion-panel__container--active {\n  background-color: white !important;\n}\n\n.checkbox >>> .v-input__control {\n  height: 25px;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 0px;\n}\n\n.v-expansion-panel-content >>> .v-input__slot {\n  margin-bottom: 0px;\n}\n\n.layer-row >>> .v-expansion-panel-header {\n  cursor: auto;\n}\n</style>\n"],"sourceRoot":"src/components/heatmaps"}]}