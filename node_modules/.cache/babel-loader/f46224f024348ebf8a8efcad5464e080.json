{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/InLegend.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/InLegend.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LegendRenderer from \"../../../../utils/LegendRenderer\";\nimport Legend from \"../controls/Legend\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../../EventBus\";\nexport default {\n  props: [\"layer\"],\n  mixins: [Legend],\n  data: function data() {\n    return {\n      legendRerenderOnActiveMode: 0\n    };\n  },\n  watch: {\n    //Rerendering the legend part when calculationModes value changes\n    \"calculationMode.active\": function calculationModeActive() {\n      this.legendRerenderOnActiveMode += 1;\n    }\n  },\n  methods: {\n    isLayerAttributeVisible: function isLayerAttributeVisible(layer, ith) {\n      //Checkbox will be checked or unchecked based on layer attribute visibility.\n      var name = layer.get(\"name\");\n      var attributeStyle = this.filterStylesOnActiveModeByLayerName(name).rules[ith].filter[0];\n\n      if (!attributeStyle) {\n        return false;\n      }\n\n      return true;\n    },\n    attributeLevelRendering: function attributeLevelRendering(filter, layer, ith) {\n      //Display or hide layer on attribute level.\n      var name = layer.get(\"name\");\n      var styleFilter = this.filterStylesOnActiveModeByLayerName(name).rules[ith];\n\n      if (styleFilter.filter[0]) {\n        styleFilter.filter[0] = \"\";\n      } else {\n        styleFilter.filter[0] = filter;\n      }\n\n      layer.getSource().changed();\n      layer.set(\"attributeDisplayStatusKey\", layer.get(\"attributeDisplayStatusKey\") + 1);\n    },\n    renderLegend: function renderLegend(layer, index) {\n      var _this = this;\n\n      //Render individual legend on attribue level.\n      setTimeout(function () {\n        var name = layer.get(\"name\");\n        var styleObj = _this.vectorTileStyles;\n        var styleTranslation = _this.vectorTileStyles[name].translation;\n        var currentLocale = _this.$i18n.locale;\n\n        if (styleObj[name] && styleObj[name].format === \"geostyler\") {\n          var el = _this.$refs[\"legend-vector-\".concat(name + index)];\n\n          el = el ? el : [];\n\n          if (el.length) {\n            if (Array.isArray(el) && el.length > 0) {\n              el = el[0];\n            } // Remove existing svg elements on update (Workaround)\n\n\n            if (el && el.childNodes.length > 0) {\n              el.removeChild(el.childNodes[0]);\n            }\n\n            var style = _this.filterStylesOnActiveModeByLayerName(name);\n\n            var iStyle = style.rules[index];\n            var renderer = new LegendRenderer({\n              maxColumnWidth: 260,\n              overflow: \"auto\",\n              styles: [{\n                name: style.name,\n                rules: [iStyle]\n              }],\n              size: [260, 300],\n              translation: {\n                styleTranslation: styleTranslation,\n                currentLocale: currentLocale\n              }\n            });\n            renderer.render(el);\n          }\n        }\n      }, 100);\n    },\n    getWMSLayerNames: function getWMSLayerNames(layer) {\n      var layerUrl = layer.getSource().getUrl();\n      var layerKeyNames = new URL(layerUrl).searchParams.get(\"LAYERS\");\n      return layerKeyNames || \"\";\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    EventBus.$on(\"ol-interaction-activated\", function (type) {\n      if (type === \"languageChange\") {\n        _this2.legendRerenderOnActiveMode += 1;\n      }\n    });\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appColor: \"appColor\",\n    appConfig: \"appConfig\",\n    calculationMode: \"calculationMode\"\n  }), {}, mapFields(\"map\", {\n    vectorTileStyles: \"vectorTileStyles\",\n    vectorTileStylesCopy: \"vectorTileStylesCopy\"\n  }))\n};",{"version":3,"sources":["InLegend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,OAAA,cAAA;AACA,OAAA,MAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,SAAA,QAAA,iBAAA;AACA,SAAA,QAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,OAAA,CADA;AAEA,EAAA,MAAA,EAAA,CAAA,MAAA,CAFA;AAGA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,0BAAA,EAAA;AADA,KAAA;AAAA,GAHA;AAMA,EAAA,KAAA,EAAA;AACA;AACA,8BAAA,iCAAA;AACA,WAAA,0BAAA,IAAA,CAAA;AACA;AAJA,GANA;AAYA,EAAA,OAAA,EAAA;AACA,IAAA,uBADA,mCACA,KADA,EACA,GADA,EACA;AACA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,UAAA,cAAA,GAAA,KAAA,mCAAA,CAAA,IAAA,EACA,KADA,CACA,GADA,EACA,MADA,CACA,CADA,CAAA;;AAEA,UAAA,CAAA,cAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,aAAA,IAAA;AACA,KAVA;AAWA,IAAA,uBAXA,mCAWA,MAXA,EAWA,KAXA,EAWA,GAXA,EAWA;AACA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,UAAA,WAAA,GAAA,KAAA,mCAAA,CAAA,IAAA,EAAA,KAAA,CACA,GADA,CAAA;;AAGA,UAAA,WAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA;AACA,QAAA,WAAA,CAAA,MAAA,CAAA,CAAA,IAAA,EAAA;AACA,OAFA,MAEA;AACA,QAAA,WAAA,CAAA,MAAA,CAAA,CAAA,IAAA,MAAA;AACA;;AACA,MAAA,KAAA,CAAA,SAAA,GAAA,OAAA;AACA,MAAA,KAAA,CAAA,GAAA,CACA,2BADA,EAEA,KAAA,CAAA,GAAA,CAAA,2BAAA,IAAA,CAFA;AAIA,KA3BA;AA4BA,IAAA,YA5BA,wBA4BA,KA5BA,EA4BA,KA5BA,EA4BA;AAAA;;AACA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,YAAA,QAAA,GAAA,KAAA,CAAA,gBAAA;AACA,YAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,WAAA;AACA,YAAA,aAAA,GAAA,KAAA,CAAA,KAAA,CAAA,MAAA;;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,IAAA,QAAA,CAAA,IAAA,CAAA,CAAA,MAAA,KAAA,WAAA,EAAA;AACA,cAAA,EAAA,GAAA,KAAA,CAAA,KAAA,yBAAA,IAAA,GAAA,KAAA,EAAA;;AACA,UAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;AACA,cAAA,EAAA,CAAA,MAAA,EAAA;AACA,gBAAA,KAAA,CAAA,OAAA,CAAA,EAAA,KAAA,EAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,EAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACA,aAHA,CAIA;;;AACA,gBAAA,EAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,EAAA,CAAA,WAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA;;AACA,gBAAA,KAAA,GAAA,KAAA,CAAA,mCAAA,CAAA,IAAA,CAAA;;AACA,gBAAA,MAAA,GAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA;AACA,gBAAA,QAAA,GAAA,IAAA,cAAA,CAAA;AACA,cAAA,cAAA,EAAA,GADA;AAEA,cAAA,QAAA,EAAA,MAFA;AAGA,cAAA,MAAA,EAAA,CACA;AACA,gBAAA,IAAA,EAAA,KAAA,CAAA,IADA;AAEA,gBAAA,KAAA,EAAA,CAAA,MAAA;AAFA,eADA,CAHA;AASA,cAAA,IAAA,EAAA,CAAA,GAAA,EAAA,GAAA,CATA;AAUA,cAAA,WAAA,EAAA;AAAA,gBAAA,gBAAA,EAAA,gBAAA;AAAA,gBAAA,aAAA,EAAA;AAAA;AAVA,aAAA,CAAA;AAaA,YAAA,QAAA,CAAA,MAAA,CAAA,EAAA;AACA;AACA;AACA,OAlCA,EAkCA,GAlCA,CAAA;AAmCA,KAjEA;AAkEA,IAAA,gBAlEA,4BAkEA,KAlEA,EAkEA;AACA,UAAA,QAAA,GAAA,KAAA,CAAA,SAAA,GAAA,MAAA,EAAA;AACA,UAAA,aAAA,GAAA,IAAA,GAAA,CAAA,QAAA,EAAA,YAAA,CAAA,GAAA,CAAA,QAAA,CAAA;AACA,aAAA,aAAA,IAAA,EAAA;AACA;AAtEA,GAZA;AAoFA,EAAA,OApFA,qBAoFA;AAAA;;AACA,IAAA,QAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,UAAA,IAAA,EAAA;AACA,UAAA,IAAA,KAAA,gBAAA,EAAA;AACA,QAAA,MAAA,CAAA,0BAAA,IAAA,CAAA;AACA;AACA,KAJA;AAKA,GA1FA;AA2FA,EAAA,QAAA,oBACA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA,UADA;AAEA,IAAA,SAAA,EAAA,WAFA;AAGA,IAAA,eAAA,EAAA;AAHA,GAAA,CADA,MAMA,SAAA,CAAA,KAAA,EAAA;AACA,IAAA,gBAAA,EAAA,kBADA;AAEA,IAAA,oBAAA,EAAA;AAFA,GAAA,CANA;AA3FA,CAAA","sourcesContent":["<template>\n  <div>\n    <div\n      v-if=\"\n        layer.get('legendGraphicUrls') &&\n          Array.isArray(layer.get('legendGraphicUrls'))\n      \"\n    >\n      <template\n        v-for=\"(legendUrl, indexLegendUrls) in layer.get('legendGraphicUrls')\"\n      >\n        <div :key=\"indexLegendUrls\">\n          <img\n            crossorigin=\"anonymous\"\n            style=\"max-width:100%; padding-left:50px;\"\n            :src=\"legendUrl\"\n            class=\"white--text mt-0 pt-0\"\n          />\n        </div>\n      </template>\n    </div>\n    <div v-else>\n      <div :key=\"legendRerenderOnActiveMode\">\n        <div\n          v-if=\"\n            vectorTileStyles[layer.get('name')] &&\n              ['VECTOR', 'GEOBUF', 'MVT'].includes(\n                layer.get('type').toUpperCase()\n              )\n          \"\n          style=\"text-align: center; padding: 20px;\"\n          :key=\"layer.get('layerTreeKey')\"\n        >\n          <div v-if=\"vectorTileStyles[layer.get('name')]\">\n            <v-layout\n              v-for=\"(rule, ith) in filterStylesOnActiveModeByLayerName(\n                layer.get('name')\n              ).rules\"\n              :key=\"ith\"\n              class=\"pl-2\"\n              row\n              wrap\n              align-center\n            >\n              <v-flex xs1>\n                <v-simple-checkbox\n                  style=\"width: 27px;height: 38px;\"\n                  :ripple=\"false\"\n                  v-if=\"\n                    filterStylesOnActiveModeByLayerName(layer.get('name')).rules\n                      .length > 1\n                  \"\n                  :key=\"layer.get('attributeDisplayStatusKey')\"\n                  :color=\"appColor.secondary\"\n                  :value=\"isLayerAttributeVisible(layer, ith)\"\n                  @input=\"\n                    attributeLevelRendering(\n                      vectorTileStylesCopy[layer.get('name')].style.rules[ith]\n                        .filter[0],\n                      layer,\n                      ith\n                    )\n                  \"\n                >\n                </v-simple-checkbox>\n              </v-flex>\n              <v-flex xs11>\n                <span\n                  class=\"justify-start\"\n                  style=\"padding-right: 50px\"\n                  :ref=\"`legend-vector-${layer.get('name') + ith}`\"\n                  v-html=\"renderLegend(layer, ith)\"\n                >\n                </span>\n              </v-flex>\n            </v-layout>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LegendRenderer from \"../../../../utils/LegendRenderer\";\nimport Legend from \"../controls/Legend\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../../EventBus\";\n\nexport default {\n  props: [\"layer\"],\n  mixins: [Legend],\n  data: () => ({\n    legendRerenderOnActiveMode: 0\n  }),\n  watch: {\n    //Rerendering the legend part when calculationModes value changes\n    \"calculationMode.active\": function() {\n      this.legendRerenderOnActiveMode += 1;\n    }\n  },\n  methods: {\n    isLayerAttributeVisible(layer, ith) {\n      //Checkbox will be checked or unchecked based on layer attribute visibility.\n      const name = layer.get(\"name\");\n      const attributeStyle = this.filterStylesOnActiveModeByLayerName(name)\n        .rules[ith].filter[0];\n      if (!attributeStyle) {\n        return false;\n      }\n      return true;\n    },\n    attributeLevelRendering(filter, layer, ith) {\n      //Display or hide layer on attribute level.\n      const name = layer.get(\"name\");\n      const styleFilter = this.filterStylesOnActiveModeByLayerName(name).rules[\n        ith\n      ];\n      if (styleFilter.filter[0]) {\n        styleFilter.filter[0] = \"\";\n      } else {\n        styleFilter.filter[0] = filter;\n      }\n      layer.getSource().changed();\n      layer.set(\n        \"attributeDisplayStatusKey\",\n        layer.get(\"attributeDisplayStatusKey\") + 1\n      );\n    },\n    renderLegend(layer, index) {\n      //Render individual legend on attribue level.\n      setTimeout(() => {\n        const name = layer.get(\"name\");\n        const styleObj = this.vectorTileStyles;\n        let styleTranslation = this.vectorTileStyles[name].translation;\n        const currentLocale = this.$i18n.locale;\n        if (styleObj[name] && styleObj[name].format === \"geostyler\") {\n          let el = this.$refs[`legend-vector-${name + index}`];\n          el = el ? el : [];\n          if (el.length) {\n            if (Array.isArray(el) && el.length > 0) {\n              el = el[0];\n            }\n            // Remove existing svg elements on update (Workaround)\n            if (el && el.childNodes.length > 0) {\n              el.removeChild(el.childNodes[0]);\n            }\n            const style = this.filterStylesOnActiveModeByLayerName(name);\n            let iStyle = style.rules[index];\n            const renderer = new LegendRenderer({\n              maxColumnWidth: 260,\n              overflow: \"auto\",\n              styles: [\n                {\n                  name: style.name,\n                  rules: [iStyle]\n                }\n              ],\n              size: [260, 300],\n              translation: { styleTranslation, currentLocale }\n            });\n\n            renderer.render(el);\n          }\n        }\n      }, 100);\n    },\n    getWMSLayerNames(layer) {\n      const layerUrl = layer.getSource().getUrl();\n      const layerKeyNames = new URL(layerUrl).searchParams.get(\"LAYERS\");\n      return layerKeyNames || \"\";\n    }\n  },\n  created() {\n    EventBus.$on(\"ol-interaction-activated\", type => {\n      if (type === \"languageChange\") {\n        this.legendRerenderOnActiveMode += 1;\n      }\n    });\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    })\n  }\n};\n</script>\n"],"sourceRoot":"src/components/viewer/ol/controls"}]}