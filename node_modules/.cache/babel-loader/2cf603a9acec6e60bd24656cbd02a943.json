{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerOrder/LayerOrder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerOrder/LayerOrder.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport draggable from \"vuedraggable\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport StyleDialog from \"../changeStyle/StyleDialog.vue\";\nimport { EventBus } from \"../../../EventBus\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  props: [\"map\", \"translate\", \"toggleLayerOptions\", \"changeLayerOpacity\"],\n  data: function data() {\n    return {\n      allLayers: [],\n      currentItem: {\n        showOptions: false,\n        name: \"\"\n      },\n      styleDialogKey: 0,\n      styleDialogStatus: false\n    };\n  },\n  components: {\n    draggable: draggable,\n    InLegend: InLegend,\n    StyleDialog: StyleDialog\n  },\n  computed: _objectSpread({\n    getVisibleLayers: {\n      //Get visible layers\n      get: function get() {\n        return this.allLayers.filter(function (layer) {\n          return layer.getVisible() === true && ![\"basemap\", \"heatmap\"].includes(layer.get(\"group\"));\n        });\n      },\n      set: function set() {\n        //Sort layers in decreasing order based on zIndex\n        this.sortLayerArray(this.allLayers);\n      }\n    }\n  }, mapGetters(\"app\", {\n    appColor: \"appColor\"\n  })),\n  created: function created() {\n    //Get list of all map layers\n    this.allLayers = this.map.getLayers().getArray().filter(function (l) {\n      return l.get(\"type\") && l.get(\"displayInLayerList\") !== false;\n    });\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    EventBus.$on(\"updateStyleDialogStatusForLayerOrder\", function (value) {\n      _this.styleDialogStatus = value;\n    });\n  },\n  methods: {\n    openStyleDialog: function openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n\n      if (this.currentItem && this.currentItem.get(\"name\") !== item.get(\"name\")) {\n        this.styleDialogKey += 1;\n      }\n\n      if (this.currentItem && this.currentItem.get(\"layerTreeKey\") >= 0 && this.currentItem.get(\"name\") !== item.get(\"name\")) {\n        this.currentItem.set(\"layerTreeKey\", this.currentItem.get(\"layerTreeKey\") + 1);\n      }\n\n      this.currentItem = item;\n    },\n    sortLayerArray: function sortLayerArray(layers) {\n      //Sort layer arrays based on zIndex\n      layers.sort(function (a, b) {\n        return a.layerOrderKey > b.layerOrderKey ? -1 : 1;\n      });\n    },\n    toggleLayerVisibility: function toggleLayerVisibility(layer) {\n      layer.setVisible(!layer.getVisible());\n\n      if (layer.get(\"showOptions\")) {\n        layer.set(\"showOptions\", false);\n      }\n    },\n    onMove: function onMove(_ref) {\n      var draggedContext = _ref.draggedContext,\n          relatedContext = _ref.relatedContext;\n      //Get dragged and target layers on item move event\n      var draggedElement = draggedContext.element;\n      var relatedElement = relatedContext.element;\n      this.reOrderLayers(draggedElement, relatedElement);\n    },\n    reOrderLayers: function reOrderLayers(draggedElement, relatedElement) {\n      //Reorder the layers\n      var start = draggedElement.layerOrderKey;\n      var end = relatedElement.layerOrderKey;\n\n      if (start > end) {\n        for (var i = 0; i < this.allLayers.length; i++) {\n          if (this.allLayers[i].layerOrderKey >= end && this.allLayers[i].layerOrderKey < start) {\n            this.allLayers[i].mapLayer.setZIndex(this.allLayers[i].layerOrderKey + 1);\n            this.allLayers[i].layerOrderKey += 1;\n          }\n        }\n      } else if (start < end) {\n        for (var _i = 0; _i < this.allLayers.length; _i++) {\n          if (this.allLayers[_i].layerOrderKey > start && this.allLayers[_i].layerOrderKey <= end) {\n            this.allLayers[_i].mapLayer.setZIndex(this.allLayers[_i].layerOrderKey - 1);\n\n            this.allLayers[_i].layerOrderKey -= 1;\n          }\n        }\n      }\n\n      draggedElement.mapLayer.setZIndex(end);\n      draggedElement.layerOrderKey = end;\n    }\n  }\n};",{"version":3,"sources":["LayerOrder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA,OAAA,SAAA,MAAA,cAAA;AACA,OAAA,QAAA;AACA,OAAA,WAAA;AACA,SAAA,QAAA;AACA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,KAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,oBAAA,CADA;AAEA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,WAAA,EAAA;AACA,QAAA,WAAA,EAAA,KADA;AAEA,QAAA,IAAA,EAAA;AAFA,OAFA;AAMA,MAAA,cAAA,EAAA,CANA;AAOA,MAAA,iBAAA,EAAA;AAPA,KAAA;AAAA,GAFA;AAWA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,QAAA,EAAA,QAFA;AAGA,IAAA,WAAA,EAAA;AAHA,GAXA;AAgBA,EAAA,QAAA;AACA,IAAA,gBAAA,EAAA;AACA;AACA,MAAA,GAAA,EAAA,eAAA;AACA,eAAA,KAAA,SAAA,CAAA,MAAA,CACA,UAAA,KAAA;AAAA,iBACA,KAAA,CAAA,UAAA,OAAA,IAAA,IACA,CAAA,CAAA,SAAA,EAAA,SAAA,EAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAFA;AAAA,SADA,CAAA;AAKA,OARA;AASA,MAAA,GAAA,EAAA,eAAA;AACA;AACA,aAAA,cAAA,CAAA,KAAA,SAAA;AACA;AAZA;AADA,KAeA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAAA,CAfA,CAhBA;AAmCA,EAAA,OAnCA,qBAmCA;AACA;AACA,SAAA,SAAA,GAAA,KAAA,GAAA,CACA,SADA,GAEA,QAFA,GAGA,MAHA,CAGA,UAAA,CAAA;AAAA,aAAA,CAAA,CAAA,GAAA,CAAA,MAAA,KAAA,CAAA,CAAA,GAAA,CAAA,oBAAA,MAAA,KAAA;AAAA,KAHA,CAAA;AAIA,GAzCA;AA0CA,EAAA,OA1CA,qBA0CA;AAAA;;AACA,IAAA,QAAA,CAAA,GAAA,CAAA,sCAAA,EAAA,UAAA,KAAA,EAAA;AACA,MAAA,KAAA,CAAA,iBAAA,GAAA,KAAA;AACA,KAFA;AAGA,GA9CA;AA+CA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,IADA,EACA;AACA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,sCAAA,EAAA,KAAA;AACA,WAAA,iBAAA,GAAA,IAAA;;AACA,UACA,KAAA,WAAA,IACA,KAAA,WAAA,CAAA,GAAA,CAAA,MAAA,MAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAFA,EAGA;AACA,aAAA,cAAA,IAAA,CAAA;AACA;;AACA,UACA,KAAA,WAAA,IACA,KAAA,WAAA,CAAA,GAAA,CAAA,cAAA,KAAA,CADA,IAEA,KAAA,WAAA,CAAA,GAAA,CAAA,MAAA,MAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAHA,EAIA;AACA,aAAA,WAAA,CAAA,GAAA,CACA,cADA,EAEA,KAAA,WAAA,CAAA,GAAA,CAAA,cAAA,IAAA,CAFA;AAIA;;AACA,WAAA,WAAA,GAAA,IAAA;AACA,KAtBA;AAuBA,IAAA,cAvBA,0BAuBA,MAvBA,EAuBA;AACA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,eAAA,CAAA,CAAA,aAAA,GAAA,CAAA,CAAA,aAAA,GAAA,CAAA,CAAA,GAAA,CAAA;AAAA,OAAA;AACA,KA1BA;AA2BA,IAAA,qBA3BA,iCA2BA,KA3BA,EA2BA;AACA,MAAA,KAAA,CAAA,UAAA,CAAA,CAAA,KAAA,CAAA,UAAA,EAAA;;AACA,UAAA,KAAA,CAAA,GAAA,CAAA,aAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,GAAA,CAAA,aAAA,EAAA,KAAA;AACA;AACA,KAhCA;AAiCA,IAAA,MAjCA,wBAiCA;AAAA,UAAA,cAAA,QAAA,cAAA;AAAA,UAAA,cAAA,QAAA,cAAA;AACA;AACA,UAAA,cAAA,GAAA,cAAA,CAAA,OAAA;AACA,UAAA,cAAA,GAAA,cAAA,CAAA,OAAA;AACA,WAAA,aAAA,CAAA,cAAA,EAAA,cAAA;AACA,KAtCA;AAuCA,IAAA,aAvCA,yBAuCA,cAvCA,EAuCA,cAvCA,EAuCA;AACA;AACA,UAAA,KAAA,GAAA,cAAA,CAAA,aAAA;AACA,UAAA,GAAA,GAAA,cAAA,CAAA,aAAA;;AACA,UAAA,KAAA,GAAA,GAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cACA,KAAA,SAAA,CAAA,CAAA,EAAA,aAAA,IAAA,GAAA,IACA,KAAA,SAAA,CAAA,CAAA,EAAA,aAAA,GAAA,KAFA,EAGA;AACA,iBAAA,SAAA,CAAA,CAAA,EAAA,QAAA,CAAA,SAAA,CACA,KAAA,SAAA,CAAA,CAAA,EAAA,aAAA,GAAA,CADA;AAGA,iBAAA,SAAA,CAAA,CAAA,EAAA,aAAA,IAAA,CAAA;AACA;AACA;AACA,OAZA,MAYA,IAAA,KAAA,GAAA,GAAA,EAAA;AACA,aAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AACA,cACA,KAAA,SAAA,CAAA,EAAA,EAAA,aAAA,GAAA,KAAA,IACA,KAAA,SAAA,CAAA,EAAA,EAAA,aAAA,IAAA,GAFA,EAGA;AACA,iBAAA,SAAA,CAAA,EAAA,EAAA,QAAA,CAAA,SAAA,CACA,KAAA,SAAA,CAAA,EAAA,EAAA,aAAA,GAAA,CADA;;AAGA,iBAAA,SAAA,CAAA,EAAA,EAAA,aAAA,IAAA,CAAA;AACA;AACA;AACA;;AACA,MAAA,cAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA;AACA,MAAA,cAAA,CAAA,aAAA,GAAA,GAAA;AACA;AAtEA;AA/CA,CAAA","sourcesContent":["<template>\n  <div>\n    <v-expansion-panels readonly>\n      <draggable\n        v-model=\"getVisibleLayers\"\n        :move=\"onMove\"\n        style=\"width:100%;\"\n        handle=\".handle\"\n      >\n        <v-expansion-panel\n          v-for=\"(layer, i) in getVisibleLayers\"\n          :key=\"i\"\n          class=\"layer-row\"\n          :class=\"{\n            'expansion-panel__container--active':\n              layer.get('showOptions') === true\n          }\"\n        >\n          <v-expansion-panel-header expand-icon=\"\" v-slot=\"{}\" class=\"handle\">\n            <v-layout row class=\"pl-1\" wrap align-center>\n              <v-flex class=\"checkbox\" xs1>\n                <v-simple-checkbox\n                  :color=\"appColor.primary\"\n                  :value=\"layer.getVisible()\"\n                  @input=\"toggleLayerVisibility(layer)\"\n                ></v-simple-checkbox>\n              </v-flex>\n              <v-flex xs10 class=\"light-text\">\n                <h4 class=\"pl-2\">\n                  {{ translate(\"layerName\", layer.get(\"name\")) }}\n                </h4>\n              </v-flex>\n              <v-flex xs1>\n                <v-icon\n                  v-show=\"\n                    layer.getVisible() && layer.get('name') !== 'study_area'\n                  \"\n                  small\n                  style=\"width: 30px; height: 30px;\"\n                  v-html=\"\n                    layer.get('showOptions') === false\n                      ? 'fas fa-chevron-down'\n                      : 'fas fa-chevron-up'\n                  \"\n                  :class=\"{\n                    'expansion-panel__container--active':\n                      layer.get('showOptions') === true\n                  }\"\n                  @click.stop=\"toggleLayerOptions(layer)\"\n                ></v-icon>\n              </v-flex>\n            </v-layout>\n          </v-expansion-panel-header>\n          <v-card\n            class=\"pt-2\"\n            v-show=\"\n              layer.get('showOptions') === true &&\n                layer.get('name') !== 'study_area'\n            \"\n            style=\"background-color: white;\"\n            transition=\"slide-y-reverse-transition\"\n          >\n            <InLegend\n              v-if=\"layer.get('showOptions') === true\"\n              :layer=\"layer\"\n            ></InLegend>\n            <v-layout row style=\"width:100%;padding-left: 10px;\">\n              <v-flex\n                class=\"xs2\"\n                style=\"text-align:center;\"\n                v-if=\"\n                  ['VECTORTILE', 'VECTOR', 'MVT'].includes(\n                    layer.get('type').toUpperCase()\n                  )\n                \"\n              >\n                <v-icon\n                  v-ripple\n                  style=\"color:#B0B0B0;margin-top:3px;cursor:pointer\"\n                  dark\n                  @click=\"openStyleDialog(item)\"\n                >\n                  fas fa-cog\n                </v-icon>\n              </v-flex>\n              <v-flex\n                :class=\"{\n                  xs10:\n                    ['VECTORTILE', 'VECTOR', 'MVT'].includes(\n                      layer.get('type').toUpperCase()\n                    ) == true,\n                  xs12: false\n                }\"\n              >\n                <v-slider\n                  :value=\"layer.getOpacity()\"\n                  class=\"mx-5\"\n                  step=\"0.05\"\n                  min=\"0\"\n                  max=\"1\"\n                  @input=\"changeLayerOpacity($event, layer)\"\n                  :label=\"$t('layerTree.settings.transparency')\"\n                  :color=\"appColor.secondary\"\n                ></v-slider>\n              </v-flex>\n            </v-layout>\n          </v-card>\n        </v-expansion-panel>\n        <v-divider></v-divider>\n      </draggable>\n    </v-expansion-panels>\n    <span v-if=\"styleDialogStatus\">\n      <StyleDialog\n        :item=\"currentItem\"\n        :translate=\"translate\"\n        :key=\"styleDialogKey\"\n        :styleDialogStatus=\"styleDialogStatus\"\n        @styleDialogStatus=\"styleDialogStatus = $event\"\n      >\n      </StyleDialog>\n    </span>\n  </div>\n</template>\n\n<script>\nimport draggable from \"vuedraggable\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport StyleDialog from \"../changeStyle/StyleDialog.vue\";\nimport { EventBus } from \"../../../EventBus\";\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  props: [\"map\", \"translate\", \"toggleLayerOptions\", \"changeLayerOpacity\"],\n  data: () => ({\n    allLayers: [],\n    currentItem: {\n      showOptions: false,\n      name: \"\"\n    },\n    styleDialogKey: 0,\n    styleDialogStatus: false\n  }),\n  components: {\n    draggable,\n    InLegend,\n    StyleDialog\n  },\n  computed: {\n    getVisibleLayers: {\n      //Get visible layers\n      get: function() {\n        return this.allLayers.filter(\n          layer =>\n            layer.getVisible() === true &&\n            ![\"basemap\", \"heatmap\"].includes(layer.get(\"group\"))\n        );\n      },\n      set: function() {\n        //Sort layers in decreasing order based on zIndex\n        this.sortLayerArray(this.allLayers);\n      }\n    },\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  },\n  created() {\n    //Get list of all map layers\n    this.allLayers = this.map\n      .getLayers()\n      .getArray()\n      .filter(l => l.get(\"type\") && l.get(\"displayInLayerList\") !== false);\n  },\n  mounted() {\n    EventBus.$on(\"updateStyleDialogStatusForLayerOrder\", value => {\n      this.styleDialogStatus = value;\n    });\n  },\n  methods: {\n    openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.styleDialogKey += 1;\n      }\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"layerTreeKey\") >= 0 &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.currentItem.set(\n          \"layerTreeKey\",\n          this.currentItem.get(\"layerTreeKey\") + 1\n        );\n      }\n      this.currentItem = item;\n    },\n    sortLayerArray(layers) {\n      //Sort layer arrays based on zIndex\n      layers.sort((a, b) => (a.layerOrderKey > b.layerOrderKey ? -1 : 1));\n    },\n    toggleLayerVisibility(layer) {\n      layer.setVisible(!layer.getVisible());\n      if (layer.get(\"showOptions\")) {\n        layer.set(\"showOptions\", false);\n      }\n    },\n    onMove({ draggedContext, relatedContext }) {\n      //Get dragged and target layers on item move event\n      let draggedElement = draggedContext.element;\n      let relatedElement = relatedContext.element;\n      this.reOrderLayers(draggedElement, relatedElement);\n    },\n    reOrderLayers(draggedElement, relatedElement) {\n      //Reorder the layers\n      let start = draggedElement.layerOrderKey;\n      let end = relatedElement.layerOrderKey;\n      if (start > end) {\n        for (let i = 0; i < this.allLayers.length; i++) {\n          if (\n            this.allLayers[i].layerOrderKey >= end &&\n            this.allLayers[i].layerOrderKey < start\n          ) {\n            this.allLayers[i].mapLayer.setZIndex(\n              this.allLayers[i].layerOrderKey + 1\n            );\n            this.allLayers[i].layerOrderKey += 1;\n          }\n        }\n      } else if (start < end) {\n        for (let i = 0; i < this.allLayers.length; i++) {\n          if (\n            this.allLayers[i].layerOrderKey > start &&\n            this.allLayers[i].layerOrderKey <= end\n          ) {\n            this.allLayers[i].mapLayer.setZIndex(\n              this.allLayers[i].layerOrderKey - 1\n            );\n            this.allLayers[i].layerOrderKey -= 1;\n          }\n        }\n      }\n      draggedElement.mapLayer.setZIndex(end);\n      draggedElement.layerOrderKey = end;\n    }\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.v-expansion-panel__header {\n  cursor: default;\n}\n.active-icon {\n  color: #30c2ff;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 0px;\n}\n\n.v-expansion-panel-content >>> .v-input__slot {\n  margin-bottom: 0px;\n}\n\n.checkbox >>> .v-input__control {\n  height: 25px;\n}\n\n.layer-row >>> .v-expansion-panel-header {\n  cursor: auto;\n}\n</style>\n"],"sourceRoot":"src/components/layers/layerOrder"}]}