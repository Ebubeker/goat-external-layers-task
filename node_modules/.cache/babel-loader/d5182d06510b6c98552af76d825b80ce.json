{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerTree/LayerTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerTree/LayerTree.vue","mtime":1657878091784},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../EventBus\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport LayerOrder from \"../layerOrder/LayerOrder\";\nimport StyleDialog from \"../changeStyle/StyleDialog\";\nimport ImportExternalLayers from \"../importLayers/ImportExternalLayers\"; //added by ebubeker\n\nimport TileLayer from \"ol/layer/Tile\";\nimport TileWMS from \"ol/source/TileWMS\";\nexport default {\n  mixins: [Mapable, Legend],\n  data: function data() {\n    return {\n      // layerGroups: {},\n      layerGroupsArr: [],\n      currentItem: null,\n      styleDialogKey: 0,\n      styleDialogStatus: false\n    };\n  },\n  components: {\n    LayerOrder: LayerOrder,\n    InLegend: InLegend,\n    StyleDialog: StyleDialog,\n    ImportExternalLayers: ImportExternalLayers\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appConfig: \"appConfig\",\n    appColor: \"appColor\"\n  }), {}, mapFields(\"app\", {\n    layerTabIndex: \"layerTabIndex\"\n  })),\n  mounted: function mounted() {\n    var _this = this;\n\n    EventBus.$on(\"updateStyleDialogStatusForLayerTree\", function (value) {\n      _this.styleDialogStatus = value;\n    });\n  },\n  watch: {\n    layerGroupsArr: function layerGroupsArr(value) {\n      console.log(value);\n    }\n  },\n  methods: {\n    // Layer Import feature\n    layerInfoSubmited: function layerInfoSubmited(data) {\n      var resultsfromThis = this.appConfig.layer_groups.map(function (lay) {\n        return Object.keys(lay)[0];\n      });\n\n      if (!resultsfromThis.includes(\"external_imports\")) {\n        var currentAppConfig = this.appConfig;\n        var imports = {\n          external_imports: {\n            children: [],\n            icon: \"fas fa-cloud-arrow-up\"\n          }\n        };\n        currentAppConfig.layer_groups.push(imports);\n        this.$store.commit(\"app/setAppConfig\", currentAppConfig);\n      }\n\n      var newLayer = new TileLayer({\n        source: new TileWMS({\n          url: data.url,\n          params: {\n            layers: data.name\n          },\n          attribution: data.title\n        }),\n        group: \"external_imports\",\n        name: data.title\n      });\n      this.map.addLayer(newLayer);\n      this.layerGroupsArr[4].children.push(newLayer);\n    },\n    // XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     * and registers the current map layers.\n     */\n    updateLayerGroups: function updateLayerGroups() {\n      var _this2 = this;\n\n      var layerGroups = this.appConfig.layer_groups;\n      layerGroups.reverse().forEach(function (lg) {\n        var layerGroupName = Object.keys(lg)[0];\n\n        if (layerGroupName !== \"heatmap\") {\n          var _newObject = {\n            name: layerGroupName,\n            children: []\n          };\n\n          _this2.layerGroupsArr.push(_newObject);\n        }\n      });\n      var newObject = {\n        name: \"external_imports\",\n        children: []\n      };\n      this.layerGroupsArr.push(newObject);\n      this.map.getLayers().getArray().forEach(function (layer) {\n        if (layer.get(\"group\") && layer.get(\"group\") !== \"heatmap\") {\n          _this2.layerGroupsArr.forEach(function (lay, idx) {\n            if (lay.name === layer.get(\"group\")) {\n              _this2.layerGroupsArr[idx].children.push(layer);\n            }\n          });\n        }\n      });\n    },\n    onMapBound: function onMapBound() {\n      this.updateLayerGroups();\n    },\n    openStyleDialog: function openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n\n      if (this.currentItem && this.currentItem.get(\"name\") !== item.get(\"name\")) {\n        this.styleDialogKey += 1;\n      }\n\n      if (this.currentItem && this.currentItem.get(\"layerTreeKey\") >= 0 && this.currentItem.get(\"name\") !== item.get(\"name\")) {\n        this.currentItem.set(\"layerTreeKey\", this.currentItem.get(\"layerTreeKey\") + 1);\n      }\n\n      this.currentItem = item;\n    },\n    toggleLayerVisibility: function toggleLayerVisibility(layer, group) {\n      var currentState = layer.getVisible(); //Turn off other layers if layer group is background layers.\n\n      if (layer.get(\"group\") === \"basemap\") {\n        group.forEach(function (layer) {\n          layer.setVisible(false);\n        });\n      }\n\n      layer.setVisible(!currentState);\n\n      if (layer.getVisible() === false) {\n        layer.set(\"showOptions\", false);\n      } else {\n        layer.set(\"showOptions\", true);\n      }\n\n      EventBus.$emit(\"toggleLayerVisiblity\", layer);\n    },\n    toggleLayerOptions: function toggleLayerOptions(layer) {\n      layer.set(\"showOptions\", !layer.get(\"showOptions\"));\n    },\n    changeLayerOpacity: function changeLayerOpacity(value, layer) {\n      layer.setOpacity(value);\n    },\n    getLayerGroupIcon: function getLayerGroupIcon(group) {\n      var layerGroupConf = this.appConfig.layer_groups.filter(function (g) {\n        return g[group];\n      });\n      return layerGroupConf[0][group].icon || \"fas fa-layer-group\";\n    },\n    translate: function translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      var canTranslate = this.$te(\"map.\".concat(type, \".\").concat(key));\n\n      if (canTranslate) {\n        return this.$t(\"map.\".concat(type, \".\").concat(key));\n      } else {\n        return key;\n      }\n    }\n  }\n};",{"version":3,"sources":["LayerTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-divider></v-divider>\n    <vue-scroll>\n      <v-tabs-items v-model=\"layerTabIndex\">\n        <v-tab-item :eager=\"true\">\n          <v-expansion-panels accordion multiple>\n            <v-expansion-panel\n              v-for=\"(layerGroupValue, idx) in layerGroupsArr\"\n              :key=\"idx\"\n              expand\n            >\n              <v-expansion-panel-header\n                class=\"elevation-2\"\n                expand-icon=\"\"\n                v-slot=\"{ open }\"\n              >\n                <v-layout row wrap align-center>\n                  <v-flex xs1>\n                    <v-icon small>{{\n                      getLayerGroupIcon(layerGroupValue.name)\n                    }}</v-icon>\n                  </v-flex>\n                  <v-flex xs10 class=\"light-text\" style=\"font-size:medium;\">\n                    <div>\n                      <b>{{ translate(\"layerGroup\", layerGroupValue.name) }}</b>\n                    </div>\n                  </v-flex>\n                  <v-flex xs1>\n                    <v-icon v-html=\"open ? 'remove' : 'add'\"></v-icon>\n                  </v-flex>\n                </v-layout>\n              </v-expansion-panel-header>\n              <v-expansion-panel-content>\n                <!-- LAYERS -->\n                <v-expansion-panels readonly>\n                  <v-expansion-panel\n                    v-for=\"(layer, i) in layerGroupValue.children\"\n                    :key=\"i\"\n                    class=\"layer-row\"\n                    :class=\"{\n                      'expansion-panel__container--active':\n                        layer.get('showOptions') === true\n                    }\"\n                  >\n                    <v-expansion-panel-header expand-icon=\"\" v-slot=\"{}\">\n                      <v-layout row class=\"pl-1\" wrap align-center>\n                        <v-flex class=\"checkbox\" xs1>\n                          <v-simple-checkbox\n                            :color=\"appColor.secondary\"\n                            :value=\"layer.getVisible()\"\n                            @input=\"\n                              toggleLayerVisibility(\n                                layer,\n                                layerGroupValue.children\n                              )\n                            \"\n                          ></v-simple-checkbox>\n                        </v-flex>\n                        <v-flex xs10 class=\"light-text\">\n                          <h4 class=\"pl-2\">\n                            {{ translate(\"layerName\", layer.get(\"name\")) }}\n                          </h4>\n                          <b>{{ i }}</b>\n                        </v-flex>\n                        <v-flex xs1>\n                          <v-icon\n                            v-show=\"\n                              layer.getVisible() &&\n                                layer.get('name') !== 'study_area'\n                            \"\n                            small\n                            style=\"width: 30px; height: 30px;\"\n                            v-html=\"\n                              layer.get('showOptions')\n                                ? 'fas fa-chevron-down'\n                                : 'fas fa-chevron-up'\n                            \"\n                            :class=\"{\n                              'expansion-panel__container--active': layer.get(\n                                'showOptions'\n                              )\n                            }\"\n                            @click.stop=\"toggleLayerOptions(layer)\"\n                          ></v-icon>\n                        </v-flex>\n                      </v-layout>\n                    </v-expansion-panel-header>\n                    <v-card\n                      class=\"pt-2\"\n                      v-show=\"\n                        layer.getVisible() &&\n                          layer.get('showOptions') === true &&\n                          layer.get('name') !== 'study_area'\n                      \"\n                      style=\"background-color: white;\"\n                      transition=\"slide-y-reverse-transition\"\n                    >\n                      <InLegend :layer=\"layer\"></InLegend>\n                      <v-layout row style=\"width:100%;padding-left: 10px;\">\n                        <v-flex\n                          class=\"xs2\"\n                          style=\"text-align:center;\"\n                          v-if=\"\n                            ['VECTORTILE', 'VECTOR', 'MVT', 'GEOBUF'].includes(\n                              layer.get('type').toUpperCase()\n                            )\n                          \"\n                        >\n                          <v-icon\n                            v-ripple\n                            style=\"color:#B0B0B0;margin-top:3px;cursor:pointer\"\n                            dark\n                            @click=\"openStyleDialog(layer)\"\n                          >\n                            fas fa-cog\n                          </v-icon>\n                        </v-flex>\n                        <v-flex\n                          :class=\"{\n                            xs10:\n                              [\n                                'VECTORTILE',\n                                'VECTOR',\n                                'MVT',\n                                'GEOBUF'\n                              ].includes(layer.get('type').toUpperCase()) ==\n                              true,\n                            xs12: false\n                          }\"\n                        >\n                          <v-slider\n                            :value=\"layer.getOpacity()\"\n                            class=\"mx-5\"\n                            step=\"0.05\"\n                            min=\"0\"\n                            max=\"1\"\n                            @input=\"changeLayerOpacity($event, layer)\"\n                            :label=\"$t('layerTree.settings.transparency')\"\n                            :color=\"appColor.secondary\"\n                          ></v-slider>\n                        </v-flex>\n                      </v-layout>\n                    </v-card>\n                  </v-expansion-panel>\n                </v-expansion-panels>\n                <!-- ---- -->\n              </v-expansion-panel-content>\n            </v-expansion-panel>\n          </v-expansion-panels>\n          <v-layout class=\"mt-5\" column align-center>\n            <ImportExternalLayers @getLayerInfo=\"layerInfoSubmited\" />\n          </v-layout>\n          <v-layout class=\"mt-5\" column align-center>\n            <p>\n              {{\n                layerGroupsArr[4].children[0] &&\n                  layerGroupsArr[4].children[0].get(\"name\")\n              }}\n            </p>\n          </v-layout>\n        </v-tab-item>\n        <v-tab-item :eager=\"true\">\n          <layer-order\n            :map=\"map\"\n            :translate=\"translate\"\n            :toggleLayerOptions=\"toggleLayerOptions\"\n            :changeLayerOpacity=\"changeLayerOpacity\"\n          ></layer-order>\n        </v-tab-item>\n      </v-tabs-items>\n    </vue-scroll>\n    <span v-if=\"styleDialogStatus\">\n      <style-dialog\n        :item=\"currentItem\"\n        :translate=\"translate\"\n        :key=\"styleDialogKey\"\n        :styleDialogStatus=\"styleDialogStatus\"\n      >\n      </style-dialog>\n    </span>\n  </v-flex>\n</template>\n\n<script>\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\n\nimport { EventBus } from \"../../../EventBus\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport LayerOrder from \"../layerOrder/LayerOrder\";\nimport StyleDialog from \"../changeStyle/StyleDialog\";\nimport ImportExternalLayers from \"../importLayers/ImportExternalLayers\";\n//added by ebubeker\nimport TileLayer from \"ol/layer/Tile\";\nimport TileWMS from \"ol/source/TileWMS\";\n\nexport default {\n  mixins: [Mapable, Legend],\n  data: () => ({\n    // layerGroups: {},\n    layerGroupsArr: [],\n    currentItem: null,\n    styleDialogKey: 0,\n    styleDialogStatus: false\n  }),\n  components: {\n    LayerOrder,\n    InLegend,\n    StyleDialog,\n    ImportExternalLayers\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appConfig: \"appConfig\",\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"app\", {\n      layerTabIndex: \"layerTabIndex\"\n    })\n  },\n  mounted() {\n    EventBus.$on(\"updateStyleDialogStatusForLayerTree\", value => {\n      this.styleDialogStatus = value;\n    });\n  },\n  watch: {\n    layerGroupsArr(value) {\n      console.log(value);\n    }\n  },\n  methods: {\n    // Layer Import feature\n    layerInfoSubmited(data) {\n      let resultsfromThis = this.appConfig.layer_groups.map(lay => {\n        return Object.keys(lay)[0];\n      });\n      if (!resultsfromThis.includes(\"external_imports\")) {\n        let currentAppConfig = this.appConfig;\n        let imports = {\n          external_imports: {\n            children: [],\n            icon: \"fas fa-cloud-arrow-up\"\n          }\n        };\n        currentAppConfig.layer_groups.push(imports);\n        this.$store.commit(\"app/setAppConfig\", currentAppConfig);\n      }\n\n      let newLayer = new TileLayer({\n        source: new TileWMS({\n          url: data.url,\n          params: {\n            layers: data.name\n          },\n          attribution: data.title\n        }),\n        group: \"external_imports\",\n        name: data.title\n      });\n\n      this.map.addLayer(newLayer);\n\n      this.layerGroupsArr[4].children.push(newLayer);\n    },\n\n    // XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     * and registers the current map layers.\n     */\n    updateLayerGroups() {\n      const layerGroups = this.appConfig.layer_groups;\n      layerGroups.reverse().forEach(lg => {\n        const layerGroupName = Object.keys(lg)[0];\n        if (layerGroupName !== \"heatmap\") {\n          let newObject = {\n            name: layerGroupName,\n            children: []\n          };\n          this.layerGroupsArr.push(newObject);\n        }\n      });\n      let newObject = {\n        name: \"external_imports\",\n        children: []\n      };\n      this.layerGroupsArr.push(newObject);\n\n      this.map\n        .getLayers()\n        .getArray()\n        .forEach(layer => {\n          if (layer.get(\"group\") && layer.get(\"group\") !== \"heatmap\") {\n            this.layerGroupsArr.forEach((lay, idx) => {\n              if (lay.name === layer.get(\"group\")) {\n                this.layerGroupsArr[idx].children.push(layer);\n              }\n            });\n          }\n        });\n    },\n    onMapBound() {\n      this.updateLayerGroups();\n    },\n    openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.styleDialogKey += 1;\n      }\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"layerTreeKey\") >= 0 &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.currentItem.set(\n          \"layerTreeKey\",\n          this.currentItem.get(\"layerTreeKey\") + 1\n        );\n      }\n      this.currentItem = item;\n    },\n    toggleLayerVisibility(layer, group) {\n      const currentState = layer.getVisible();\n      //Turn off other layers if layer group is background layers.\n      if (layer.get(\"group\") === \"basemap\") {\n        group.forEach(layer => {\n          layer.setVisible(false);\n        });\n      }\n      layer.setVisible(!currentState);\n      if (layer.getVisible() === false) {\n        layer.set(\"showOptions\", false);\n      } else {\n        layer.set(\"showOptions\", true);\n      }\n      EventBus.$emit(\"toggleLayerVisiblity\", layer);\n    },\n    toggleLayerOptions(layer) {\n      layer.set(\"showOptions\", !layer.get(\"showOptions\"));\n    },\n    changeLayerOpacity(value, layer) {\n      layer.setOpacity(value);\n    },\n    getLayerGroupIcon(group) {\n      const layerGroupConf = this.appConfig.layer_groups.filter(g => g[group]);\n      return layerGroupConf[0][group].icon || \"fas fa-layer-group\";\n    },\n    translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      const canTranslate = this.$te(`map.${type}.${key}`);\n      if (canTranslate) {\n        return this.$t(`map.${type}.${key}`);\n      } else {\n        return key;\n      }\n    }\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.v-expansion-panel__header {\n  cursor: default;\n}\n.active-icon {\n  color: #30c2ff;\n}\n\n.expansion-panel__container--active {\n  background-color: white !important;\n}\n\n.checkbox >>> .v-input__control {\n  height: 25px;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 0px;\n}\n\n.v-expansion-panel-content >>> .v-input__slot {\n  margin-bottom: 0px;\n}\n\n.layer-row >>> .v-expansion-panel-header {\n  cursor: auto;\n}\n</style>\n"],"sourceRoot":"src/components/layers/layerTree"}]}