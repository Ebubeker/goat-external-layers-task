{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js??ref--13-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/controllers/OlSelectController.js","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/controllers/OlSelectController.js","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js","mtime":1657636581253}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/get\";\nimport _inherits from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport DrawInteraction from \"ol/interaction/Draw\";\nimport { unByKey } from \"ol/Observable.js\";\nimport { fromCircle } from \"ol/geom/Polygon\";\nimport axios from \"axios\";\nimport ApiService from \"../services/api.service\";\nimport { getSelectStyle } from \"../style/OlStyleDefs\";\nimport { geometryToWKT } from \"../utils/MapUtils\";\nimport store from \"../store/modules/scenarios\";\nimport mapStore from \"../store/modules/map\";\nimport OlBaseController from \"./OlBaseController\";\nimport i18n from \"../../src/plugins/i18n\";\n/**\n * Class holding the OpenLayers related logic for the select tool.\n */\n\nvar OlSelectController =\n/*#__PURE__*/\nfunction (_OlBaseController) {\n  _inherits(OlSelectController, _OlBaseController);\n\n  function OlSelectController(map) {\n    _classCallCheck(this, OlSelectController);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OlSelectController).call(this, map));\n  }\n  /**\n   * Creates a vector layer for the selections and adds it to the\n   * map.\n   */\n\n\n  _createClass(OlSelectController, [{\n    key: \"createSelectionLayer\",\n    value: function createSelectionLayer() {\n      var style = getSelectStyle();\n\n      _get(_getPrototypeOf(OlSelectController.prototype), \"createLayer\", this).call(this, \"Select Layer\", style);\n    }\n    /**\n     * Creates and adds the necessary select interaction and adds it to the map.\n     */\n\n  }, {\n    key: \"addInteraction\",\n    value: function addInteraction(selectionType, selectedLayer, onSelectionStart, onSelectionEnd) {\n      if (selectionType === \"multiple\") {\n        var me = this; // cleanup possible old select interaction\n\n        if (me.select) {\n          me.clear();\n        }\n\n        var listener;\n        var sketch;\n        var select = new DrawInteraction({\n          source: me.source,\n          type: \"Circle\",\n          condition: function condition() {\n            if (me.circleRadius > 1000) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n        });\n        me.map.addInteraction(select);\n        me.createTooltip();\n        me.pointerMoveKey = me.map.on(\"pointermove\", me.onPointerMove.bind(me));\n        select.on(\"drawstart\", function (evt) {\n          //clear existing geometry\n          me.source.clear();\n          onSelectionStart(); // preserve sketch\n\n          sketch = evt.feature;\n          me.listener = sketch.getGeometry().on(\"change\", function (evt) {\n            var geom = evt.target;\n            var type = geom.getType();\n\n            if (type === \"Circle\") {\n              me.circleRadius = geom.getRadius().toFixed();\n            }\n          });\n        }, me);\n        select.on(\"drawend\", function (evt) {\n          var circle = evt.feature.getGeometry(); //Create polygon from circle geometry;\n\n          var circleAsPolygon = fromCircle(circle);\n          circleAsPolygon.transform(\"EPSG:3857\", \"EPSG:4326\");\n          var circleWkt = geometryToWKT(circleAsPolygon); // Request from origin table.\n\n          var promiseOriginTable = ApiService.get_(\"/scenarios/\".concat(store.state.activeScenario, \"/\").concat(selectedLayer[\"name\"], \"/features?intersect=\").concat(circleWkt, \"&return_type=geojson\"));\n          var requests = [promiseOriginTable];\n          mapStore.state.isMapBusy = true;\n          axios.all(requests).then(axios.spread(function (first) {\n            me.source.clear();\n            onSelectionEnd(first);\n          })).catch(function (error) {\n            me.source.clear();\n            throw new Error(error);\n          }).finally(function () {\n            mapStore.state.isMapBusy = false;\n          }); // unset sketch\n\n          sketch = null;\n          unByKey(listener);\n          me.circleRadius = 0;\n        }, me); // make select interaction available as member\n\n        me.select = select;\n      }\n    }\n    /**\n     * Event for updating the select tooltip\n     */\n\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(evt) {\n      var me = this;\n      var coordinate = evt.coordinate;\n      var innerHTML;\n\n      if (!me.circleRadius || me.circleRadius === 0) {\n        innerHTML = i18n.t(\"map.tooltips.clickToStartDrawingCircle\");\n      } else if (me.circleRadius > 1000) {\n        innerHTML = i18n.t(\"map.tooltips.maxCircleRadius\");\n      } else {\n        innerHTML = me.circleRadius + \" m\";\n      }\n\n      me.tooltipElement.innerHTML = innerHTML;\n      me.tooltip.setPosition(coordinate);\n    }\n    /**\n     * Removes the current select interaction.\n     */\n\n  }, {\n    key: \"removeInteraction\",\n    value: function removeInteraction() {\n      var me = this;\n\n      if (me.select) {\n        me.map.removeInteraction(me.select);\n      }\n\n      if (me.pointerMoveKey) {\n        unByKey(me.pointerMoveKey);\n      }\n\n      if (me.clearOverlays) {\n        me.clearOverlays();\n      }\n    }\n  }]);\n\n  return OlSelectController;\n}(OlBaseController);\n\nexport { OlSelectController as default };",{"version":3,"sources":["/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/controllers/OlSelectController.js"],"names":["DrawInteraction","unByKey","fromCircle","axios","ApiService","getSelectStyle","geometryToWKT","store","mapStore","OlBaseController","i18n","OlSelectController","map","style","selectionType","selectedLayer","onSelectionStart","onSelectionEnd","me","select","clear","listener","sketch","source","type","condition","circleRadius","addInteraction","createTooltip","pointerMoveKey","on","onPointerMove","bind","evt","feature","getGeometry","geom","target","getType","getRadius","toFixed","circle","circleAsPolygon","transform","circleWkt","promiseOriginTable","get_","state","activeScenario","requests","isMapBusy","all","then","spread","first","catch","error","Error","finally","coordinate","innerHTML","t","tooltipElement","tooltip","setPosition","removeInteraction","clearOverlays"],"mappings":"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","sourcesContent":["import DrawInteraction from \"ol/interaction/Draw\";\nimport { unByKey } from \"ol/Observable.js\";\nimport { fromCircle } from \"ol/geom/Polygon\";\n\nimport axios from \"axios\";\nimport ApiService from \"../services/api.service\";\n\nimport { getSelectStyle } from \"../style/OlStyleDefs\";\nimport { geometryToWKT } from \"../utils/MapUtils\";\n\nimport store from \"../store/modules/scenarios\";\nimport mapStore from \"../store/modules/map\";\nimport OlBaseController from \"./OlBaseController\";\nimport i18n from \"../../src/plugins/i18n\";\n/**\n * Class holding the OpenLayers related logic for the select tool.\n */\nexport default class OlSelectController extends OlBaseController {\n  constructor(map) {\n    super(map);\n  }\n\n  /**\n   * Creates a vector layer for the selections and adds it to the\n   * map.\n   */\n  createSelectionLayer() {\n    const style = getSelectStyle();\n    super.createLayer(\"Select Layer\", style);\n  }\n\n  /**\n   * Creates and adds the necessary select interaction and adds it to the map.\n   */\n  addInteraction(\n    selectionType,\n    selectedLayer,\n    onSelectionStart,\n    onSelectionEnd\n  ) {\n    if (selectionType === \"multiple\") {\n      const me = this;\n      // cleanup possible old select interaction\n      if (me.select) {\n        me.clear();\n      }\n\n      let listener;\n      let sketch;\n\n      const select = new DrawInteraction({\n        source: me.source,\n        type: \"Circle\",\n        condition: function() {\n          if (me.circleRadius > 1000) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      });\n\n      me.map.addInteraction(select);\n\n      me.createTooltip();\n      me.pointerMoveKey = me.map.on(\"pointermove\", me.onPointerMove.bind(me));\n\n      select.on(\n        \"drawstart\",\n        evt => {\n          //clear existing geometry\n          me.source.clear();\n          onSelectionStart();\n          // preserve sketch\n          sketch = evt.feature;\n          me.listener = sketch.getGeometry().on(\"change\", function(evt) {\n            const geom = evt.target;\n            const type = geom.getType();\n            if (type === \"Circle\") {\n              me.circleRadius = geom.getRadius().toFixed();\n            }\n          });\n        },\n        me\n      );\n\n      select.on(\n        \"drawend\",\n        evt => {\n          const circle = evt.feature.getGeometry();\n          //Create polygon from circle geometry;\n          const circleAsPolygon = fromCircle(circle);\n          circleAsPolygon.transform(\"EPSG:3857\", \"EPSG:4326\");\n          const circleWkt = geometryToWKT(circleAsPolygon);\n          // Request from origin table.\n          const promiseOriginTable = ApiService.get_(\n            `/scenarios/${store.state.activeScenario}/${selectedLayer[\"name\"]}/features?intersect=${circleWkt}&return_type=geojson`\n          );\n\n          const requests = [promiseOriginTable];\n          mapStore.state.isMapBusy = true;\n          axios\n            .all(requests)\n            .then(\n              axios.spread(first => {\n                me.source.clear();\n                onSelectionEnd(first);\n              })\n            )\n            .catch(error => {\n              me.source.clear();\n              throw new Error(error);\n            })\n            .finally(() => {\n              mapStore.state.isMapBusy = false;\n            });\n          // unset sketch\n          sketch = null;\n          unByKey(listener);\n          me.circleRadius = 0;\n        },\n        me\n      );\n\n      // make select interaction available as member\n      me.select = select;\n    }\n  }\n\n  /**\n   * Event for updating the select tooltip\n   */\n  onPointerMove(evt) {\n    const me = this;\n    const coordinate = evt.coordinate;\n    let innerHTML;\n    if (!me.circleRadius || me.circleRadius === 0) {\n      innerHTML = i18n.t(\"map.tooltips.clickToStartDrawingCircle\");\n    } else if (me.circleRadius > 1000) {\n      innerHTML = i18n.t(\"map.tooltips.maxCircleRadius\");\n    } else {\n      innerHTML = me.circleRadius + \" m\";\n    }\n    me.tooltipElement.innerHTML = innerHTML;\n    me.tooltip.setPosition(coordinate);\n  }\n\n  /**\n   * Removes the current select interaction.\n   */\n  removeInteraction() {\n    const me = this;\n\n    if (me.select) {\n      me.map.removeInteraction(me.select);\n    }\n    if (me.pointerMoveKey) {\n      unByKey(me.pointerMoveKey);\n    }\n    if (me.clearOverlays) {\n      me.clearOverlays();\n    }\n  }\n}\n"]}]}