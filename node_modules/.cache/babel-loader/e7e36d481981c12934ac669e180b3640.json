{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js??ref--13-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/factory/OlStyle.js","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/factory/OlStyle.js","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js","mtime":1657636581253}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\nimport OlStyleParser from \"geostyler-openlayers-parser\";\nimport { stylesRef } from \"../style/OlStyleDefs\";\nexport var OlStyleFactory = {\n  /**\n   * Returns an OpenLayers Style instance due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL Style instance\n   */\n  getInstance: function getInstance(styleConf) {\n    if (!styleConf) {\n      return;\n    } else if (styleConf.radius) {\n      return OlStyleFactory.createPointStyle(styleConf);\n    } else if (styleConf.fillColor) {\n      return OlStyleFactory.createPolygonStyle(styleConf);\n    } else if (styleConf.strokeColor || styleConf.strokeWidth) {\n      return OlStyleFactory.createLineStyle(styleConf);\n    }\n  },\n\n  /**\n   * Returns an OpenLayers style instance for point due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL style instance\n   */\n  createPointStyle: function createPointStyle(styleConf) {\n    return new Style({\n      image: new CircleStyle({\n        radius: styleConf.radius,\n        fill: OlStyleFactory.createFill(styleConf),\n        stroke: OlStyleFactory.createStroke(styleConf)\n      })\n    });\n  },\n\n  /**\n   * Returns an OpenLayers style instance for lines due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL style instance\n   */\n  createLineStyle: function createLineStyle(styleConf) {\n    var olStyle = new Style({\n      stroke: OlStyleFactory.createStroke(styleConf)\n    });\n    return olStyle;\n  },\n\n  /**\n   * Returns an OpenLayers style instance for polygons due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL style instance\n   */\n  createPolygonStyle: function createPolygonStyle(styleConf) {\n    var olStyle = OlStyleFactory.createLineStyle(styleConf);\n    olStyle.setFill(OlStyleFactory.createFill(styleConf));\n    return olStyle;\n  },\n\n  /**\n   * Creates an OL Stroke object due to given config.\n   *\n   * @param  {Object} styleConf Style config object\n   * @return {Stroke}           OL Stroke instance\n   */\n  createStroke: function createStroke(styleConf) {\n    return new Stroke({\n      color: styleConf.strokeColor,\n      width: styleConf.strokeWidth\n    });\n  },\n\n  /**\n   * Creates an OL Fill object due to given config.\n   *\n   * @param  {Object} styleConf Style config object\n   * @return {Fill}             OL Fill instance\n   */\n  createFill: function createFill(styleConf) {\n    return new Fill({\n      color: styleConf.fillColor\n    });\n  },\n\n  /**\n   * Main function for rendering styles using geostyler parser.\n   *\n   * @param  {Object} styleObj Style config\n   * @param  {String} layerName Layer name\n   * @return {Style}             OL Style instance\n   */\n  getOlStyle: function getOlStyle(styleObj, layerName) {\n    var styleFormat = styleObj.format;\n    var styleConf = styleObj.style;\n    var olStyle;\n\n    switch (styleFormat) {\n      case \"geostyler\":\n        {\n          styleObj.style.rules.forEach(function (rule) {\n            //Set default filer if no filter is found for rule\n            if (!rule.filter) {\n              rule.filter = [\"==\"];\n            } //Change Symbolizers outline color from rgba to hexa\n\n\n            if (rule.symbolizers[0].outlineColor === \"rgba(0, 0, 255, 0.0)\") {\n              rule.symbolizers[0].outlineColor = \"#0000FF00\";\n            }\n          });\n          var parser = new OlStyleParser();\n          olStyle = parser.writeStyle(styleConf);\n          break;\n        }\n\n      case \"custom\":\n        {\n          olStyle = stylesRef[layerName];\n          break;\n        }\n\n      default:\n        break;\n    }\n\n    return olStyle;\n  }\n};",{"version":3,"sources":["/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/factory/OlStyle.js"],"names":["Circle","CircleStyle","Fill","Stroke","Style","OlStyleParser","stylesRef","OlStyleFactory","getInstance","styleConf","radius","createPointStyle","fillColor","createPolygonStyle","strokeColor","strokeWidth","createLineStyle","image","fill","createFill","stroke","createStroke","olStyle","setFill","color","width","getOlStyle","styleObj","layerName","styleFormat","format","style","rules","forEach","rule","filter","symbolizers","outlineColor","parser","writeStyle"],"mappings":"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","sourcesContent":["import { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\nimport OlStyleParser from \"geostyler-openlayers-parser\";\nimport { stylesRef } from \"../style/OlStyleDefs\";\nexport const OlStyleFactory = {\n  /**\n   * Returns an OpenLayers Style instance due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL Style instance\n   */\n  getInstance(styleConf) {\n    if (!styleConf) {\n      return;\n    } else if (styleConf.radius) {\n      return OlStyleFactory.createPointStyle(styleConf);\n    } else if (styleConf.fillColor) {\n      return OlStyleFactory.createPolygonStyle(styleConf);\n    } else if (styleConf.strokeColor || styleConf.strokeWidth) {\n      return OlStyleFactory.createLineStyle(styleConf);\n    }\n  },\n\n  /**\n   * Returns an OpenLayers style instance for point due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL style instance\n   */\n  createPointStyle(styleConf) {\n    return new Style({\n      image: new CircleStyle({\n        radius: styleConf.radius,\n        fill: OlStyleFactory.createFill(styleConf),\n        stroke: OlStyleFactory.createStroke(styleConf)\n      })\n    });\n  },\n\n  /**\n   * Returns an OpenLayers style instance for lines due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL style instance\n   */\n  createLineStyle(styleConf) {\n    const olStyle = new Style({\n      stroke: OlStyleFactory.createStroke(styleConf)\n    });\n\n    return olStyle;\n  },\n\n  /**\n   * Returns an OpenLayers style instance for polygons due to given config.\n   *\n   * @param  {Object} styleConf  Style config object\n   * @return {Style}             OL style instance\n   */\n  createPolygonStyle(styleConf) {\n    let olStyle = OlStyleFactory.createLineStyle(styleConf);\n    olStyle.setFill(OlStyleFactory.createFill(styleConf));\n\n    return olStyle;\n  },\n\n  /**\n   * Creates an OL Stroke object due to given config.\n   *\n   * @param  {Object} styleConf Style config object\n   * @return {Stroke}           OL Stroke instance\n   */\n  createStroke(styleConf) {\n    return new Stroke({\n      color: styleConf.strokeColor,\n      width: styleConf.strokeWidth\n    });\n  },\n\n  /**\n   * Creates an OL Fill object due to given config.\n   *\n   * @param  {Object} styleConf Style config object\n   * @return {Fill}             OL Fill instance\n   */\n  createFill(styleConf) {\n    return new Fill({\n      color: styleConf.fillColor\n    });\n  },\n\n  /**\n   * Main function for rendering styles using geostyler parser.\n   *\n   * @param  {Object} styleObj Style config\n   * @param  {String} layerName Layer name\n   * @return {Style}             OL Style instance\n   */\n  getOlStyle(styleObj, layerName) {\n    const styleFormat = styleObj.format;\n    const styleConf = styleObj.style;\n    let olStyle;\n    switch (styleFormat) {\n      case \"geostyler\": {\n        styleObj.style.rules.forEach(rule => {\n          //Set default filer if no filter is found for rule\n          if (!rule.filter) {\n            rule.filter = [\"==\"];\n          }\n          //Change Symbolizers outline color from rgba to hexa\n          if (rule.symbolizers[0].outlineColor === \"rgba(0, 0, 255, 0.0)\") {\n            rule.symbolizers[0].outlineColor = \"#0000FF00\";\n          }\n        });\n        const parser = new OlStyleParser();\n        olStyle = parser.writeStyle(styleConf);\n        break;\n      }\n      case \"custom\": {\n        olStyle = stylesRef[layerName];\n        break;\n      }\n      default:\n        break;\n    }\n    return olStyle;\n  }\n};\n"]}]}