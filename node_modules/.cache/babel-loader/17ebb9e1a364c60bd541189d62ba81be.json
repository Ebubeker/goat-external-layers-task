{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/Isochrones.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/Isochrones.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//TODO: ADD STUDY AREA LAYER AND POIS FOR MULTIISOCHRONES\n//TODO: FIX MULTIISOCHRONE DATA TABLE WINDOW\nimport { Mapable } from \"../../mixins/Mapable\";\nimport { Isochrones } from \"../../mixins/Isochrones\";\nimport { KeyShortcuts } from \"../../mixins/KeyShortcuts\"; //Child components\n\nimport Download from \"./IsochronesDownload\";\nimport IsochroneColorPicker from \"./IsochroneColorPicker\";\nimport { getIsochroneStyle, getIsochroneNetworkStyle, isochroneOverlayStyle, studyAreaASelectStyle } from \"../../style/OlStyleDefs\"; //Store imports\n\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\"; //Ol imports\n\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { wktToFeature, geojsonToFeature, getPolygonArea, geometryToWKT, geobufToFeatures } from \"../../utils/MapUtils\";\nimport DrawInteraction from \"ol/interaction/Draw\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nimport { groupBy } from \"../../utils/Helpers\";\nimport { getDistance } from \"ol/sphere\";\nimport { toLonLat } from \"ol/proj\";\nimport { transform } from \"ol/proj.js\";\nimport { unByKey } from \"ol/Observable\"; //Other\n\nimport { EventBus } from \"../../EventBus\";\nimport ApiService from \"../../services/api.service\";\nimport axios from \"axios\";\nexport default {\n  mixins: [Mapable, Isochrones, KeyShortcuts],\n  data: function data() {\n    return {\n      interactionType: \"isochrone-interaction\",\n      isOptionsElVisible: true,\n      isIsochroneOptionsVisible: true,\n      speedRule: function speedRule(val) {\n        if (val < 1) return \"Please enter a number greater than 0\";\n        if (val > 40) return \"Please enter a number no greater than 40\";\n        return true;\n      },\n      timeRule: function timeRule(val) {\n        if (val < 1) return \"Please enter a number greater than 0\";\n        if (val > 20) return \"Please enter a number not greater than 20\";\n        return true;\n      },\n      isIsochroneBusy: false,\n      isIsochroneCalculationTypeElVisible: true,\n      isIsochroneStartElVisible: true,\n      isResultsElVisible: true,\n      downloadDialogState: false,\n      selectedCalculation: null,\n      isochroneColorPickerState: false,\n      activeCalculation: null,\n      // for color palette selection\n      activeCalculationMode: null,\n      // for color palette selection,\n      //Single Isochrone\n      mapClickListener: null,\n      // Multiisochrone\n      multiIsochronePoiCount: null,\n      drawPolygon: null,\n      mapPointerMoveKey: null,\n      maxAmenities: 150,\n      //TODO: make this a configurable setting\n      // Cancel Request Token\n      cancelRequestToken: null\n    };\n  },\n  components: {\n    download: Download,\n    IsochroneColorPicker: IsochroneColorPicker\n  },\n  computed: _objectSpread({}, mapGetters(\"isochrones\", {\n    calculations: \"calculations\"\n  }), {}, mapGetters(\"scenarios\", {\n    activeScenario: \"activeScenario\"\n  }), {}, mapGetters(\"map\", {\n    contextmenu: \"contextmenu\",\n    subStudyAreaLayer: \"subStudyAreaLayer\"\n  }), {}, mapGetters(\"app\", {\n    appColor: \"appColor\",\n    appConfig: \"appConfig\",\n    poisConfig: \"poisConfig\",\n    routingProfiles: \"routingProfiles\",\n    calculationMode: \"calculationMode\"\n  }), {}, mapGetters(\"poisaois\", {\n    poisAoisLayer: \"poisAoisLayer\",\n    poisAois: \"poisAois\",\n    selectedPois: \"selectedPois\",\n    selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n  }), {}, mapFields(\"isochrones\", {\n    type: \"type\",\n    time: \"time\",\n    speed: \"speed\",\n    steps: \"steps\",\n    routing: \"routing\",\n    calculations: \"calculations\",\n    isochroneLayer: \"isochroneLayer\",\n    isochroneOverlayLayer: \"isochroneOverlayLayer\",\n    isochroneRoadNetworkLayer: \"isochroneRoadNetworkLayer\",\n    multiIsochroneSelectionLayer: \"multiIsochroneSelectionLayer\",\n    multiIsochroneMethod: \"multiIsochroneMethod\",\n    colors: \"colors\",\n    defaultIsochroneColor: \"defaultIsochroneColor\",\n    scenarioIsochroneColor: \"scenarioIsochroneColor\",\n    selectedThematicData: \"selectedThematicData\"\n  }), {}, mapFields(\"map\", {\n    isMapBusy: \"isMapBusy\"\n  }), {\n    headersSingle: function headersSingle() {\n      return [{\n        text: this.$t(\"isochrones.results.table.visible\"),\n        value: \"visible\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.range\"),\n        align: \"center\",\n        value: \"range\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.area\"),\n        align: \"center\",\n        value: \"area\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.population\"),\n        align: \"center\",\n        value: \"population\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.legend\"),\n        value: \"legend\",\n        sortable: false\n      }];\n    },\n    headersMulti: function headersMulti() {\n      return [{\n        text: this.$t(\"isochrones.results.table.visible\"),\n        value: \"visible\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.range\"),\n        value: \"range\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.area\"),\n        value: \"area\",\n        sortable: false\n      }, {\n        text: this.$t(\"isochrones.results.table.legend\"),\n        value: \"legend\",\n        sortable: false\n      }];\n    },\n    getMultiIsochroneInfoLabelText: function getMultiIsochroneInfoLabelText() {\n      var text = \"\";\n\n      if (this.multiIsochronePoiCount === 0 && this.multiIsochroneMethod === \"study_area\") {\n        text = this.$t(\"isochrones.multiple.studyAreaInfoLabel\");\n      } else if (this.multiIsochronePoiCount === 0 && this.multiIsochroneMethod === \"draw\") {\n        text = this.$t(\"isochrones.multiple.drawPolygonInfoLabel\");\n      } else {\n        text = \"\".concat(this.$t(\"isochrones.multiple.amenityCount\"), \": \").concat(this.multiIsochronePoiCount, \" (\").concat(this.$t(\"isochrones.multiple.limit\"), \": \").concat(this.maxAmenities, \")\");\n      }\n\n      return text;\n    },\n    isMultiIsochroneCalculationDisabled: function isMultiIsochroneCalculationDisabled() {\n      if (this.multiIsochronePoiCount > 0 && this.multiIsochronePoiCount < this.maxAmenities) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }),\n  methods: _objectSpread({}, mapMutations(\"map\", {\n    toggleSnackbar: \"TOGGLE_SNACKBAR\",\n    startHelpTooltip: \"START_HELP_TOOLTIP\",\n    stopHelpTooltip: \"STOP_HELP_TOOLTIP\"\n  }), {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound: function onMapBound() {\n      this.createIsochroneLayer();\n      this.createIsochroneRoadNetworkLayer();\n      this.createIsochroneOverlayLayer();\n      this.createMultiIsochroneSelectionLayer();\n      this.setUpCtxMenu();\n      EventBus.$on(\"show-isochrone-window\", this.showIsochroneWindow);\n    },\n\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneLayer: function createIsochroneLayer() {\n      var style = getIsochroneStyle();\n      var vector = new VectorLayer({\n        name: \"isochrone_layer\",\n        displayInLegend: false,\n        zIndex: 6,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneLayer = vector;\n    },\n\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneRoadNetworkLayer: function createIsochroneRoadNetworkLayer() {\n      var style = getIsochroneNetworkStyle();\n      var vector = new VectorImageLayer({\n        name: \"isochrone_road_network_layer\",\n        displayInLegend: false,\n        zIndex: 5,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneRoadNetworkLayer = vector;\n    },\n\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneOverlayLayer: function createIsochroneOverlayLayer() {\n      var vector = new VectorImageLayer({\n        name: \"isochrone_overlayer\",\n        displayInLegend: false,\n        zIndex: 7,\n        source: new VectorSource(),\n        style: isochroneOverlayStyle\n      });\n      this.map.addLayer(vector);\n      this.isochroneOverlayLayer = vector;\n    },\n\n    /**\n     * Create multi isochrone selection layer\n     */\n    createMultiIsochroneSelectionLayer: function createMultiIsochroneSelectionLayer() {\n      var selectionSource = new VectorSource({\n        wrapX: false\n      });\n      var selectionLayer = new VectorLayer({\n        displayInLayerList: false,\n        zIndex: 5,\n        source: selectionSource,\n        style: studyAreaASelectStyle()\n      });\n      this.map.addLayer(selectionLayer);\n      this.multiIsochroneSelectionLayer = selectionLayer;\n    },\n\n    /**\n     * Register map click listener to calculate single isochrone.\n     */\n    registerMapClick: function registerMapClick() {\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n\n      if (this.type === \"single\") {\n        this.mapClickListener = this.map.once(\"singleclick\", this.onMapClick);\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickForIsochroneCalculation\"));\n      } else {\n        this.mapClickListener = this.map.on(\"singleclick\", this.onMapClick);\n      }\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n    },\n\n    /**\n     * Activate multi isochrone method.\n     */\n    activateMultiIsochrone: function activateMultiIsochrone(type) {\n      this.clear();\n      this.multiIsochroneMethod = type;\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      this.removeMultiIsochroneInteraction();\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n\n      if (this.multiIsochroneMethod === \"study_area\") {\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.studyAreaInfoLabel\"),\n          state: true,\n          timeout: 5000\n        }); //Study are method\n\n        this.pointerMoveKey = this.map.on(\"pointermove\", this.onMultiIsochronePointerMove);\n\n        if (!this.subStudyAreaLayer) {\n          this.toggleSnackbar({\n            type: \"error\",\n            message: \"Study area layer not available\",\n            state: true,\n            timeout: 10000\n          });\n          this.stop();\n          return;\n        }\n\n        this.subStudyAreaLayer.setVisible(true);\n        this.registerMapClick();\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      } else if (this.multiIsochroneMethod === \"draw\") {\n        var drawPolygon = new DrawInteraction({\n          type: \"Polygon\"\n        });\n        drawPolygon.on(\"drawstart\", this.onMultiIsochroneDrawStart);\n        drawPolygon.on(\"drawend\", this.onMultiIsochroneDrawEnd);\n        this.map.addInteraction(drawPolygon);\n        this.drawPolygon = drawPolygon;\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToStartDrawingPolygon\"));\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.drawPolygonInfoLabel\"),\n          state: true,\n          timeout: 10000\n        });\n      }\n    },\n\n    /**\n     * Draw interaction start event handler\n     */\n    onMultiIsochroneDrawStart: function onMultiIsochroneDrawStart() {\n      this.toggleSnackbar({\n        state: false\n      });\n      this.multiIsochronePoiCount = 0;\n      this.multiIsochroneSelectionLayer.getSource().clear();\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToContinueDrawing\"));\n    },\n\n    /**\n     * Draw interaction end event handler\n     */\n    onMultiIsochroneDrawEnd: function onMultiIsochroneDrawEnd(evt) {\n      if (evt.feature) {\n        this.multiIsochroneSelectionLayer.getSource().addFeature(evt.feature);\n      } else {\n        return;\n      }\n\n      if (this.selectedPois.length === 0) {\n        this.toggleSnackbar({\n          type: \"error\",\n          message: this.$t(\"map.snackbarMessages.selectAmenities\"),\n          state: true,\n          timeout: 10000\n        });\n        return;\n      }\n\n      this.countPois();\n      this.toggleSnackbar({\n        type: this.multiIsochronePoiCount > this.maxAmenities ? \"error\" : this.appColor.primary,\n        message: this.$t(\"isochrones.multiple.amenityCount\") + \" \".concat(this.multiIsochronePoiCount, \" / \").concat(this.maxAmenities),\n        state: true,\n        timeout: 0\n      });\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToStartDrawing\"));\n    },\n\n    /**\n     * Event for updating the edit help tooltip\n     */\n    onMultiIsochronePointerMove: function onMultiIsochronePointerMove(evt) {\n      var coordinate = evt.coordinate;\n\n      if (this.multiIsochroneMethod === \"study_area\" && this.multiIsochroneSelectionLayer.getSource().getFeaturesAtCoordinate(coordinate).length > 0) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToRemove\"));\n      } else if (this.multiIsochroneMethod === \"study_area\" && this.multiIsochroneSelectionLayer.getSource().getFeaturesAtCoordinate(coordinate).length == 0) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      }\n    },\n    removeMultiIsochroneInteraction: function removeMultiIsochroneInteraction() {\n      // cleanup possible old select interaction\n      if (this.drawPolygon) {\n        this.map.removeInteraction(this.drawPolygon);\n      }\n\n      if (this.mapClickListenerKey) {\n        unByKey(this.mapClickListenerKey);\n      }\n\n      if (this.pointerMoveKey) {\n        unByKey(this.pointerMoveKey);\n      }\n\n      this.multiIsochronePoiCount = 0;\n    },\n\n    /**\n     * Count pois that intersect with study area or polygon\n     */\n    countPois: function countPois() {\n      var _this = this;\n\n      this.multiIsochronePoiCount = 0;\n      var region = [];\n      var multiIsochroneSelectionLayerFeatures = this.multiIsochroneSelectionLayer.getSource().getFeatures();\n\n      if (multiIsochroneSelectionLayerFeatures.length === 0) {\n        this.toggleSnackbar({\n          type: this.multiIsochronePoiCount > this.maxAmenities || this.multiIsochronePoiCount === 0 ? \"error\" : this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.amenityCount\") + \" \".concat(this.multiIsochronePoiCount, \" (Limit: \").concat(this.maxAmenities, \")\"),\n          state: true,\n          timeout: 100000\n        });\n        return;\n      }\n\n      multiIsochroneSelectionLayerFeatures.forEach(function (feature) {\n        if (_this.multiIsochroneMethod === \"study_area\") {\n          region.push(feature.get(\"id\"));\n        } else {\n          var geometry = feature.getGeometry().clone().transform(\"EPSG:3857\", \"EPSG:4326\");\n          region.push(geometryToWKT(geometry));\n        }\n      });\n      ApiService.post(\"/isochrones/multi/count-pois\", {\n        region_type: this.multiIsochroneMethod,\n        region: region,\n        scenario_id: 0,\n        //TODO: Get scenario id\n        modus: this.calculationMode.active,\n        routing_profile: this.routing,\n        minutes: this.time,\n        speed: this.speed,\n        amenities: this.selectedPoisOnlyKeys\n      }).then(function (response) {\n        if (response.data) {\n          var poisNumber = response.data;\n          _this.multiIsochronePoiCount = poisNumber;\n\n          _this.toggleSnackbar({\n            type: _this.multiIsochronePoiCount > _this.maxAmenities || _this.multiIsochronePoiCount === 0 ? \"error\" : _this.appColor.primary,\n            message: _this.$t(\"isochrones.multiple.amenityCount\") + \" \".concat(_this.multiIsochronePoiCount, \" (Limit: \").concat(_this.maxAmenities, \")\"),\n            state: true,\n            timeout: 100000\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    //=============================================================\n\n    /**\n     * Handler for 'singleclick' on the map.\n     * Collects data and passes it to corresponding objects.\n     * @param  {ol/MapBrowserEvent} evt The OL event of 'singleclick' on the map\n     */\n    onMapClick: function onMapClick(evt) {\n      var _this2 = this;\n\n      var projection = this.map.getView().getProjection().getCode();\n      var coordinateWgs84 = transform(evt.coordinate, projection, \"EPSG:4326\");\n\n      if (this.multiIsochroneMethod === \"study_area\" && this.type === \"multiple\") {\n        //Check if there is a feature already selected at clicked coordinate,\n        //and if so, delete it and return.\n        var featureAtCoord = this.multiIsochroneSelectionLayer.getSource().getFeaturesAtCoordinate(evt.coordinate);\n\n        if (featureAtCoord.length > 0) {\n          this.multiIsochroneSelectionLayer.getSource().removeFeature(featureAtCoord[0]);\n          this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n          this.countPois();\n          return;\n        }\n\n        var subStudyAreaAtCoord = this.subStudyAreaLayer.getSource().getFeaturesAtCoordinate(evt.coordinate);\n\n        if (subStudyAreaAtCoord.length > 0) {\n          var feature = subStudyAreaAtCoord[0].clone();\n          this.multiIsochroneSelectionLayer.getSource().addFeature(feature);\n        }\n\n        this.countPois();\n      } else {\n        var payloadSingle = {\n          x: coordinateWgs84[0],\n          y: coordinateWgs84[1]\n        };\n        var calculationNumber = this.calculations.length + 1;\n        var isochroneMarkerFeature = new Feature({\n          geometry: new Point(evt.coordinate),\n          calculationNumber: calculationNumber\n        });\n        isochroneMarkerFeature.setId(\"isochrone_marker_\" + calculationNumber);\n        isochroneMarkerFeature.set(\"showLabel\", false);\n        this.isochroneLayer.getSource().addFeature(isochroneMarkerFeature);\n        this.calculateIsochrone(payloadSingle).then(function () {}).catch(function (error) {\n          if (error && error.message === \"cancelled\") {\n            return;\n          }\n\n          _this2.toggleSnackbar({\n            type: \"error\",\n            //success or error\n            message: _this2.$t(\"map.snackbarMessages.calculateIsochroneError\"),\n            state: true,\n            timeout: 2500\n          });\n        });\n        this.clear();\n      }\n    },\n\n    /**\n     * Calculate isochrone .\n     * Collects data and passes it to corresponding objects.\n     * @param  {Object} parameters The parameters for the isochrone calculation\n     * @param  {ol/Feature} isochroneMarkerFeature The starting point for the isochrone calculation (Optional)\n     */\n    calculateIsochrone: function calculateIsochrone(params) {\n      var _this3 = this;\n\n      var type = this.type;\n      var time = this.time;\n      var speed = this.speed;\n      var routing = this.routing;\n      var steps = this.steps;\n      var modus = this.calculationMode.active;\n      var scenario_id = this.activeScenario ? this.activeScenario : 0;\n      var baseParams = {\n        minutes: time,\n        speed: speed,\n        modus: modus,\n        n: steps,\n        routing_profile: routing,\n        scenario_id: scenario_id\n      };\n\n      var payload = _objectSpread({}, baseParams, {}, params);\n\n      this.isMapBusy = true;\n      this.isIsochroneBusy = true;\n      var axiosInstance = axios.create();\n      var CancelToken = axios.CancelToken;\n      return new Promise(function (resolve, reject) {\n        var endpoint = \"\";\n\n        if (type === \"single\") {\n          endpoint = \"single\";\n        } else if (type === \"multiple\") {\n          endpoint = \"multi/pois\";\n        }\n\n        axiosInstance.post(\"/isochrones/\".concat(endpoint), payload, {\n          cancelToken: new CancelToken(function (c) {\n            // An executor function receives a cancel function as a parameter\n            _this3.cancelRequestToken = c;\n          })\n        }).then(function (response) {\n          resolve(response);\n\n          if (response.data) {\n            var calculationData = [];\n            var calculationNumber = _this3.calculations.length + 1; //Order features based on id\n\n            var olFeatures = geojsonToFeature(response.data, {\n              dataProjection: \"EPSG:4326\",\n              featureProjection: \"EPSG:3857\"\n            });\n            olFeatures.sort(function (a, b) {\n              return a.get(\"step\") - b.get(\"step\");\n            });\n            olFeatures.forEach(function (feature, index) {\n              var isochroneCalculationUid = feature.get(\"isochrone_calculation_id\") || calculationNumber;\n              feature.setId(\"isochrone_feature_\" + isochroneCalculationUid + \"_\" + index);\n              var color = \"\";\n              var level = feature.get(\"step\");\n              var modus = feature.get(\"modus\") || modus;\n\n              if (modus === \"default\" || modus === \"comparison\") {\n                color = IsochroneUtils.getInterpolatedColor(1, 20, parseInt(level / 60), _this3.colors[_this3.defaultIsochroneColor]);\n              } else {\n                color = IsochroneUtils.getInterpolatedColor(1, 20, parseInt(level / 60), _this3.colors[_this3.scenarioIsochroneColor]);\n              }\n\n              var obj = {\n                id: feature.getId(),\n                type: feature.get(\"modus\") ? _this3.$t(\"isochrones.mode.\".concat(feature.get(\"modus\").toLowerCase())) : _this3.$t(\"isochrones.mode.\".concat(modus.toLowerCase())),\n                isochrone_calculation_id: isochroneCalculationUid,\n                modus: modus,\n                range: Math.round(feature.get(\"step\") / 60) + \" min\",\n                color: color,\n                area: getPolygonArea(feature.getGeometry()),\n                population: feature.get(\"reached_opportunities\").sum_pop || feature.get(\"reached_opportunities\").reached_population,\n                isVisible: true\n              };\n              feature.set(\"isVisible\", true);\n              feature.set(\"calculationNumber\", calculationNumber);\n              feature.set(\"color\", color);\n              feature.set(\"calculationType\", type);\n              feature.set(\"hoverColor\", \"\");\n              feature.set(\"showLabel\", false);\n              calculationData.push(obj);\n            });\n            var transformedData = {\n              id: calculationNumber,\n              calculationType: type.toLowerCase(),\n              calculationMode: baseParams.modus.replace(/'/g, \"\"),\n              // remove extra apostrophe in multi-isochrone\n              time: baseParams.minutes + \" min\",\n              speed: baseParams.speed + \" km/h\",\n              routing_profile: routing,\n              scenario_id: scenario_id,\n              isExpanded: true,\n              isVisible: true,\n              data: calculationData,\n              additionalData: {}\n            }; // Add default calculation color palette.\n\n            if (transformedData.calculationMode === \"default\") {\n              transformedData[\"defaultColorPalette\"] = _this3.defaultIsochroneColor;\n            } else if (transformedData.calculationMode === \"scenario\") {\n              transformedData[\"scenarioColorPalette\"] = _this3.scenarioIsochroneColor;\n            } else if (transformedData.calculationMode === \"comparison\") {\n              transformedData[\"defaultColorPalette\"] = _this3.defaultIsochroneColor;\n              transformedData[\"scenarioColorPalette\"] = _this3.scenarioIsochroneColor;\n            }\n\n            if (type === \"single\") {\n              //TODO: Get start point from response\n              var markerFeature = _this3.isochroneLayer.getSource().getFeatureById(\"isochrone_marker_\" + calculationNumber);\n\n              markerFeature.set(\"speed\", speed);\n              markerFeature.set(\"routing\", routing);\n              var startPointCoord = markerFeature.getGeometry().getCoordinates();\n              var wgs84Coord = toLonLat(startPointCoord); //Geocode\n\n              delete axiosInstance.defaults.headers.common[\"Authorization\"];\n              axiosInstance.get(\"https://api.locationiq.com/v1/reverse.php?key=ca068d7840bca4&lat=\".concat(wgs84Coord[1], \"&lon=\").concat(wgs84Coord[0], \"&format=json\")).then(function (response) {\n                if (response.status === 200 && response.data.display_name) {\n                  var address = response.data.display_name;\n                  transformedData.position = address;\n                }\n              }).catch(function () {\n                transformedData.position = \"Unknown\";\n              }).finally(function () {\n                _this3.isMapBusy = false;\n                _this3.isIsochroneBusy = false;\n\n                _this3.calculations.forEach(function (calculation) {\n                  calculation.isExpanded = false;\n                });\n\n                _this3.calculations.unshift(transformedData);\n\n                _this3.isochroneLayer.getSource().addFeatures(olFeatures);\n\n                _this3.toggleIsochroneWindow(true, transformedData);\n\n                _this3.isOptionsElVisible = false;\n              });\n            } else {\n              transformedData.position = \"Multi Isochrone Calculation\";\n\n              _this3.calculations.forEach(function (calculation) {\n                calculation.isExpanded = false;\n              });\n\n              transformedData.additionalData[\"features\"] = [];\n\n              _this3.multiIsochroneSelectionLayer.getSource().getFeatures().forEach(function (feature) {\n                var clonedFeature = feature.clone();\n                transformedData.additionalData[\"features\"].push(clonedFeature);\n              });\n\n              _this3.isochroneOverlayLayer.getSource().addFeatures(transformedData.additionalData[\"features\"]);\n\n              _this3.calculations.unshift(transformedData);\n\n              _this3.isochroneLayer.getSource().addFeatures(olFeatures);\n\n              _this3.toggleIsochroneWindow(true, transformedData);\n\n              _this3.isOptionsElVisible = false;\n              _this3.isMapBusy = false;\n              _this3.isIsochroneBusy = false;\n            }\n          }\n        }).catch(function (error) {\n          reject(error);\n        }).finally(function () {\n          _this3.multiIsochroneSelectionLayer.getSource().clear();\n\n          _this3.isMapBusy = false;\n          _this3.isIsochroneBusy = false;\n\n          _this3.clear();\n        });\n      });\n    },\n    calculateMultiIsochrone: function calculateMultiIsochrone() {\n      var regionType = this.multiIsochroneMethod;\n      var payload = {\n        region_type: regionType\n      };\n      var features = this.multiIsochroneSelectionLayer.getSource().getFeatures();\n\n      if (regionType === \"study_area\") {\n        // Get selected study areas ids\n        var region = [];\n        features.forEach(function (feature) {\n          region.push(feature.get(\"id\").toString());\n        });\n        payload.region = region;\n      } else {\n        // Get polygon geometry\n        var feature = features[0];\n        if (!feature) return;\n        var geometry = feature.getGeometry().clone().transform(\"EPSG:3857\", \"EPSG:4326\");\n\n        var _region = geometryToWKT(geometry);\n\n        payload.region = [_region];\n      }\n\n      payload.amenities = this.selectedPoisOnlyKeys;\n      this.calculateIsochrone(payload);\n    },\n    isCalculationActive: function isCalculationActive(calculation) {\n      if (!this.selectedThematicData) {\n        return false;\n      }\n\n      if (calculation.id === this.selectedThematicData.calculationId) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    groupedCalculationData: function groupedCalculationData(data) {\n      var groupedCalculations = groupBy(data, \"type\");\n      return groupedCalculations;\n    },\n\n    /**\n     * Configure right-click for isochrone.\n     */\n    setUpCtxMenu: function setUpCtxMenu() {\n      var _this4 = this;\n\n      if (this.contextmenu) {\n        this.contextmenu.on(\"beforeopen\", function (evt) {\n          var features = _this4.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: function layerFilter(candidate) {\n              if (candidate.get(\"name\") === \"isochrone_layer\") {\n                return true;\n              }\n\n              return false;\n            }\n          });\n\n          var closestFeature;\n          var closestDistance;\n          var clickedCoord = toLonLat(evt.coordinate);\n          features.forEach(function (f) {\n            if (f.get(\"calculationType\") === \"single\") {\n              var startingPoint = wktToFeature(f.get(\"starting_point\"));\n              var distance = getDistance(clickedCoord, startingPoint.getGeometry().getCoordinates());\n\n              if (!closestDistance || closestDistance > distance) {\n                closestDistance = distance;\n                closestFeature = f;\n              }\n            }\n          });\n\n          if (!closestFeature) {\n            closestFeature = features[0];\n          }\n\n          if (features.length > 0) {\n            _this4.contextmenu.extend([\"-\", // this is a separator\n            {\n              text: \"<i class=\\\"fa fa-trash fa-1x\\\" aria-hidden=\\\"true\\\"></i>&nbsp;&nbsp\".concat(_this4.$t(\"map.contextMenu.deleteIsochrone\")),\n              label: \"deleteIsochrone\",\n              callback: function callback() {\n                var calculation = _this4.calculations.filter(function (calculation) {\n                  return calculation.id === closestFeature.get(\"calculationNumber\");\n                });\n\n                if (calculation[0]) {\n                  _this4.deleteCalculation(calculation[0]);\n                }\n              }\n            }, // this is a separator\n            {\n              text: \"<i class=\\\"fas fa-redo fa-1x\\\" aria-hidden=\\\"true\\\"></i>&nbsp;&nbsp\".concat(_this4.$t(\"map.contextMenu.redoCalculation\")),\n              label: \"redoCalculation\",\n              callback: function callback() {\n                var calculation = _this4.calculations.filter(function (calculation) {\n                  return calculation.id === closestFeature.get(\"calculationNumber\");\n                });\n\n                if (calculation[0]) {\n                  _this4.removeCalculation(calculation[0]);\n\n                  if (calculation[0].calculationType === \"single\") {\n                    _this4.updatePosition({\n                      coordinate: wktToFeature(closestFeature.get(\"starting_point\")).getGeometry().getCoordinates(),\n                      placeName: \"\"\n                    });\n                  }\n\n                  _this4.calculateIsochrone(calculation[0]);\n                }\n              }\n            }]);\n          }\n        });\n      }\n    },\n    // ------------RESULTS----------\n    showIsochroneWindow: function showIsochroneWindow(calculationId) {\n      var calculation = this.calculations.filter(function (calculation) {\n        return calculation.id === calculationId;\n      });\n\n      if (calculation && calculation[0]) {\n        this.toggleIsochroneWindow(true, calculation[0]);\n      }\n    },\n    toggleIsochroneWindow: function toggleIsochroneWindow(state, calculation) {\n      if (state === false) {\n        this.isochroneLayer.getSource().getFeatures().forEach(function (f) {\n          f.set(\"highlightFeature\", false);\n        });\n        this.selectedThematicData = null;\n        return;\n      }\n\n      var features = IsochroneUtils.getCalculationFeatures(calculation, this.isochroneLayer);\n      features.forEach(function (f) {\n        f.set(\"highlightFeature\", true);\n      });\n      var pois = IsochroneUtils.getCalculationPoisObject(features);\n      var payload = {\n        calculationId: calculation.id,\n        calculationType: calculation.calculationType,\n        pois: pois\n      };\n\n      if (calculation.calculationType === \"multiple\") {\n        var multiIsochroneTableData = IsochroneUtils.getMultiIsochroneTableData(features);\n        payload.multiIsochroneTableData = multiIsochroneTableData;\n      }\n\n      this.selectedThematicData = payload;\n    },\n    // eslint-disable-next-line no-unused-vars\n    toggleIsochroneVisibility: function toggleIsochroneVisibility(feature, calculation, data) {\n      this.toggleIsochroneFeatureVisibility(feature);\n    },\n    toggleIsochroneFeatureVisibility: function toggleIsochroneFeatureVisibility(feature) {\n      var featureId = feature.id;\n      feature.isVisible = !feature.isVisible;\n\n      if (featureId) {\n        var isochroneFeature = this.isochroneLayer.getSource().getFeatureById(featureId);\n\n        if (isochroneFeature) {\n          isochroneFeature.set(\"isVisible\", feature.isVisible);\n        }\n      }\n    },\n    toggleDownloadDialog: function toggleDownloadDialog(calculation) {\n      this.downloadDialogState = true;\n      this.selectedCalculation = calculation;\n    },\n    toggleCalculation: function toggleCalculation(calculation) {\n      var _this5 = this;\n\n      var modus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var data = calculation.data;\n\n      if (modus) {\n        data = data.filter(function (calculation) {\n          return calculation.modus === modus;\n        });\n      }\n\n      var isIndeterminateState = this.getToggleCalculationCheckboxIndeterminateState(data);\n      data.forEach(function (isochrone) {\n        var featureId = isochrone.id;\n\n        var isochroneFeature = _this5.isochroneLayer.getSource().getFeatureById(featureId);\n\n        if (isochroneFeature) {\n          // Edge case for comparision\n          if (modus && isochroneFeature.get(\"modus\") === modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n\n          if (!modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n        }\n      });\n      var visibleCount = data.filter(function (isochrone) {\n        return isochrone.isVisible;\n      }).length;\n\n      if (visibleCount === 0) {\n        calculation.isVisible = false;\n      } else {\n        calculation.isVisible = true;\n      }\n    },\n    toggleRoadNetwork: function toggleRoadNetwork(state, calculation, type) {\n      var _this6 = this;\n\n      var roadNetworkSource = this.isochroneRoadNetworkLayer.getSource();\n\n      if (calculation.additionalData[type]) {\n        // Network is already fetched\n        var features = calculation.additionalData[type].features;\n\n        if (state === true) {\n          features.forEach(function (feature) {\n            roadNetworkSource.addFeature(feature);\n          });\n        } else {\n          features.forEach(function (feature) {\n            if (roadNetworkSource.hasFeature(feature)) {\n              roadNetworkSource.removeFeature(feature);\n            }\n          });\n        }\n      } else {\n        this.isMapBusy = true;\n        this.isIsochroneBusy = true; // Network is not fetched yet\n\n        ApiService.get_(\"/isochrones/network/\".concat(calculation.data[0].isochrone_calculation_id, \"/\").concat(type, \"?return_type=geobuf\"), {\n          responseType: \"arraybuffer\",\n          headers: {\n            Accept: \"application/pdf\"\n          }\n        }).then(function (response) {\n          if (response.data) {\n            var olFeatures = geobufToFeatures(response.data, {\n              dataProjection: \"EPSG:4326\",\n              featureProjection: \"EPSG:3857\"\n            });\n            calculation.additionalData[type] = {\n              features: olFeatures,\n              state: true\n            }; // Set isochrone calculation speed property for styling purpose\n\n            var speed = parseFloat(calculation.speed.split(\" \")[0]);\n            var lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n\n            var highestCostValue = 1200;\n            olFeatures.forEach(function (feature) {\n              feature.set(\"speed\", speed);\n              var cost = feature.get(\"cost\");\n              var modus = feature.get(\"modus\");\n              var color;\n\n              if (modus === \"default\") {\n                color = _this6.colors[calculation.defaultColorPalette];\n              } else if (modus === \"scenario\") {\n                color = _this6.colors[calculation.scenarioColorPalette];\n              }\n\n              var interpolatedColor = IsochroneUtils.getInterpolatedColor(lowestCostValue, highestCostValue, cost, color);\n              feature.set(\"color\", interpolatedColor);\n            });\n            roadNetworkSource.addFeatures(olFeatures);\n          }\n        }).catch(function (error) {\n          console.log(error);\n        }).finally(function () {\n          _this6.isMapBusy = false;\n          _this6.isIsochroneBusy = false;\n        });\n      }\n    },\n    toggleStudyArea: function toggleStudyArea(state, calculation) {\n      var _this7 = this;\n\n      var features = calculation.additionalData[\"features\"];\n      features.forEach(function (feature) {\n        var hasFeature = _this7.isochroneOverlayLayer.getSource().hasFeature(feature);\n\n        if (state === false && hasFeature) {\n          _this7.isochroneOverlayLayer.getSource().removeFeature(feature);\n        } else if (state === true && !hasFeature) {\n          _this7.isochroneOverlayLayer.getSource().addFeature(feature);\n        }\n      });\n    },\n    getPaletteColor: function getPaletteColor(calculation, mode) {\n      var colorKey = \"\".concat(mode, \"ColorPalette\");\n      return Object.values(this.colors[calculation[colorKey]]).toString();\n    },\n    toggleColorPickerDialog: function toggleColorPickerDialog(calculation, mode) {\n      this.isochroneColorPickerState = true;\n      this.activeCalculation = calculation;\n      this.activeCalculationMode = mode;\n    },\n    getToggleCalculationCheckboxState: function getToggleCalculationCheckboxState(calculationData) {\n      var countVisibleFeatures = calculationData.filter(function (o) {\n        return o.isVisible === true;\n      });\n\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n\n      return true;\n    },\n    getToggleCalculationCheckboxIndeterminateState: function getToggleCalculationCheckboxIndeterminateState(calculationData) {\n      var countVisibleFeatures = calculationData.filter(function (o) {\n        return o.isVisible === true;\n      });\n\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n\n      if (countVisibleFeatures.length === calculationData.length) {\n        return false;\n      }\n\n      return true;\n    },\n    getStudyAreaToggleSwitchState: function getStudyAreaToggleSwitchState(calculation) {\n      var _this8 = this;\n\n      var features = calculation.additionalData[\"features\"];\n      var hasFeature = false;\n      features.forEach(function (feature) {\n        if (_this8.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n          hasFeature = true;\n        }\n      });\n      return hasFeature;\n    },\n    // ------------CLEAR----------\n    deleteAll: function deleteAll() {\n      var _this9 = this;\n\n      this.$refs.confirm.open(this.$t(\"isochrones.deleteTitle\"), this.$t(\"isochrones.deleteAllMessage\"), {\n        color: this.appColor.primary\n      }).then(function (confirm) {\n        if (confirm) {\n          _this9.calculations.forEach(function (calculation) {\n            _this9.removeCalculation(calculation);\n          });\n        }\n      });\n    },\n    removeCalculation: function removeCalculation(calculation) {\n      var _this10 = this;\n\n      var id = calculation.id;\n\n      if (this.selectedThematicData && this.selectedThematicData.calculationId === id) {\n        this.selectedThematicData = null;\n      } else if (this.selectedThematicData) {\n        this.selectedThematicData.calculationId = this.selectedThematicData.calculationId - 1;\n      }\n\n      this.calculations = this.calculations.filter(function (calculation) {\n        return calculation.id != id;\n      });\n      this.calculations = this.calculations.map(function (calculation) {\n        if (calculation.id > id) {\n          calculation.id = calculation.id - 1;\n        }\n\n        return calculation;\n      });\n      var isochroneSource = this.isochroneLayer.getSource();\n      isochroneSource.getFeatures().forEach(function (isochroneFeature) {\n        var isochroneCalculationNr = isochroneFeature.get(\"calculationNumber\");\n\n        if (isochroneCalculationNr === id) {\n          isochroneSource.removeFeature(isochroneFeature);\n        }\n\n        if (isochroneCalculationNr > id) {\n          var updatedNr = isochroneCalculationNr - 1;\n\n          if (isochroneFeature.getGeometry().getType() === \"Point\") {\n            isochroneFeature.setId(\"isochrone_marker_\" + updatedNr);\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          } else {\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          }\n        }\n      });\n      var isochroneRoadNetworkLayerSource = this.isochroneRoadNetworkLayer.getSource();\n      Object.keys(calculation.additionalData).forEach(function (type) {\n        var features = calculation.additionalData[type].features;\n\n        if (isochroneRoadNetworkLayerSource && features) {\n          features.forEach(function (feature) {\n            isochroneRoadNetworkLayerSource.removeFeature(feature);\n          });\n        }\n      }); // Remove isochrone overlay features\n\n      if (Array.isArray(calculation.additionalData.features)) {\n        calculation.additionalData.features.forEach(function (feature) {\n          if (_this10.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n            _this10.isochroneOverlayLayer.getSource().removeFeature(feature);\n          }\n        });\n      }\n\n      this.isochroneOverlayLayer.changed();\n    },\n\n    /**\n     * Clears the map and ol interaction activity\n     */\n    stopIsochroneCalculation: function stopIsochroneCalculation() {\n      this.clear();\n\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n\n      this.toggleSnackbar({\n        type: \"error\",\n        message: this.$t(\"map.snackbarMessages.calculationCancelled\"),\n        state: true,\n        timeout: 4000\n      });\n    },\n    clear: function clear() {\n      if (this.mapClickListener) {\n        unByKey(this.mapClickListener);\n        this.mapClickListener = null;\n      }\n\n      this.toggleSnackbar({\n        state: false\n      });\n      this.removeMultiIsochroneInteraction();\n      this.multiIsochroneMethod = null;\n      this.multiIsochronePoiCount = 0;\n      this.stopHelpTooltip();\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.multiIsochroneSelectionLayer.getSource().clear();\n    },\n    stop: function stop() {\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n\n      this.clear();\n    }\n  }),\n  watch: {\n    routing: function routing() {\n      var _this11 = this;\n\n      this.appConfig.routing.forEach(function (routing) {\n        if (routing.type === _this11.routing) {\n          _this11.speed = routing.speed;\n        }\n      });\n    },\n    selectedPois: function selectedPois() {\n      if (this.multiIsochroneMethod) {\n        this.countPois();\n      }\n    },\n    type: function type(value) {\n      if (value === \"single\" && this.subStudyAreaLayer.getVisible()) {\n        this.subStudyAreaLayer.setVisible(false);\n      }\n    }\n  },\n  created: function created() {\n    // Set default routing\n    var defaultRouting = this.appConfig.routing[0];\n    this.routing = defaultRouting.type;\n    this.speed = defaultRouting.speed;\n  }\n};",{"version":3,"sources":["Isochrones.vue"],"names":[],"mappingsoC,CACA;;AACA,OAAA,QAAA;AACA,OAAA,oBAAA;AAEA,SACA,iBADA,EAEA,wBAFA,EAGA,qBAHA,EAIA,qBAJA,kC,CAOA;;AACA,SAAA,UAAA,EAAA,YAAA,QAAA,MAAA;AACA,SAAA,SAAA,QAAA,iBAAA,C,CAEA;;AACA,OAAA,YAAA,MAAA,kBAAA;AACA,OAAA,WAAA,MAAA,iBAAA;AACA,OAAA,gBAAA,MAAA,sBAAA;AACA,OAAA,OAAA,MAAA,YAAA;AACA,OAAA,KAAA,MAAA,eAAA;AAEA,SACA,YADA,EAEA,gBAFA,EAGA,cAHA,EAIA,aAJA,EAKA,gBALA;AAOA,OAAA,eAAA,MAAA,qBAAA;AACA,OAAA,cAAA;AACA,SAAA,OAAA;AACA,SAAA,WAAA,QAAA,WAAA;AACA,SAAA,QAAA,QAAA,SAAA;AACA,SAAA,SAAA,QAAA,YAAA;AACA,SAAA,OAAA,QAAA,eAAA,C,CACA;;AACA,SAAA,QAAA;AACA,OAAA,UAAA;AACA,OAAA,KAAA,MAAA,OAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,YAAA,CADA;AAEA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,eAAA,EAAA,uBADA;AAEA,MAAA,kBAAA,EAAA,IAFA;AAGA,MAAA,yBAAA,EAAA,IAHA;AAIA,MAAA,SAAA,EAAA,mBAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,CAAA,EAAA,OAAA,sCAAA;AACA,YAAA,GAAA,GAAA,EAAA,EAAA,OAAA,0CAAA;AACA,eAAA,IAAA;AACA,OARA;AASA,MAAA,QAAA,EAAA,kBAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,CAAA,EAAA,OAAA,sCAAA;AACA,YAAA,GAAA,GAAA,EAAA,EAAA,OAAA,2CAAA;AACA,eAAA,IAAA;AACA,OAbA;AAcA,MAAA,eAAA,EAAA,KAdA;AAeA,MAAA,mCAAA,EAAA,IAfA;AAgBA,MAAA,yBAAA,EAAA,IAhBA;AAiBA,MAAA,kBAAA,EAAA,IAjBA;AAkBA,MAAA,mBAAA,EAAA,KAlBA;AAmBA,MAAA,mBAAA,EAAA,IAnBA;AAoBA,MAAA,yBAAA,EAAA,KApBA;AAqBA,MAAA,iBAAA,EAAA,IArBA;AAqBA;AACA,MAAA,qBAAA,EAAA,IAtBA;AAsBA;AACA;AACA,MAAA,gBAAA,EAAA,IAxBA;AAyBA;AACA,MAAA,sBAAA,EAAA,IA1BA;AA2BA,MAAA,WAAA,EAAA,IA3BA;AA4BA,MAAA,iBAAA,EAAA,IA5BA;AA6BA,MAAA,YAAA,EAAA,GA7BA;AA6BA;AACA;AACA,MAAA,kBAAA,EAAA;AA/BA,KAAA;AAAA,GAFA;AAmCA,EAAA,UAAA,EAAA;AACA,IAAA,QAAA,EAAA,QADA;AAEA,IAAA,oBAAA,EAAA;AAFA,GAnCA;AAuCA,EAAA,QAAA,oBACA,UAAA,CAAA,YAAA,EAAA;AACA,IAAA,YAAA,EAAA;AADA,GAAA,CADA,MAIA,UAAA,CAAA,WAAA,EAAA;AACA,IAAA,cAAA,EAAA;AADA,GAAA,CAJA,MAOA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA,aADA;AAEA,IAAA,iBAAA,EAAA;AAFA,GAAA,CAPA,MAWA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA,UADA;AAEA,IAAA,SAAA,EAAA,WAFA;AAGA,IAAA,UAAA,EAAA,YAHA;AAIA,IAAA,eAAA,EAAA,iBAJA;AAKA,IAAA,eAAA,EAAA;AALA,GAAA,CAXA,MAkBA,UAAA,CAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA,eADA;AAEA,IAAA,QAAA,EAAA,UAFA;AAGA,IAAA,YAAA,EAAA,cAHA;AAIA,IAAA,oBAAA,EAAA;AAJA,GAAA,CAlBA,MAwBA,SAAA,CAAA,YAAA,EAAA;AACA,IAAA,IAAA,EAAA,MADA;AAEA,IAAA,IAAA,EAAA,MAFA;AAGA,IAAA,KAAA,EAAA,OAHA;AAIA,IAAA,KAAA,EAAA,OAJA;AAKA,IAAA,OAAA,EAAA,SALA;AAMA,IAAA,YAAA,EAAA,cANA;AAOA,IAAA,cAAA,EAAA,gBAPA;AAQA,IAAA,qBAAA,EAAA,uBARA;AASA,IAAA,yBAAA,EAAA,2BATA;AAUA,IAAA,4BAAA,EAAA,8BAVA;AAWA,IAAA,oBAAA,EAAA,sBAXA;AAYA,IAAA,MAAA,EAAA,QAZA;AAaA,IAAA,qBAAA,EAAA,uBAbA;AAcA,IAAA,sBAAA,EAAA,wBAdA;AAeA,IAAA,oBAAA,EAAA;AAfA,GAAA,CAxBA,MAyCA,SAAA,CAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AADA,GAAA,CAzCA;AA4CA,IAAA,aA5CA,2BA4CA;AACA,aAAA,CACA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,kCAAA,CADA;AAEA,QAAA,KAAA,EAAA,SAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OADA,EAMA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,gCAAA,CADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,KAAA,EAAA,OAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OANA,EAYA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,+BAAA,CADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,KAAA,EAAA,MAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OAZA,EAkBA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,qCAAA,CADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,KAAA,EAAA,YAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OAlBA,EAwBA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,iCAAA,CADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAxBA,CAAA;AA8BA,KA3EA;AA4EA,IAAA,YA5EA,0BA4EA;AACA,aAAA,CACA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,kCAAA,CADA;AAEA,QAAA,KAAA,EAAA,SAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OADA,EAMA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,gCAAA,CADA;AAEA,QAAA,KAAA,EAAA,OAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OANA,EAWA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,+BAAA,CADA;AAEA,QAAA,KAAA,EAAA,MAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAXA,EAiBA;AACA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,iCAAA,CADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAjBA,CAAA;AAuBA,KApGA;AAqGA,IAAA,8BArGA,4CAqGA;AACA,UAAA,IAAA,GAAA,EAAA;;AACA,UACA,KAAA,sBAAA,KAAA,CAAA,IACA,KAAA,oBAAA,KAAA,YAFA,EAGA;AACA,QAAA,IAAA,GAAA,KAAA,EAAA,CAAA,wCAAA,CAAA;AACA,OALA,MAKA,IACA,KAAA,sBAAA,KAAA,CAAA,IACA,KAAA,oBAAA,KAAA,MAFA,EAGA;AACA,QAAA,IAAA,GAAA,KAAA,EAAA,CAAA,0CAAA,CAAA;AACA,OALA,MAKA;AACA,QAAA,IAAA,aAAA,KAAA,EAAA,CAAA,kCAAA,CAAA,eACA,KAAA,sBADA,eAEA,KAAA,EAAA,CAAA,2BAAA,CAFA,eAEA,KAAA,YAFA,MAAA;AAGA;;AACA,aAAA,IAAA;AACA,KAvHA;AAwHA,IAAA,mCAxHA,iDAwHA;AACA,UACA,KAAA,sBAAA,GAAA,CAAA,IACA,KAAA,sBAAA,GAAA,KAAA,YAFA,EAGA;AACA,eAAA,KAAA;AACA,OALA,MAKA;AACA,eAAA,IAAA;AACA;AACA;AAjIA,IAvCA;AA0KA,EAAA,OAAA,oBACA,YAAA,CAAA,KAAA,EAAA;AACA,IAAA,cAAA,EAAA,iBADA;AAEA,IAAA,gBAAA,EAAA,oBAFA;AAGA,IAAA,eAAA,EAAA;AAHA,GAAA,CADA;AAMA;;;AAGA,IAAA,UATA,wBASA;AACA,WAAA,oBAAA;AACA,WAAA,+BAAA;AACA,WAAA,2BAAA;AACA,WAAA,kCAAA;AACA,WAAA,YAAA;AAEA,MAAA,QAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,mBAAA;AACA,KAjBA;;AAkBA;;;;AAIA,IAAA,oBAtBA,kCAsBA;AACA,UAAA,KAAA,GAAA,iBAAA,EAAA;AACA,UAAA,MAAA,GAAA,IAAA,WAAA,CAAA;AACA,QAAA,IAAA,EAAA,iBADA;AAEA,QAAA,eAAA,EAAA,KAFA;AAGA,QAAA,MAAA,EAAA,CAHA;AAIA,QAAA,MAAA,EAAA,IAAA,YAAA,EAJA;AAKA,QAAA,KAAA,EAAA;AALA,OAAA,CAAA;AAOA,WAAA,GAAA,CAAA,QAAA,CAAA,MAAA;AACA,WAAA,cAAA,GAAA,MAAA;AACA,KAjCA;;AAkCA;;;;AAIA,IAAA,+BAtCA,6CAsCA;AACA,UAAA,KAAA,GAAA,wBAAA,EAAA;AACA,UAAA,MAAA,GAAA,IAAA,gBAAA,CAAA;AACA,QAAA,IAAA,EAAA,8BADA;AAEA,QAAA,eAAA,EAAA,KAFA;AAGA,QAAA,MAAA,EAAA,CAHA;AAIA,QAAA,MAAA,EAAA,IAAA,YAAA,EAJA;AAKA,QAAA,KAAA,EAAA;AALA,OAAA,CAAA;AAOA,WAAA,GAAA,CAAA,QAAA,CAAA,MAAA;AACA,WAAA,yBAAA,GAAA,MAAA;AACA,KAjDA;;AAkDA;;;;AAIA,IAAA,2BAtDA,yCAsDA;AACA,UAAA,MAAA,GAAA,IAAA,gBAAA,CAAA;AACA,QAAA,IAAA,EAAA,qBADA;AAEA,QAAA,eAAA,EAAA,KAFA;AAGA,QAAA,MAAA,EAAA,CAHA;AAIA,QAAA,MAAA,EAAA,IAAA,YAAA,EAJA;AAKA,QAAA,KAAA,EAAA;AALA,OAAA,CAAA;AAOA,WAAA,GAAA,CAAA,QAAA,CAAA,MAAA;AACA,WAAA,qBAAA,GAAA,MAAA;AACA,KAhEA;;AAkEA;;;AAGA,IAAA,kCArEA,gDAqEA;AACA,UAAA,eAAA,GAAA,IAAA,YAAA,CAAA;AACA,QAAA,KAAA,EAAA;AADA,OAAA,CAAA;AAGA,UAAA,cAAA,GAAA,IAAA,WAAA,CAAA;AACA,QAAA,kBAAA,EAAA,KADA;AAEA,QAAA,MAAA,EAAA,CAFA;AAGA,QAAA,MAAA,EAAA,eAHA;AAIA,QAAA,KAAA,EAAA,qBAAA;AAJA,OAAA,CAAA;AAMA,WAAA,GAAA,CAAA,QAAA,CAAA,cAAA;AACA,WAAA,4BAAA,GAAA,cAAA;AACA,KAjFA;;AAmFA;;;AAGA,IAAA,gBAtFA,8BAsFA;AACA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,0BAAA,EAAA,KAAA,eAAA;;AACA,UAAA,KAAA,IAAA,KAAA,QAAA,EAAA;AACA,aAAA,gBAAA,GAAA,KAAA,GAAA,CAAA,IAAA,CAAA,aAAA,EAAA,KAAA,UAAA,CAAA;AACA,aAAA,gBAAA,CACA,KAAA,EAAA,CAAA,2CAAA,CADA;AAGA,OALA,MAKA;AACA,aAAA,gBAAA,GAAA,KAAA,GAAA,CAAA,EAAA,CAAA,aAAA,EAAA,KAAA,UAAA,CAAA;AACA;;AAEA,UAAA,KAAA,GAAA,CAAA,SAAA,GAAA,KAAA,EAAA;AACA,aAAA,GAAA,CAAA,SAAA,GAAA,KAAA,CAAA,MAAA,GAAA,SAAA;AACA;;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,aAAA,gBAAA;AACA;AACA,KAxGA;;AA0GA;;;AAGA,IAAA,sBA7GA,kCA6GA,IA7GA,EA6GA;AACA,WAAA,KAAA;AACA,WAAA,oBAAA,GAAA,IAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,0BAAA,EAAA,KAAA,eAAA;AACA,WAAA,+BAAA;;AACA,UAAA,KAAA,GAAA,CAAA,SAAA,GAAA,KAAA,EAAA;AACA,aAAA,GAAA,CAAA,SAAA,GAAA,KAAA,CAAA,MAAA,GAAA,SAAA;AACA;;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,aAAA,gBAAA;AACA;;AAEA,UAAA,KAAA,oBAAA,KAAA,YAAA,EAAA;AACA,aAAA,cAAA,CAAA;AACA,UAAA,IAAA,EAAA,KAAA,QAAA,CAAA,OADA;AAEA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,wCAAA,CAFA;AAGA,UAAA,KAAA,EAAA,IAHA;AAIA,UAAA,OAAA,EAAA;AAJA,SAAA,EADA,CAOA;;AACA,aAAA,cAAA,GAAA,KAAA,GAAA,CAAA,EAAA,CACA,aADA,EAEA,KAAA,2BAFA,CAAA;;AAIA,YAAA,CAAA,KAAA,iBAAA,EAAA;AACA,eAAA,cAAA,CAAA;AACA,YAAA,IAAA,EAAA,OADA;AAEA,YAAA,OAAA,EAAA,gCAFA;AAGA,YAAA,KAAA,EAAA,IAHA;AAIA,YAAA,OAAA,EAAA;AAJA,WAAA;AAMA,eAAA,IAAA;AACA;AACA;;AAEA,aAAA,iBAAA,CAAA,UAAA,CAAA,IAAA;AACA,aAAA,gBAAA;AACA,aAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,qCAAA,CAAA;AACA,OA1BA,MA0BA,IAAA,KAAA,oBAAA,KAAA,MAAA,EAAA;AACA,YAAA,WAAA,GAAA,IAAA,eAAA,CAAA;AACA,UAAA,IAAA,EAAA;AADA,SAAA,CAAA;AAGA,QAAA,WAAA,CAAA,EAAA,CAAA,WAAA,EAAA,KAAA,yBAAA;AACA,QAAA,WAAA,CAAA,EAAA,CAAA,SAAA,EAAA,KAAA,uBAAA;AACA,aAAA,GAAA,CAAA,cAAA,CAAA,WAAA;AACA,aAAA,WAAA,GAAA,WAAA;AACA,aAAA,gBAAA,CACA,KAAA,EAAA,CAAA,yCAAA,CADA;AAGA,aAAA,cAAA,CAAA;AACA,UAAA,IAAA,EAAA,KAAA,QAAA,CAAA,OADA;AAEA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,0CAAA,CAFA;AAGA,UAAA,KAAA,EAAA,IAHA;AAIA,UAAA,OAAA,EAAA;AAJA,SAAA;AAMA;AACA,KArKA;;AAsKA;;;AAGA,IAAA,yBAzKA,uCAyKA;AACA,WAAA,cAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;AACA,WAAA,sBAAA,GAAA,CAAA;AACA,WAAA,4BAAA,CAAA,SAAA,GAAA,KAAA;AACA,WAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,qCAAA,CAAA;AACA,KA9KA;;AAgLA;;;AAGA,IAAA,uBAnLA,mCAmLA,GAnLA,EAmLA;AACA,UAAA,GAAA,CAAA,OAAA,EAAA;AACA,aAAA,4BAAA,CAAA,SAAA,GAAA,UAAA,CAAA,GAAA,CAAA,OAAA;AACA,OAFA,MAEA;AACA;AACA;;AACA,UAAA,KAAA,YAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,aAAA,cAAA,CAAA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,sCAAA,CAFA;AAGA,UAAA,KAAA,EAAA,IAHA;AAIA,UAAA,OAAA,EAAA;AAJA,SAAA;AAMA;AACA;;AACA,WAAA,SAAA;AACA,WAAA,cAAA,CAAA;AACA,QAAA,IAAA,EACA,KAAA,sBAAA,GAAA,KAAA,YAAA,GACA,OADA,GAEA,KAAA,QAAA,CAAA,OAJA;AAKA,QAAA,OAAA,EACA,KAAA,EAAA,CAAA,kCAAA,eACA,KAAA,sBADA,gBACA,KAAA,YADA,CANA;AAQA,QAAA,KAAA,EAAA,IARA;AASA,QAAA,OAAA,EAAA;AATA,OAAA;AAWA,WAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,kCAAA,CAAA;AACA,KA/MA;;AAgNA;;;AAGA,IAAA,2BAnNA,uCAmNA,GAnNA,EAmNA;AACA,UAAA,UAAA,GAAA,GAAA,CAAA,UAAA;;AACA,UACA,KAAA,oBAAA,KAAA,YAAA,IACA,KAAA,4BAAA,CACA,SADA,GAEA,uBAFA,CAEA,UAFA,EAEA,MAFA,GAEA,CAJA,EAKA;AACA,aAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,4BAAA,CAAA;AACA,OAPA,MAOA,IACA,KAAA,oBAAA,KAAA,YAAA,IACA,KAAA,4BAAA,CACA,SADA,GAEA,uBAFA,CAEA,UAFA,EAEA,MAFA,IAEA,CAJA,EAKA;AACA,aAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,qCAAA,CAAA;AACA;AACA,KApOA;AAqOA,IAAA,+BArOA,6CAqOA;AACA;AACA,UAAA,KAAA,WAAA,EAAA;AACA,aAAA,GAAA,CAAA,iBAAA,CAAA,KAAA,WAAA;AACA;;AACA,UAAA,KAAA,mBAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,mBAAA,CAAA;AACA;;AACA,UAAA,KAAA,cAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,cAAA,CAAA;AACA;;AACA,WAAA,sBAAA,GAAA,CAAA;AACA,KAjPA;;AAkPA;;;AAGA,IAAA,SArPA,uBAqPA;AAAA;;AACA,WAAA,sBAAA,GAAA,CAAA;AACA,UAAA,MAAA,GAAA,EAAA;AACA,UAAA,oCAAA,GAAA,KAAA,4BAAA,CACA,SADA,GAEA,WAFA,EAAA;;AAGA,UAAA,oCAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,aAAA,cAAA,CAAA;AACA,UAAA,IAAA,EACA,KAAA,sBAAA,GAAA,KAAA,YAAA,IACA,KAAA,sBAAA,KAAA,CADA,GAEA,OAFA,GAGA,KAAA,QAAA,CAAA,OALA;AAMA,UAAA,OAAA,EACA,KAAA,EAAA,CAAA,kCAAA,eACA,KAAA,sBADA,sBACA,KAAA,YADA,MAPA;AASA,UAAA,KAAA,EAAA,IATA;AAUA,UAAA,OAAA,EAAA;AAVA,SAAA;AAYA;AACA;;AACA,MAAA,oCAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,KAAA,CAAA,oBAAA,KAAA,YAAA,EAAA;AACA,UAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AACA,SAFA,MAEA;AACA,cAAA,QAAA,GAAA,OAAA,CACA,WADA,GAEA,KAFA,GAGA,SAHA,CAGA,WAHA,EAGA,WAHA,CAAA;AAIA,UAAA,MAAA,CAAA,IAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA;AACA,OAVA;AAWA,MAAA,UAAA,CAAA,IAAA,iCAAA;AACA,QAAA,WAAA,EAAA,KAAA,oBADA;AAEA,QAAA,MAAA,EAAA,MAFA;AAGA,QAAA,WAAA,EAAA,CAHA;AAGA;AACA,QAAA,KAAA,EAAA,KAAA,eAAA,CAAA,MAJA;AAKA,QAAA,eAAA,EAAA,KAAA,OALA;AAMA,QAAA,OAAA,EAAA,KAAA,IANA;AAOA,QAAA,KAAA,EAAA,KAAA,KAPA;AAQA,QAAA,SAAA,EAAA,KAAA;AARA,OAAA,EAUA,IAVA,CAUA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,IAAA,EAAA;AACA,cAAA,UAAA,GAAA,QAAA,CAAA,IAAA;AACA,UAAA,KAAA,CAAA,sBAAA,GAAA,UAAA;;AACA,UAAA,KAAA,CAAA,cAAA,CAAA;AACA,YAAA,IAAA,EACA,KAAA,CAAA,sBAAA,GAAA,KAAA,CAAA,YAAA,IACA,KAAA,CAAA,sBAAA,KAAA,CADA,GAEA,OAFA,GAGA,KAAA,CAAA,QAAA,CAAA,OALA;AAMA,YAAA,OAAA,EACA,KAAA,CAAA,EAAA,CAAA,kCAAA,eACA,KAAA,CAAA,sBADA,sBACA,KAAA,CAAA,YADA,MAPA;AASA,YAAA,KAAA,EAAA,IATA;AAUA,YAAA,OAAA,EAAA;AAVA,WAAA;AAYA;AACA,OA3BA,EA4BA,KA5BA,CA4BA,UAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,OA9BA;AA+BA,KApTA;AAsTA;;AACA;;;;;AAKA,IAAA,UA5TA,sBA4TA,GA5TA,EA4TA;AAAA;;AACA,UAAA,UAAA,GAAA,KAAA,GAAA,CACA,OADA,GAEA,aAFA,GAGA,OAHA,EAAA;AAIA,UAAA,eAAA,GAAA,SAAA,CACA,GAAA,CAAA,UADA,EAEA,UAFA,EAGA,WAHA,CAAA;;AAKA,UACA,KAAA,oBAAA,KAAA,YAAA,IACA,KAAA,IAAA,KAAA,UAFA,EAGA;AACA;AACA;AACA,YAAA,cAAA,GAAA,KAAA,4BAAA,CACA,SADA,GAEA,uBAFA,CAEA,GAAA,CAAA,UAFA,CAAA;;AAGA,YAAA,cAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,4BAAA,CACA,SADA,GAEA,aAFA,CAEA,cAAA,CAAA,CAAA,CAFA;AAGA,eAAA,gBAAA,CAAA,KAAA,EAAA,CAAA,qCAAA,CAAA;AACA,eAAA,SAAA;AACA;AACA;;AACA,YAAA,mBAAA,GAAA,KAAA,iBAAA,CACA,SADA,GAEA,uBAFA,CAEA,GAAA,CAAA,UAFA,CAAA;;AAGA,YAAA,mBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,OAAA,GAAA,mBAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA;AACA,eAAA,4BAAA,CAAA,SAAA,GAAA,UAAA,CAAA,OAAA;AACA;;AACA,aAAA,SAAA;AACA,OAzBA,MAyBA;AACA,YAAA,aAAA,GAAA;AACA,UAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CADA;AAEA,UAAA,CAAA,EAAA,eAAA,CAAA,CAAA;AAFA,SAAA;AAIA,YAAA,iBAAA,GAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA;AACA,YAAA,sBAAA,GAAA,IAAA,OAAA,CAAA;AACA,UAAA,QAAA,EAAA,IAAA,KAAA,CAAA,GAAA,CAAA,UAAA,CADA;AAEA,UAAA,iBAAA,EAAA;AAFA,SAAA,CAAA;AAIA,QAAA,sBAAA,CAAA,KAAA,CAAA,sBAAA,iBAAA;AACA,QAAA,sBAAA,CAAA,GAAA,CAAA,WAAA,EAAA,KAAA;AACA,aAAA,cAAA,CAAA,SAAA,GAAA,UAAA,CAAA,sBAAA;AACA,aAAA,kBAAA,CAAA,aAAA,EACA,IADA,CACA,YAAA,CAAA,CADA,EAEA,KAFA,CAEA,UAAA,KAAA,EAAA;AACA,cAAA,KAAA,IAAA,KAAA,CAAA,OAAA,KAAA,WAAA,EAAA;AACA;AACA;;AACA,UAAA,MAAA,CAAA,cAAA,CAAA;AACA,YAAA,IAAA,EAAA,OADA;AACA;AACA,YAAA,OAAA,EAAA,MAAA,CAAA,EAAA,CAAA,8CAAA,CAFA;AAGA,YAAA,KAAA,EAAA,IAHA;AAIA,YAAA,OAAA,EAAA;AAJA,WAAA;AAMA,SAZA;AAaA,aAAA,KAAA;AACA;AACA,KA3XA;;AA4XA;;;;;;AAMA,IAAA,kBAlYA,8BAkYA,MAlYA,EAkYA;AAAA;;AACA,UAAA,IAAA,GAAA,KAAA,IAAA;AACA,UAAA,IAAA,GAAA,KAAA,IAAA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA;AACA,UAAA,OAAA,GAAA,KAAA,OAAA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA;AACA,UAAA,KAAA,GAAA,KAAA,eAAA,CAAA,MAAA;AACA,UAAA,WAAA,GAAA,KAAA,cAAA,GAAA,KAAA,cAAA,GAAA,CAAA;AACA,UAAA,UAAA,GAAA;AACA,QAAA,OAAA,EAAA,IADA;AAEA,QAAA,KAAA,EAAA,KAFA;AAGA,QAAA,KAAA,EAAA,KAHA;AAIA,QAAA,CAAA,EAAA,KAJA;AAKA,QAAA,eAAA,EAAA,OALA;AAMA,QAAA,WAAA,EAAA;AANA,OAAA;;AAQA,UAAA,OAAA,qBAAA,UAAA,MAAA,MAAA,CAAA;;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,eAAA,GAAA,IAAA;AACA,UAAA,aAAA,GAAA,KAAA,CAAA,MAAA,EAAA;AACA,UAAA,WAAA,GAAA,KAAA,CAAA,WAAA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,YAAA,QAAA,GAAA,EAAA;;AACA,YAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,QAAA,GAAA,QAAA;AACA,SAFA,MAEA,IAAA,IAAA,KAAA,UAAA,EAAA;AACA,UAAA,QAAA,GAAA,YAAA;AACA;;AACA,QAAA,aAAA,CACA,IADA,uBACA,QADA,GACA,OADA,EACA;AACA,UAAA,WAAA,EAAA,IAAA,WAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA,YAAA,MAAA,CAAA,kBAAA,GAAA,CAAA;AACA,WAHA;AADA,SADA,EAOA,IAPA,CAOA,UAAA,QAAA,EAAA;AACA,UAAA,OAAA,CAAA,QAAA,CAAA;;AACA,cAAA,QAAA,CAAA,IAAA,EAAA;AACA,gBAAA,eAAA,GAAA,EAAA;AACA,gBAAA,iBAAA,GAAA,MAAA,CAAA,YAAA,CAAA,MAAA,GAAA,CAAA,CAFA,CAGA;;AACA,gBAAA,UAAA,GAAA,gBAAA,CAAA,QAAA,CAAA,IAAA,EAAA;AACA,cAAA,cAAA,EAAA,WADA;AAEA,cAAA,iBAAA,EAAA;AAFA,aAAA,CAAA;AAKA,YAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AACA,qBAAA,CAAA,CAAA,GAAA,CAAA,MAAA,IAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,aAFA;AAGA,YAAA,UAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA,KAAA,EAAA;AACA,kBAAA,uBAAA,GACA,OAAA,CAAA,GAAA,CAAA,0BAAA,KAAA,iBADA;AAEA,cAAA,OAAA,CAAA,KAAA,CACA,uBAAA,uBAAA,GAAA,GAAA,GAAA,KADA;AAGA,kBAAA,KAAA,GAAA,EAAA;AACA,kBAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,kBAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,OAAA,KAAA,KAAA;;AACA,kBAAA,KAAA,KAAA,SAAA,IAAA,KAAA,KAAA,YAAA,EAAA;AACA,gBAAA,KAAA,GAAA,cAAA,CAAA,oBAAA,CACA,CADA,EAEA,EAFA,EAGA,QAAA,CAAA,KAAA,GAAA,EAAA,CAHA,EAIA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,qBAAA,CAJA,CAAA;AAMA,eAPA,MAOA;AACA,gBAAA,KAAA,GAAA,cAAA,CAAA,oBAAA,CACA,CADA,EAEA,EAFA,EAGA,QAAA,CAAA,KAAA,GAAA,EAAA,CAHA,EAIA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,sBAAA,CAJA,CAAA;AAMA;;AACA,kBAAA,GAAA,GAAA;AACA,gBAAA,EAAA,EAAA,OAAA,CAAA,KAAA,EADA;AAEA,gBAAA,IAAA,EAAA,OAAA,CAAA,GAAA,CAAA,OAAA,IACA,MAAA,CAAA,EAAA,2BACA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,WAAA,EADA,EADA,GAIA,MAAA,CAAA,EAAA,2BAAA,KAAA,CAAA,WAAA,EAAA,EANA;AAOA,gBAAA,wBAAA,EAAA,uBAPA;AAQA,gBAAA,KAAA,EAAA,KARA;AASA,gBAAA,KAAA,EAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,MAAA,IAAA,EAAA,IAAA,MATA;AAUA,gBAAA,KAAA,EAAA,KAVA;AAWA,gBAAA,IAAA,EAAA,cAAA,CAAA,OAAA,CAAA,WAAA,EAAA,CAXA;AAYA,gBAAA,UAAA,EACA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,OAAA,IACA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,kBAdA;AAeA,gBAAA,SAAA,EAAA;AAfA,eAAA;AAiBA,cAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,IAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,iBAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,KAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,IAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,EAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,KAAA;AACA,cAAA,eAAA,CAAA,IAAA,CAAA,GAAA;AACA,aAhDA;AAiDA,gBAAA,eAAA,GAAA;AACA,cAAA,EAAA,EAAA,iBADA;AAEA,cAAA,eAAA,EAAA,IAAA,CAAA,WAAA,EAFA;AAGA,cAAA,eAAA,EAAA,UAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAHA;AAGA;AACA,cAAA,IAAA,EAAA,UAAA,CAAA,OAAA,GAAA,MAJA;AAKA,cAAA,KAAA,EAAA,UAAA,CAAA,KAAA,GAAA,OALA;AAMA,cAAA,eAAA,EAAA,OANA;AAOA,cAAA,WAAA,EAAA,WAPA;AAQA,cAAA,UAAA,EAAA,IARA;AASA,cAAA,SAAA,EAAA,IATA;AAUA,cAAA,IAAA,EAAA,eAVA;AAWA,cAAA,cAAA,EAAA;AAXA,aAAA,CA7DA,CA0EA;;AACA,gBAAA,eAAA,CAAA,eAAA,KAAA,SAAA,EAAA;AACA,cAAA,eAAA,uBAAA,GAEA,MAAA,CAAA,qBAFA;AAGA,aAJA,MAIA,IAAA,eAAA,CAAA,eAAA,KAAA,UAAA,EAAA;AACA,cAAA,eAAA,wBAAA,GAEA,MAAA,CAAA,sBAFA;AAGA,aAJA,MAIA,IAAA,eAAA,CAAA,eAAA,KAAA,YAAA,EAAA;AACA,cAAA,eAAA,uBAAA,GAEA,MAAA,CAAA,qBAFA;AAGA,cAAA,eAAA,wBAAA,GAEA,MAAA,CAAA,sBAFA;AAGA;;AACA,gBAAA,IAAA,KAAA,QAAA,EAAA;AACA;AACA,kBAAA,aAAA,GAAA,MAAA,CAAA,cAAA,CACA,SADA,GAEA,cAFA,CAEA,sBAAA,iBAFA,CAAA;;AAGA,cAAA,aAAA,CAAA,GAAA,CAAA,OAAA,EAAA,KAAA;AACA,cAAA,aAAA,CAAA,GAAA,CAAA,SAAA,EAAA,OAAA;AACA,kBAAA,eAAA,GAAA,aAAA,CACA,WADA,GAEA,cAFA,EAAA;AAGA,kBAAA,UAAA,GAAA,QAAA,CAAA,eAAA,CAAA,CAVA,CAWA;;AAEA,qBAAA,aAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA,CAAA,eAAA,CAAA;AACA,cAAA,aAAA,CACA,GADA,4EAEA,UAAA,CAAA,CAAA,CAFA,kBAEA,UAAA,CAAA,CAAA,CAFA,mBAIA,IAJA,CAIA,UAAA,QAAA,EAAA;AACA,oBAAA,QAAA,CAAA,MAAA,KAAA,GAAA,IAAA,QAAA,CAAA,IAAA,CAAA,YAAA,EAAA;AACA,sBAAA,OAAA,GAAA,QAAA,CAAA,IAAA,CAAA,YAAA;AACA,kBAAA,eAAA,CAAA,QAAA,GAAA,OAAA;AACA;AACA,eATA,EAUA,KAVA,CAUA,YAAA;AACA,gBAAA,eAAA,CAAA,QAAA,GAAA,SAAA;AACA,eAZA,EAaA,OAbA,CAaA,YAAA;AACA,gBAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,gBAAA,MAAA,CAAA,eAAA,GAAA,KAAA;;AACA,gBAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,UAAA,WAAA,EAAA;AACA,kBAAA,WAAA,CAAA,UAAA,GAAA,KAAA;AACA,iBAFA;;AAGA,gBAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,eAAA;;AACA,gBAAA,MAAA,CAAA,cAAA,CAAA,SAAA,GAAA,WAAA,CAAA,UAAA;;AAEA,gBAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,eAAA;;AACA,gBAAA,MAAA,CAAA,kBAAA,GAAA,KAAA;AACA,eAxBA;AAyBA,aAvCA,MAuCA;AACA,cAAA,eAAA,CAAA,QAAA,GAAA,6BAAA;;AACA,cAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,UAAA,WAAA,EAAA;AACA,gBAAA,WAAA,CAAA,UAAA,GAAA,KAAA;AACA,eAFA;;AAGA,cAAA,eAAA,CAAA,cAAA,CAAA,UAAA,IAAA,EAAA;;AACA,cAAA,MAAA,CAAA,4BAAA,CACA,SADA,GAEA,WAFA,GAGA,OAHA,CAGA,UAAA,OAAA,EAAA;AACA,oBAAA,aAAA,GAAA,OAAA,CAAA,KAAA,EAAA;AACA,gBAAA,eAAA,CAAA,cAAA,CAAA,UAAA,EAAA,IAAA,CACA,aADA;AAGA,eARA;;AASA,cAAA,MAAA,CAAA,qBAAA,CACA,SADA,GAEA,WAFA,CAEA,eAAA,CAAA,cAAA,CAAA,UAAA,CAFA;;AAGA,cAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,eAAA;;AACA,cAAA,MAAA,CAAA,cAAA,CAAA,SAAA,GAAA,WAAA,CAAA,UAAA;;AACA,cAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,eAAA;;AACA,cAAA,MAAA,CAAA,kBAAA,GAAA,KAAA;AACA,cAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,cAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA;AACA;AACA,SArKA,EAsKA,KAtKA,CAsKA,UAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA;AACA,SAxKA,EAyKA,OAzKA,CAyKA,YAAA;AACA,UAAA,MAAA,CAAA,4BAAA,CAAA,SAAA,GAAA,KAAA;;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,UAAA,MAAA,CAAA,eAAA,GAAA,KAAA;;AACA,UAAA,MAAA,CAAA,KAAA;AACA,SA9KA;AA+KA,OAtLA,CAAA;AAuLA,KA9kBA;AA+kBA,IAAA,uBA/kBA,qCA+kBA;AACA,UAAA,UAAA,GAAA,KAAA,oBAAA;AACA,UAAA,OAAA,GAAA;AACA,QAAA,WAAA,EAAA;AADA,OAAA;AAGA,UAAA,QAAA,GAAA,KAAA,4BAAA,CACA,SADA,GAEA,WAFA,EAAA;;AAGA,UAAA,UAAA,KAAA,YAAA,EAAA;AACA;AACA,YAAA,MAAA,GAAA,EAAA;AACA,QAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,UAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AACA,SAFA;AAGA,QAAA,OAAA,CAAA,MAAA,GAAA,MAAA;AACA,OAPA,MAOA;AACA;AACA,YAAA,OAAA,GAAA,QAAA,CAAA,CAAA,CAAA;AACA,YAAA,CAAA,OAAA,EAAA;AACA,YAAA,QAAA,GAAA,OAAA,CACA,WADA,GAEA,KAFA,GAGA,SAHA,CAGA,WAHA,EAGA,WAHA,CAAA;;AAIA,YAAA,OAAA,GAAA,aAAA,CAAA,QAAA,CAAA;;AACA,QAAA,OAAA,CAAA,MAAA,GAAA,CAAA,OAAA,CAAA;AACA;;AACA,MAAA,OAAA,CAAA,SAAA,GAAA,KAAA,oBAAA;AACA,WAAA,kBAAA,CAAA,OAAA;AACA,KA3mBA;AA4mBA,IAAA,mBA5mBA,+BA4mBA,WA5mBA,EA4mBA;AACA,UAAA,CAAA,KAAA,oBAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,UAAA,WAAA,CAAA,EAAA,KAAA,KAAA,oBAAA,CAAA,aAAA,EAAA;AACA,eAAA,IAAA;AACA,OAFA,MAEA;AACA,eAAA,KAAA;AACA;AACA,KArnBA;AAsnBA,IAAA,sBAtnBA,kCAsnBA,IAtnBA,EAsnBA;AACA,UAAA,mBAAA,GAAA,OAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AACA,aAAA,mBAAA;AACA,KAznBA;;AA0nBA;;;AAGA,IAAA,YA7nBA,0BA6nBA;AAAA;;AACA,UAAA,KAAA,WAAA,EAAA;AACA,aAAA,WAAA,CAAA,EAAA,CAAA,YAAA,EAAA,UAAA,GAAA,EAAA;AACA,cAAA,QAAA,GAAA,MAAA,CAAA,GAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,KAAA,EAAA;AACA,YAAA,WAAA,EAAA,qBAAA,SAAA,EAAA;AACA,kBAAA,SAAA,CAAA,GAAA,CAAA,MAAA,MAAA,iBAAA,EAAA;AACA,uBAAA,IAAA;AACA;;AACA,qBAAA,KAAA;AACA;AANA,WAAA,CAAA;;AAQA,cAAA,cAAA;AACA,cAAA,eAAA;AACA,cAAA,YAAA,GAAA,QAAA,CAAA,GAAA,CAAA,UAAA,CAAA;AAEA,UAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,gBAAA,CAAA,CAAA,GAAA,CAAA,iBAAA,MAAA,QAAA,EAAA;AACA,kBAAA,aAAA,GAAA,YAAA,CAAA,CAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,CAAA;AACA,kBAAA,QAAA,GAAA,WAAA,CACA,YADA,EAEA,aAAA,CAAA,WAAA,GAAA,cAAA,EAFA,CAAA;;AAIA,kBAAA,CAAA,eAAA,IAAA,eAAA,GAAA,QAAA,EAAA;AACA,gBAAA,eAAA,GAAA,QAAA;AACA,gBAAA,cAAA,GAAA,CAAA;AACA;AACA;AACA,WAZA;;AAcA,cAAA,CAAA,cAAA,EAAA;AACA,YAAA,cAAA,GAAA,QAAA,CAAA,CAAA,CAAA;AACA;;AACA,cAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CACA,GADA,EACA;AACA;AACA,cAAA,IAAA,+EAAA,MAAA,CAAA,EAAA,CACA,iCADA,CAAA,CADA;AAIA,cAAA,KAAA,EAAA,iBAJA;AAKA,cAAA,QAAA,EAAA,oBAAA;AACA,oBAAA,WAAA,GAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CACA,UAAA,WAAA;AAAA,yBACA,WAAA,CAAA,EAAA,KAAA,cAAA,CAAA,GAAA,CAAA,mBAAA,CADA;AAAA,iBADA,CAAA;;AAIA,oBAAA,WAAA,CAAA,CAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,CAAA,CAAA;AACA;AACA;AAbA,aAFA,EAgBA;AACA;AACA,cAAA,IAAA,+EAAA,MAAA,CAAA,EAAA,CACA,iCADA,CAAA,CADA;AAIA,cAAA,KAAA,EAAA,iBAJA;AAKA,cAAA,QAAA,EAAA,oBAAA;AACA,oBAAA,WAAA,GAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CACA,UAAA,WAAA;AAAA,yBACA,WAAA,CAAA,EAAA,KAAA,cAAA,CAAA,GAAA,CAAA,mBAAA,CADA;AAAA,iBADA,CAAA;;AAIA,oBAAA,WAAA,CAAA,CAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,WAAA,CAAA,CAAA,CAAA,CAAA,eAAA,KAAA,QAAA,EAAA;AACA,oBAAA,MAAA,CAAA,cAAA,CAAA;AACA,sBAAA,UAAA,EAAA,YAAA,CACA,cAAA,CAAA,GAAA,CAAA,gBAAA,CADA,CAAA,CAGA,WAHA,GAIA,cAJA,EADA;AAMA,sBAAA,SAAA,EAAA;AANA,qBAAA;AAQA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,WAAA,CAAA,CAAA,CAAA;AACA;AACA;AAxBA,aAjBA,CAAA;AA4CA;AACA,SA5EA;AA6EA;AACA,KA7sBA;AA8sBA;AACA,IAAA,mBA/sBA,+BA+sBA,aA/sBA,EA+sBA;AACA,UAAA,WAAA,GAAA,KAAA,YAAA,CAAA,MAAA,CACA,UAAA,WAAA;AAAA,eAAA,WAAA,CAAA,EAAA,KAAA,aAAA;AAAA,OADA,CAAA;;AAGA,UAAA,WAAA,IAAA,WAAA,CAAA,CAAA,CAAA,EAAA;AACA,aAAA,qBAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA,CAAA;AACA;AACA,KAttBA;AAutBA,IAAA,qBAvtBA,iCAutBA,KAvtBA,EAutBA,WAvtBA,EAutBA;AACA,UAAA,KAAA,KAAA,KAAA,EAAA;AACA,aAAA,cAAA,CACA,SADA,GAEA,WAFA,GAGA,OAHA,CAGA,UAAA,CAAA,EAAA;AACA,UAAA,CAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,KAAA;AACA,SALA;AAMA,aAAA,oBAAA,GAAA,IAAA;AACA;AACA;;AACA,UAAA,QAAA,GAAA,cAAA,CAAA,sBAAA,CACA,WADA,EAEA,KAAA,cAFA,CAAA;AAKA,MAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,QAAA,CAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,IAAA;AACA,OAFA;AAGA,UAAA,IAAA,GAAA,cAAA,CAAA,wBAAA,CAAA,QAAA,CAAA;AACA,UAAA,OAAA,GAAA;AACA,QAAA,aAAA,EAAA,WAAA,CAAA,EADA;AAEA,QAAA,eAAA,EAAA,WAAA,CAAA,eAFA;AAGA,QAAA,IAAA,EAAA;AAHA,OAAA;;AAKA,UAAA,WAAA,CAAA,eAAA,KAAA,UAAA,EAAA;AACA,YAAA,uBAAA,GAAA,cAAA,CAAA,0BAAA,CACA,QADA,CAAA;AAGA,QAAA,OAAA,CAAA,uBAAA,GAAA,uBAAA;AACA;;AACA,WAAA,oBAAA,GAAA,OAAA;AACA,KAvvBA;AAwvBA;AACA,IAAA,yBAzvBA,qCAyvBA,OAzvBA,EAyvBA,WAzvBA,EAyvBA,IAzvBA,EAyvBA;AACA,WAAA,gCAAA,CAAA,OAAA;AACA,KA3vBA;AA4vBA,IAAA,gCA5vBA,4CA4vBA,OA5vBA,EA4vBA;AACA,UAAA,SAAA,GAAA,OAAA,CAAA,EAAA;AACA,MAAA,OAAA,CAAA,SAAA,GAAA,CAAA,OAAA,CAAA,SAAA;;AACA,UAAA,SAAA,EAAA;AACA,YAAA,gBAAA,GAAA,KAAA,cAAA,CACA,SADA,GAEA,cAFA,CAEA,SAFA,CAAA;;AAGA,YAAA,gBAAA,EAAA;AACA,UAAA,gBAAA,CAAA,GAAA,CAAA,WAAA,EAAA,OAAA,CAAA,SAAA;AACA;AACA;AACA,KAvwBA;AAwwBA,IAAA,oBAxwBA,gCAwwBA,WAxwBA,EAwwBA;AACA,WAAA,mBAAA,GAAA,IAAA;AACA,WAAA,mBAAA,GAAA,WAAA;AACA,KA3wBA;AA4wBA,IAAA,iBA5wBA,6BA4wBA,WA5wBA,EA4wBA;AAAA;;AAAA,UAAA,KAAA,uEAAA,IAAA;AACA,UAAA,IAAA,GAAA,WAAA,CAAA,IAAA;;AACA,UAAA,KAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,UAAA,WAAA;AAAA,iBAAA,WAAA,CAAA,KAAA,KAAA,KAAA;AAAA,SAAA,CAAA;AACA;;AACA,UAAA,oBAAA,GAAA,KAAA,8CAAA,CACA,IADA,CAAA;AAGA,MAAA,IAAA,CAAA,OAAA,CAAA,UAAA,SAAA,EAAA;AACA,YAAA,SAAA,GAAA,SAAA,CAAA,EAAA;;AACA,YAAA,gBAAA,GAAA,MAAA,CAAA,cAAA,CACA,SADA,GAEA,cAFA,CAEA,SAFA,CAAA;;AAGA,YAAA,gBAAA,EAAA;AACA;AAEA,cAAA,KAAA,IAAA,gBAAA,CAAA,GAAA,CAAA,OAAA,MAAA,KAAA,EAAA;AACA,gBAAA,oBAAA,EAAA;AACA,cAAA,SAAA,CAAA,SAAA,GAAA,KAAA;AACA,aAFA,MAEA;AACA,cAAA,SAAA,CAAA,SAAA,GAAA,CAAA,SAAA,CAAA,SAAA;AACA;;AACA,YAAA,gBAAA,CAAA,GAAA,CAAA,WAAA,EAAA,SAAA,CAAA,SAAA;AACA;;AACA,cAAA,CAAA,KAAA,EAAA;AACA,gBAAA,oBAAA,EAAA;AACA,cAAA,SAAA,CAAA,SAAA,GAAA,KAAA;AACA,aAFA,MAEA;AACA,cAAA,SAAA,CAAA,SAAA,GAAA,CAAA,SAAA,CAAA,SAAA;AACA;;AACA,YAAA,gBAAA,CAAA,GAAA,CAAA,WAAA,EAAA,SAAA,CAAA,SAAA;AACA;AACA;AACA,OAzBA;AA0BA,UAAA,YAAA,GAAA,IAAA,CAAA,MAAA,CAAA,UAAA,SAAA;AAAA,eAAA,SAAA,CAAA,SAAA;AAAA,OAAA,EAAA,MAAA;;AACA,UAAA,YAAA,KAAA,CAAA,EAAA;AACA,QAAA,WAAA,CAAA,SAAA,GAAA,KAAA;AACA,OAFA,MAEA;AACA,QAAA,WAAA,CAAA,SAAA,GAAA,IAAA;AACA;AACA,KApzBA;AAqzBA,IAAA,iBArzBA,6BAqzBA,KArzBA,EAqzBA,WArzBA,EAqzBA,IArzBA,EAqzBA;AAAA;;AACA,UAAA,iBAAA,GAAA,KAAA,yBAAA,CAAA,SAAA,EAAA;;AACA,UAAA,WAAA,CAAA,cAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA,YAAA,QAAA,GAAA,WAAA,CAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;AACA,YAAA,KAAA,KAAA,IAAA,EAAA;AACA,UAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,iBAAA,CAAA,UAAA,CAAA,OAAA;AACA,WAFA;AAGA,SAJA,MAIA;AACA,UAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,gBAAA,iBAAA,CAAA,UAAA,CAAA,OAAA,CAAA,EAAA;AACA,cAAA,iBAAA,CAAA,aAAA,CAAA,OAAA;AACA;AACA,WAJA;AAKA;AACA,OAdA,MAcA;AACA,aAAA,SAAA,GAAA,IAAA;AACA,aAAA,eAAA,GAAA,IAAA,CAFA,CAGA;;AACA,QAAA,UAAA,CAAA,IAAA,+BACA,WAAA,CAAA,IAAA,CAAA,CAAA,EAAA,wBADA,cACA,IADA,0BAEA;AACA,UAAA,YAAA,EAAA,aADA;AAEA,UAAA,OAAA,EAAA;AACA,YAAA,MAAA,EAAA;AADA;AAFA,SAFA,EASA,IATA,CASA,UAAA,QAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,EAAA;AACA,gBAAA,UAAA,GAAA,gBAAA,CAAA,QAAA,CAAA,IAAA,EAAA;AACA,cAAA,cAAA,EAAA,WADA;AAEA,cAAA,iBAAA,EAAA;AAFA,aAAA,CAAA;AAIA,YAAA,WAAA,CAAA,cAAA,CAAA,IAAA,IAAA;AACA,cAAA,QAAA,EAAA,UADA;AAEA,cAAA,KAAA,EAAA;AAFA,aAAA,CALA,CASA;;AACA,gBAAA,KAAA,GAAA,UAAA,CAAA,WAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACA,gBAAA,eAAA,GAAA,CAAA,CAXA,CAWA;;AACA,gBAAA,gBAAA,GAAA,IAAA;AACA,YAAA,UAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,KAAA;AACA,kBAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,kBAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA;AACA,kBAAA,KAAA;;AACA,kBAAA,KAAA,KAAA,SAAA,EAAA;AACA,gBAAA,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,WAAA,CAAA,mBAAA,CAAA;AACA,eAFA,MAEA,IAAA,KAAA,KAAA,UAAA,EAAA;AACA,gBAAA,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,WAAA,CAAA,oBAAA,CAAA;AACA;;AACA,kBAAA,iBAAA,GAAA,cAAA,CAAA,oBAAA,CACA,eADA,EAEA,gBAFA,EAGA,IAHA,EAIA,KAJA,CAAA;AAMA,cAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,iBAAA;AACA,aAjBA;AAkBA,YAAA,iBAAA,CAAA,WAAA,CAAA,UAAA;AACA;AACA,SA3CA,EA4CA,KA5CA,CA4CA,UAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,SA9CA,EA+CA,OA/CA,CA+CA,YAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,UAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA,SAlDA;AAmDA;AACA,KA73BA;AA83BA,IAAA,eA93BA,2BA83BA,KA93BA,EA83BA,WA93BA,EA83BA;AAAA;;AACA,UAAA,QAAA,GAAA,WAAA,CAAA,cAAA,CAAA,UAAA,CAAA;AACA,MAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,UAAA,GAAA,MAAA,CAAA,qBAAA,CACA,SADA,GAEA,UAFA,CAEA,OAFA,CAAA;;AAGA,YAAA,KAAA,KAAA,KAAA,IAAA,UAAA,EAAA;AACA,UAAA,MAAA,CAAA,qBAAA,CAAA,SAAA,GAAA,aAAA,CAAA,OAAA;AACA,SAFA,MAEA,IAAA,KAAA,KAAA,IAAA,IAAA,CAAA,UAAA,EAAA;AACA,UAAA,MAAA,CAAA,qBAAA,CAAA,SAAA,GAAA,UAAA,CAAA,OAAA;AACA;AACA,OATA;AAUA,KA14BA;AA24BA,IAAA,eA34BA,2BA24BA,WA34BA,EA24BA,IA34BA,EA24BA;AACA,UAAA,QAAA,aAAA,IAAA,iBAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,KAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QAAA,EAAA;AACA,KA94BA;AA+4BA,IAAA,uBA/4BA,mCA+4BA,WA/4BA,EA+4BA,IA/4BA,EA+4BA;AACA,WAAA,yBAAA,GAAA,IAAA;AACA,WAAA,iBAAA,GAAA,WAAA;AACA,WAAA,qBAAA,GAAA,IAAA;AACA,KAn5BA;AAo5BA,IAAA,iCAp5BA,6CAo5BA,eAp5BA,EAo5BA;AACA,UAAA,oBAAA,GAAA,eAAA,CAAA,MAAA,CACA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,SAAA,KAAA,IAAA;AAAA,OADA,CAAA;;AAGA,UAAA,oBAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,aAAA,IAAA;AACA,KA55BA;AA65BA,IAAA,8CA75BA,0DA65BA,eA75BA,EA65BA;AACA,UAAA,oBAAA,GAAA,eAAA,CAAA,MAAA,CACA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,SAAA,KAAA,IAAA;AAAA,OADA,CAAA;;AAGA,UAAA,oBAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,UAAA,oBAAA,CAAA,MAAA,KAAA,eAAA,CAAA,MAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,aAAA,IAAA;AACA,KAx6BA;AAy6BA,IAAA,6BAz6BA,yCAy6BA,WAz6BA,EAy6BA;AAAA;;AACA,UAAA,QAAA,GAAA,WAAA,CAAA,cAAA,CAAA,UAAA,CAAA;AACA,UAAA,UAAA,GAAA,KAAA;AACA,MAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,MAAA,CAAA,qBAAA,CAAA,SAAA,GAAA,UAAA,CAAA,OAAA,CAAA,EAAA;AACA,UAAA,UAAA,GAAA,IAAA;AACA;AACA,OAJA;AAKA,aAAA,UAAA;AACA,KAl7BA;AAo7BA;AACA,IAAA,SAr7BA,uBAq7BA;AAAA;;AACA,WAAA,KAAA,CAAA,OAAA,CACA,IADA,CAEA,KAAA,EAAA,CAAA,wBAAA,CAFA,EAGA,KAAA,EAAA,CAAA,6BAAA,CAHA,EAIA;AAAA,QAAA,KAAA,EAAA,KAAA,QAAA,CAAA;AAAA,OAJA,EAMA,IANA,CAMA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,EAAA;AACA,UAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA,UAAA,WAAA,EAAA;AACA,YAAA,MAAA,CAAA,iBAAA,CAAA,WAAA;AACA,WAFA;AAGA;AACA,OAZA;AAaA,KAn8BA;AAo8BA,IAAA,iBAp8BA,6BAo8BA,WAp8BA,EAo8BA;AAAA;;AACA,UAAA,EAAA,GAAA,WAAA,CAAA,EAAA;;AACA,UACA,KAAA,oBAAA,IACA,KAAA,oBAAA,CAAA,aAAA,KAAA,EAFA,EAGA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA,OALA,MAKA,IAAA,KAAA,oBAAA,EAAA;AACA,aAAA,oBAAA,CAAA,aAAA,GACA,KAAA,oBAAA,CAAA,aAAA,GAAA,CADA;AAEA;;AAEA,WAAA,YAAA,GAAA,KAAA,YAAA,CAAA,MAAA,CACA,UAAA,WAAA;AAAA,eAAA,WAAA,CAAA,EAAA,IAAA,EAAA;AAAA,OADA,CAAA;AAGA,WAAA,YAAA,GAAA,KAAA,YAAA,CAAA,GAAA,CAAA,UAAA,WAAA,EAAA;AACA,YAAA,WAAA,CAAA,EAAA,GAAA,EAAA,EAAA;AACA,UAAA,WAAA,CAAA,EAAA,GAAA,WAAA,CAAA,EAAA,GAAA,CAAA;AACA;;AACA,eAAA,WAAA;AACA,OALA,CAAA;AAMA,UAAA,eAAA,GAAA,KAAA,cAAA,CAAA,SAAA,EAAA;AACA,MAAA,eAAA,CAAA,WAAA,GAAA,OAAA,CAAA,UAAA,gBAAA,EAAA;AACA,YAAA,sBAAA,GAAA,gBAAA,CAAA,GAAA,CACA,mBADA,CAAA;;AAGA,YAAA,sBAAA,KAAA,EAAA,EAAA;AACA,UAAA,eAAA,CAAA,aAAA,CAAA,gBAAA;AACA;;AACA,YAAA,sBAAA,GAAA,EAAA,EAAA;AACA,cAAA,SAAA,GAAA,sBAAA,GAAA,CAAA;;AACA,cAAA,gBAAA,CAAA,WAAA,GAAA,OAAA,OAAA,OAAA,EAAA;AACA,YAAA,gBAAA,CAAA,KAAA,CAAA,sBAAA,SAAA;AACA,YAAA,gBAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,SAAA;AACA,WAHA,MAGA;AACA,YAAA,gBAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,SAAA;AACA;AACA;AACA,OAhBA;AAiBA,UAAA,+BAAA,GAAA,KAAA,yBAAA,CAAA,SAAA,EAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,WAAA,CAAA,cAAA,EAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,QAAA,GAAA,WAAA,CAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;AACA,YAAA,+BAAA,IAAA,QAAA,EAAA;AACA,UAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,+BAAA,CAAA,aAAA,CAAA,OAAA;AACA,WAFA;AAGA;AACA,OAPA,EAxCA,CAgDA;;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,WAAA,CAAA,cAAA,CAAA,QAAA,CAAA,EAAA;AACA,QAAA,WAAA,CAAA,cAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,qBAAA,CAAA,SAAA,GAAA,UAAA,CAAA,OAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,qBAAA,CAAA,SAAA,GAAA,aAAA,CAAA,OAAA;AACA;AACA,SAJA;AAKA;;AAEA,WAAA,qBAAA,CAAA,OAAA;AACA,KA9/BA;;AA+/BA;;;AAGA,IAAA,wBAlgCA,sCAkgCA;AACA,WAAA,KAAA;;AACA,UAAA,KAAA,kBAAA,YAAA,QAAA,EAAA;AACA,aAAA,kBAAA,CAAA,WAAA;AACA;;AACA,WAAA,cAAA,CAAA;AACA,QAAA,IAAA,EAAA,OADA;AAEA,QAAA,OAAA,EAAA,KAAA,EAAA,CAAA,2CAAA,CAFA;AAGA,QAAA,KAAA,EAAA,IAHA;AAIA,QAAA,OAAA,EAAA;AAJA,OAAA;AAMA,KA7gCA;AA8gCA,IAAA,KA9gCA,mBA8gCA;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,gBAAA,CAAA;AACA,aAAA,gBAAA,GAAA,IAAA;AACA;;AACA,WAAA,cAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;AACA,WAAA,+BAAA;AACA,WAAA,oBAAA,GAAA,IAAA;AACA,WAAA,sBAAA,GAAA,CAAA;AACA,WAAA,eAAA;;AACA,UAAA,KAAA,GAAA,CAAA,SAAA,GAAA,KAAA,EAAA;AACA,aAAA,GAAA,CAAA,SAAA,GAAA,KAAA,CAAA,MAAA,GAAA,EAAA;AACA;;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA,eAAA;AACA,WAAA,4BAAA,CAAA,SAAA,GAAA,KAAA;AACA,KA7hCA;AA8hCA,IAAA,IA9hCA,kBA8hCA;AACA,UAAA,KAAA,kBAAA,YAAA,QAAA,EAAA;AACA,aAAA,kBAAA,CAAA,WAAA;AACA;;AACA,WAAA,KAAA;AACA;AAniCA,IA1KA;AA+sCA,EAAA,KAAA,EAAA;AACA,IAAA,OADA,qBACA;AAAA;;AACA,WAAA,SAAA,CAAA,OAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,KAAA,OAAA,CAAA,OAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,KAAA;AACA;AACA,OAJA;AAKA,KAPA;AAQA,IAAA,YARA,0BAQA;AACA,UAAA,KAAA,oBAAA,EAAA;AACA,aAAA,SAAA;AACA;AACA,KAZA;AAaA,IAAA,IAbA,gBAaA,KAbA,EAaA;AACA,UAAA,KAAA,KAAA,QAAA,IAAA,KAAA,iBAAA,CAAA,UAAA,EAAA,EAAA;AACA,aAAA,iBAAA,CAAA,UAAA,CAAA,KAAA;AACA;AACA;AAjBA,GA/sCA;AAkuCA,EAAA,OAluCA,qBAkuCA;AACA;AACA,QAAA,cAAA,GAAA,KAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA,SAAA,OAAA,GAAA,cAAA,CAAA,IAAA;AACA,SAAA,KAAA,GAAA,cAAA,CAAA,KAAA;AACA;AAvuCA,CAAA","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-card flat>\n      <template>\n        <!-- ISOCHRONE OPTIONS  -->\n        <v-flex xs12>\n          <v-card-text class=\"pr-16 pl-16 pt-0 pb-0\">\n            <v-divider></v-divider>\n          </v-card-text>\n          <v-subheader\n            class=\"clickable\"\n            @click=\"isOptionsElVisible = !isOptionsElVisible\"\n          >\n            <v-icon\n              small\n              :style=\"\n                isOptionsElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              class=\"mr-2\"\n              >fas fa-sliders-h</v-icon\n            >\n            <h3>{{ $t(\"isochrones.options.title\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon\n              v-html=\"isOptionsElVisible === true ? 'remove' : 'add'\"\n            ></v-icon>\n          </v-subheader>\n          <div v-if=\"isOptionsElVisible\">\n            <v-expand-transition>\n              <v-flex\n                xs12\n                class=\"mx-4 isochroneOptions\"\n                v-if=\"isIsochroneOptionsVisible\"\n              >\n                <v-row class=\"mt-n2\" align=\"center\">\n                  <v-col class=\"d-flex mb-0 pb-0\" cols=\"12\" sm=\"6\">\n                    <v-select\n                      label=\"Routing\"\n                      class=\"mb-2 mt-0\"\n                      item-value=\"type\"\n                      hide-details\n                      v-model=\"routing\"\n                      :items=\"appConfig.routing\"\n                    >\n                      <template slot=\"selection\" slot-scope=\"{ item }\">\n                        <v-row>\n                          <v-col cols=\"3\" class=\"py-0\"\n                            ><v-icon dense>{{ item.icon }}</v-icon></v-col\n                          >\n                          <v-col cols=\"9\" class=\"py-0\"\n                            ><span class=\"cb-item\">{{\n                              $t(`isochrones.options.${item.type}`)\n                            }}</span></v-col\n                          >\n                        </v-row>\n                      </template>\n                      <template slot=\"item\" slot-scope=\"{ item }\">\n                        <v-row>\n                          <v-col cols=\"3\"\n                            ><v-icon dense>{{ item.icon }}</v-icon></v-col\n                          >\n                          <v-col cols=\"9\"\n                            ><span class=\"cb-item\">{{\n                              $t(`isochrones.options.${item.type}`)\n                            }}</span></v-col\n                          >\n                        </v-row>\n                      </template>\n                    </v-select>\n                  </v-col>\n                  <v-col class=\"d-flex mb-0 pb-2\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      :label=\"$t(`isochrones.options.speed`)\"\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"1\"\n                      max=\"25\"\n                      ref=\"input\"\n                      :rules=\"[speedRule]\"\n                      v-model=\"speed\"\n                      suffix=\"km/h\"\n                      hide-details\n                      class=\"mb-1\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col class=\"d-flex mt-2 pt-0\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      :label=\"$t(`isochrones.options.time`)\"\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"1\"\n                      max=\"20\"\n                      ref=\"input\"\n                      :rules=\"[timeRule]\"\n                      v-model=\"time\"\n                      suffix=\"min\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col class=\"d-flex mt-2 pt-0\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      :label=\"$t(`isochrones.options.nr`)\"\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"1\"\n                      max=\"4\"\n                      ref=\"input\"\n                      v-model=\"steps\"\n                    ></v-text-field>\n                  </v-col>\n                </v-row>\n              </v-flex>\n            </v-expand-transition>\n          </div>\n        </v-flex>\n\n        <!-- ISOCHRONE TYPE -->\n        <v-flex xs12>\n          <v-subheader\n            @click=\"\n              isIsochroneCalculationTypeElVisible = !isIsochroneCalculationTypeElVisible\n            \"\n            class=\"clickable pb-0 mb-0\"\n          >\n            <v-icon\n              class=\"mr-2\"\n              :style=\"\n                isIsochroneCalculationTypeElVisible === true\n                  ? { color: appColor.secondary }\n                  : {}\n              \"\n              small\n              >fas fa-bullseye</v-icon\n            >\n            <h3>{{ $t(\"isochrones.calculationTitle\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon\n              v-html=\"\n                isIsochroneCalculationTypeElVisible === true ? 'remove' : 'add'\n              \"\n            ></v-icon>\n          </v-subheader>\n          <v-card-text\n            v-show=\"isIsochroneCalculationTypeElVisible\"\n            class=\"py-0 my-0 mb-2 justify-center\"\n          >\n            <v-row no-gutters justify=\"center\" align=\"center\">\n              <v-radio-group\n                class=\"ml-2 mt-4 radio-group-height\"\n                v-model=\"type\"\n                :value=\"type\"\n                @change=\"stop\"\n                row\n              >\n                <v-radio\n                  :color=\"appColor.secondary\"\n                  :label=\"$t('isochrones.single.type')\"\n                  value=\"single\"\n                ></v-radio>\n                <v-radio\n                  :color=\"appColor.secondary\"\n                  :label=\"$t('isochrones.multiple.type')\"\n                  value=\"multiple\"\n                ></v-radio>\n              </v-radio-group>\n            </v-row>\n            <v-row no-gutters>\n              <template v-if=\"type === 'single'\">\n                <v-col cols=\"12\" justify=\"center\" align=\"center\" class=\"pr-2\">\n                  <template v-if=\"!isIsochroneBusy\">\n                    <span>\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            outlined\n                            fab\n                            v-on=\"on\"\n                            class=\"mr-2\"\n                            depressed\n                            text\n                            @click=\"registerMapClick('isochrone')\"\n                          >\n                            <v-icon\n                              :color=\"\n                                mapClickListener ? appColor.secondary : 'grey'\n                              \"\n                              >fas fa-map-marker-alt</v-icon\n                            >\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.single.startTooltip\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <br />\n                    <span>Isochrone Single</span>\n                  </template>\n                  <span v-if=\"isIsochroneBusy\">\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                          fab\n                          dark\n                          v-on=\"on\"\n                          class=\"mb-4 elevation-0\"\n                          color=\"red\"\n                          @click=\"stopIsochroneCalculation\"\n                        >\n                          <v-icon color=\"white\">close</v-icon>\n                        </v-btn>\n                      </template>\n                      <span>{{ $t(\"isochrones.stopIsochroneCalc\") }}</span>\n                    </v-tooltip>\n                  </span>\n                </v-col>\n              </template>\n              <template v-if=\"type === 'multiple'\">\n                <v-row no-gutters>\n                  <v-col cols=\"6\" justify=\"center\" align=\"center\" class=\"pl-10\">\n                    <span\n                      v-if=\"!isIsochroneBusy || multiIsochroneMethod === 'draw'\"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            outlined\n                            fab\n                            v-on=\"on\"\n                            class=\"ml-2\"\n                            depressed\n                            text\n                            @click=\"activateMultiIsochrone('study_area')\"\n                          >\n                            <v-icon\n                              :color=\"\n                                multiIsochroneMethod === 'study_area'\n                                  ? appColor.secondary\n                                  : 'grey'\n                              \"\n                              >fa-solid fa-hand-pointer</v-icon\n                            >\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.multiple.studyArea\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <span\n                      v-if=\"\n                        isIsochroneBusy && multiIsochroneMethod === 'study_area'\n                      \"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            fab\n                            dark\n                            v-on=\"on\"\n                            class=\"mb-4 elevation-0\"\n                            color=\"red\"\n                            @click=\"stopIsochroneCalculation\"\n                          >\n                            <v-icon color=\"white\">close</v-icon>\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.stopIsochroneCalc\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <br />\n                    <span>{{ $t(\"isochrones.multiple.studyArea\") }}</span>\n                  </v-col>\n                  <v-col cols=\"6\" justify=\"center\" align=\"center\" class=\"pr-10\">\n                    <span\n                      v-if=\"\n                        !isIsochroneBusy ||\n                          multiIsochroneMethod === 'study_area'\n                      \"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            outlined\n                            fab\n                            v-on=\"on\"\n                            class=\"ml-2 mr-4\"\n                            depressed\n                            text\n                            @click=\"activateMultiIsochrone('draw')\"\n                          >\n                            <v-icon\n                              :color=\"\n                                multiIsochroneMethod === 'draw'\n                                  ? appColor.secondary\n                                  : 'grey'\n                              \"\n                              >fa-solid fa-draw-polygon</v-icon\n                            >\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.multiple.drawPolygon\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <span\n                      v-if=\"isIsochroneBusy && multiIsochroneMethod === 'draw'\"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            fab\n                            dark\n                            v-on=\"on\"\n                            class=\"mb-4 elevation-0\"\n                            color=\"red\"\n                            @click=\"stopIsochroneCalculation\"\n                          >\n                            <v-icon color=\"white\">close</v-icon>\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.stopIsochroneCalc\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <br />\n                    <span>{{ $t(\"isochrones.multiple.drawPolygon\") }}</span>\n                  </v-col>\n                </v-row>\n                <v-row no-gutters justify=\"center\" class=\"mt-2\" align=\"center\">\n                  <v-btn\n                    small\n                    class=\"white--text mr-2 mt-5 mb-2\"\n                    color=\"error\"\n                    outlined\n                    @click=\"stop\"\n                  >\n                    {{ $t(\"isochrones.multiple.clear\") }}\n                  </v-btn>\n                  <v-btn\n                    :disabled=\"\n                      !multiIsochronePoiCount ||\n                        multiIsochronePoiCount > maxAmenities ||\n                        isMapBusy\n                    \"\n                    small\n                    class=\"white--text ml-2 mt-5 mb-2\"\n                    :color=\"appColor.primary\"\n                    @click=\"calculateMultiIsochrone\"\n                  >\n                    {{ $t(\"isochrones.multiple.calculate\") }}\n                  </v-btn>\n                </v-row>\n              </template>\n            </v-row>\n            <v-progress-linear\n              v-if=\"isIsochroneBusy\"\n              indeterminate\n              height=\"1\"\n              class=\"mx-0 pb-0\"\n              :color=\"appColor.primary\"\n            ></v-progress-linear>\n          </v-card-text>\n        </v-flex>\n\n        <!-- ISOCHRONE RESULT -->\n        <v-flex id=\"isochroneResultsEl\">\n          <v-card-text class=\"pr-16 pl-16 pt-0 pb-0\">\n            <v-divider></v-divider>\n          </v-card-text>\n          <v-subheader\n            class=\"clickable\"\n            @click=\"isResultsElVisible = !isResultsElVisible\"\n          >\n            <v-icon\n              class=\"mr-2\"\n              :style=\"\n                isResultsElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              style=\"margin-right: 2px;\"\n              small\n              >far fa-list-alt</v-icon\n            >\n            <h3>{{ $t(\"isochrones.results.title\") }}</h3>\n            <v-spacer></v-spacer>\n\n            <v-hover v-slot=\"{ hover }\">\n              <v-btn\n                small\n                v-show=\"isResultsElVisible === true && calculations.length > 1\"\n                class=\"white--text mr-2\"\n                :color=\"hover ? 'error' : 'grey'\"\n                outlined\n                @click.stop=\"deleteAll\"\n              >\n                <v-icon left>delete</v-icon\n                >{{ $t(\"isochrones.results.deleteAll\") }}\n              </v-btn>\n            </v-hover>\n\n            <v-icon\n              v-html=\"isResultsElVisible === true ? 'remove' : 'add'\"\n            ></v-icon>\n          </v-subheader>\n          <v-layout>\n            <v-flex xs12 class=\"mx-3\" v-show=\"isResultsElVisible\">\n              <template v-for=\"calculation in calculations\">\n                <v-card\n                  style=\"width: 330px;\"\n                  class=\"mb-3 \"\n                  :id=\"`result-${calculation.id}`\"\n                  :key=\"calculation.id\"\n                  :class=\"{\n                    'elevation-5': isCalculationActive(calculation)\n                  }\"\n                >\n                  <v-card-title\n                    style=\"background-color:#EEEEEE;\"\n                    class=\"pb-0 mt-0 pt-0 mb-0\"\n                  >\n                    <v-layout row wrap class=\"py-1\">\n                      <v-layout align-start justify-start>\n                        <v-card-text class=\"pa-0 ma-0 ml-2\">\n                          <v-icon small class=\"text-xs-center\">{{\n                            routingProfiles[calculation.routing_profile].icon\n                          }}</v-icon>\n                          <span class=\"ml-1 caption\">\n                            {{\n                              $t(\n                                `isochrones.options.${calculation.routing_profile}`\n                              )\n                            }}\n                          </span>\n\n                          <v-icon small class=\"text-xs-center mx-2\"\n                            >fas fa-tachometer-alt\n                          </v-icon>\n                          <span class=\"caption\">{{ calculation.speed }}</span>\n                          <span\n                            class=\"pl-2 ml-2 text-xs-center\"\n                            style=\"border-left: 1px solid #424242;\"\n                            >{{\n                              $te(\n                                `isochrones.options.${calculation.calculationMode}`\n                              )\n                                ? $t(\n                                    `isochrones.options.${calculation.calculationMode}`\n                                  )\n                                : calculation.calculationMode\n                            }}</span\n                          >\n                        </v-card-text>\n                      </v-layout>\n\n                      <v-layout row>\n                        <v-spacer></v-spacer>\n                        <v-tooltip top>\n                          <template v-slot:activator=\"{ on }\">\n                            <v-icon\n                              @click=\"deleteCalculation(calculation)\"\n                              small\n                              v-on=\"on\"\n                              class=\"result-icons delete-icon mr-6\"\n                            >\n                              fas fa-trash-alt</v-icon\n                            >\n                          </template>\n                          <span>{{\n                            $t(\"isochrones.results.deleteCalcTooltip\")\n                          }}</span>\n                        </v-tooltip>\n                      </v-layout>\n                    </v-layout>\n                    <v-card-text class=\"pr-0 pl-0 pt-0 pb-0\">\n                      <v-layout class=\"ml-0\" row> </v-layout>\n                    </v-card-text>\n                  </v-card-title>\n                  <v-subheader\n                    justify-center\n                    align-center\n                    class=\"clickable subheader mt-1 pb-1\"\n                    @click=\"calculation.isExpanded = !calculation.isExpanded\"\n                  >\n                    <span class=\"fa-stack fa-xs mr-1\" style=\"color:#800000;\">\n                      <span\n                        class=\"fa fa-solid fa-location-pin fa-stack-2x\"\n                      ></span>\n                      <strong\n                        style=\"font-size:12px;\"\n                        class=\"white--text fa-stack-1x mb-1\"\n                      >\n                        {{ calculation.id }}\n                      </strong>\n                    </span>\n                    <v-tooltip\n                      :disabled=\"\n                        calculation.position === 'multiIsochroneCalculation'\n                      \"\n                      open-delay=\"600\"\n                      max-width=\"300\"\n                      top\n                    >\n                      <template v-slot:activator=\"{ on }\">\n                        <p class=\"result-title subtitle-2 mt-4\" v-on=\"on\">\n                          {{\n                            calculation.position === \"multiIsochroneCalculation\"\n                              ? $t(\"isochrones.results.multiIsochroneHeader\")\n                              : calculation.position\n                          }}\n                        </p>\n                      </template>\n                      <span>{{ calculation.position }}</span></v-tooltip\n                    >\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <div\n                          v-if=\"\n                            calculation.calculationMode === 'default' ||\n                              calculation.calculationMode === 'comparison'\n                          \"\n                          @click.stop=\"\n                            toggleColorPickerDialog(calculation, 'default')\n                          \"\n                          v-on=\"on\"\n                          class=\"my-1 mx-2 colorPalettePicker\"\n                          :style=\"{\n                            backgroundImage: `linear-gradient(to right, ${getPaletteColor(\n                              calculation,\n                              'default'\n                            )})`\n                          }\"\n                        ></div>\n                      </template>\n                      <span>{{\n                        $t(`map.tooltips.changeDefaultColorPalette`)\n                      }}</span>\n                    </v-tooltip>\n\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <div\n                          v-if=\"\n                            calculation.calculationMode === 'scenario' ||\n                              calculation.calculationMode === 'comparison'\n                          \"\n                          v-on=\"on\"\n                          @click.stop=\"\n                            toggleColorPickerDialog(calculation, 'scenario')\n                          \"\n                          class=\"my-1 ml-1 mx-2 colorPalettePicker\"\n                          :style=\"{\n                            backgroundImage: `linear-gradient(to right, ${getPaletteColor(\n                              calculation,\n                              'scenario'\n                            )})`\n                          }\"\n                        ></div>\n                      </template>\n                      <span>{{\n                        $t(`map.tooltips.changeScenarioColorPalette`)\n                      }}</span>\n                    </v-tooltip>\n\n                    <v-icon\n                      small\n                      class=\"ml-2\"\n                      v-html=\"\n                        calculation.isExpanded\n                          ? 'fas fa-chevron-down'\n                          : 'fas fa-chevron-up'\n                      \"\n                    ></v-icon>\n                  </v-subheader>\n                  <v-divider\n                    v-if=\"calculation.isExpanded\"\n                    style=\"border-width:revert;\"\n                  ></v-divider>\n\n                  <v-card-text\n                    class=\"pt-0 pb-0\"\n                    v-show=\"calculation.isExpanded\"\n                  >\n                    <v-row justify-center align-center no-gutters>\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            :color=\"appColor.primary\"\n                            fab\n                            dark\n                            class=\"my-1 mt-3 elevation-1\"\n                            v-on=\"on\"\n                            x-small\n                            @click=\"toggleDownloadDialog(calculation)\"\n                          >\n                            <v-icon small>fa-solid fa-download</v-icon>\n                          </v-btn>\n                        </template>\n                        <span>{{\n                          $t(\"isochrones.results.downloadTooltip\")\n                        }}</span>\n                      </v-tooltip>\n                      <v-spacer></v-spacer>\n                      <v-switch\n                        v-if=\"\n                          calculation.calculationMode !== 'comparison' &&\n                            calculation.calculationType !== 'multiple'\n                        \"\n                        class=\"mt-4 mr-3\"\n                        dense\n                        :color=\"appColor.secondary\"\n                        hide-details\n                        :disabled=\"isIsochroneBusy\"\n                        @change=\"\n                          toggleRoadNetwork(\n                            $event,\n                            calculation,\n                            calculation.calculationMode\n                          )\n                        \"\n                        :input-value=\"\n                          calculation.additionalData[\n                            calculation.calculationMode\n                          ]\n                            ? calculation.additionalData[\n                                calculation.calculationMode\n                              ].state\n                            : false\n                        \"\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.results.roadNetwork\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                      <v-switch\n                        class=\"mt-4\"\n                        :input-value=\"isCalculationActive(calculation)\"\n                        dense\n                        :color=\"appColor.secondary\"\n                        hide-details\n                        @change=\"toggleIsochroneWindow($event, calculation)\"\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.results.dataTable\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                    </v-row>\n                    <v-row\n                      class=\"mb-2\"\n                      v-if=\"calculation.calculationType === 'multiple'\"\n                      justify-center\n                      align-center\n                      no-gutters\n                    >\n                      <v-switch\n                        class=\"mt-2 ml-1\"\n                        dense\n                        @change=\"toggleStudyArea($event, calculation)\"\n                        :color=\"appColor.secondary\"\n                        :input-value=\"\n                          getStudyAreaToggleSwitchState(calculation)\n                        \"\n                        hide-details\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.additionalLayers.studyArea\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                      <!-- TODO: Isochrone starting points not yet available -->\n                      <v-switch\n                        :disabled=\"true\"\n                        class=\"mt-2 ml-3\"\n                        dense\n                        :color=\"appColor.secondary\"\n                        hide-details\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.additionalLayers.startingPoints\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                    </v-row>\n                    <v-divider></v-divider>\n                    <v-row\n                      no-gutters\n                      :key=\"index\"\n                      v-for=\"(data, key, index) in groupedCalculationData(\n                        calculation.data\n                      )\"\n                    >\n                      <v-row\n                        no-gutters\n                        v-if=\"calculation.calculationMode === 'comparison'\"\n                        style=\"width:100%;background-color:#EEEEEE;border-radius:4px;\"\n                        class=\"mr-0 mt-1 pa-1\"\n                      >\n                        <v-col cols=\"4\" justify=\"start\" align=\"start\">\n                          <v-row no-gutters justify=\"start\" align=\"start\">\n                            <span class=\"result-title subtitle-2 pb-0 mb-0\">\n                              {{\n                                data[0] && data[0].modus\n                                  ? $te(`isochrones.mode.${data[0].modus}`)\n                                    ? $t(`isochrones.mode.${data[0].modus}`)\n                                    : data[0].modus\n                                  : key\n                              }}\n                            </span>\n                          </v-row>\n                        </v-col>\n                        <v-col cols=\"8\" justify=\"end\" align-end class=\"pr-1\">\n                          <v-row no-gutters justify=\"end\" align=\"center\">\n                            <v-switch\n                              v-if=\"calculation.calculationType !== 'multiple'\"\n                              class=\"ma-0 pa-0\"\n                              dense\n                              :color=\"appColor.secondary\"\n                              hide-details\n                              @change=\"\n                                toggleRoadNetwork(\n                                  $event,\n                                  calculation,\n                                  data[0].modus\n                                )\n                              \"\n                              :disabled=\"isIsochroneBusy\"\n                              :input-value=\"\n                                data &&\n                                data[0] &&\n                                calculation.additionalData[data[0].modus]\n                                  ? calculation.additionalData[data[0].modus]\n                                      .state\n                                  : false\n                              \"\n                            >\n                              <template v-slot:label>\n                                <span class=\"caption\">{{\n                                  $t(\"isochrones.results.roadNetwork\")\n                                }}</span>\n                              </template>\n                            </v-switch>\n                          </v-row>\n                        </v-col>\n                      </v-row>\n                      <v-data-table\n                        dense\n                        style=\"width:100%\"\n                        :headers=\"\n                          calculation.calculationType === 'single'\n                            ? headersSingle\n                            : headersMulti\n                        \"\n                        :items=\"data\"\n                        class=\"elevation-0 subtitle-1 pb-2\"\n                        hide-default-footer\n                        hide-default-header\n                        light\n                      >\n                        <template v-slot:header=\"{ props: { headers } }\">\n                          <thead>\n                            <tr>\n                              <th :key=\"h.value\" v-for=\"h in headers\">\n                                <v-checkbox\n                                  v-if=\"h.value === 'visible'\"\n                                  @change=\"\n                                    toggleCalculation(\n                                      calculation,\n                                      calculation.calculationMode ===\n                                        'comparison'\n                                        ? data[0].modus\n                                        : null\n                                    )\n                                  \"\n                                  :input-value=\"\n                                    getToggleCalculationCheckboxState(data)\n                                  \"\n                                  :indeterminate=\"\n                                    getToggleCalculationCheckboxIndeterminateState(\n                                      data\n                                    )\n                                  \"\n                                  :color=\"appColor.secondary\"\n                                  hide-details\n                                  dense\n                                >\n                                </v-checkbox>\n                                <span v-else>{{ h.text }}</span>\n                              </th>\n                            </tr>\n                          </thead>\n                        </template>\n                        <template v-slot:item.visible=\"{ item }\">\n                          <v-checkbox\n                            class=\"my-2\"\n                            dense\n                            :input-value=\"item.isVisible\"\n                            :color=\"appColor.secondary\"\n                            hide-details\n                            @change=\"\n                              toggleIsochroneVisibility(item, calculation, data)\n                            \"\n                          ></v-checkbox>\n                        </template>\n\n                        <template v-slot:items=\"props\">\n                          <td>{{ props.item.range }}</td>\n                          <td>{{ props.item.area }}</td>\n                        </template>\n\n                        <template v-slot:item.legend=\"{ item }\">\n                          <div\n                            class=\"legend\"\n                            :style=\"{ backgroundColor: item.color }\"\n                          ></div>\n                        </template>\n                      </v-data-table>\n                    </v-row>\n                  </v-card-text>\n                </v-card>\n              </template>\n            </v-flex>\n            <confirm ref=\"confirm\"></confirm>\n            <!-- DIALOG BOXES FOR ISOCHRONE RESULTS -->\n            <download\n              :visible=\"downloadDialogState\"\n              :calculation=\"selectedCalculation\"\n              @close=\"downloadDialogState = false\"\n            ></download>\n            <isochrone-color-picker\n              :visible=\"isochroneColorPickerState\"\n              :calculation=\"activeCalculation\"\n              :selectedMode=\"activeCalculationMode\"\n              @close=\"isochroneColorPickerState = false\"\n            ></isochrone-color-picker>\n          </v-layout>\n        </v-flex>\n      </template>\n      <!-- -- -->\n    </v-card>\n    <confirm ref=\"confirm\"></confirm>\n  </v-flex>\n</template>\n\n<script>\n//TODO: ADD STUDY AREA LAYER AND POIS FOR MULTIISOCHRONES\n//TODO: FIX MULTIISOCHRONE DATA TABLE WINDOW\nimport { Mapable } from \"../../mixins/Mapable\";\nimport { Isochrones } from \"../../mixins/Isochrones\";\nimport { KeyShortcuts } from \"../../mixins/KeyShortcuts\";\n//Child components\nimport Download from \"./IsochronesDownload\";\nimport IsochroneColorPicker from \"./IsochroneColorPicker\";\n\nimport {\n  getIsochroneStyle,\n  getIsochroneNetworkStyle,\n  isochroneOverlayStyle,\n  studyAreaASelectStyle\n} from \"../../style/OlStyleDefs\";\n\n//Store imports\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\n\n//Ol imports\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\n\nimport {\n  wktToFeature,\n  geojsonToFeature,\n  getPolygonArea,\n  geometryToWKT,\n  geobufToFeatures\n} from \"../../utils/MapUtils\";\nimport DrawInteraction from \"ol/interaction/Draw\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nimport { groupBy } from \"../../utils/Helpers\";\nimport { getDistance } from \"ol/sphere\";\nimport { toLonLat } from \"ol/proj\";\nimport { transform } from \"ol/proj.js\";\nimport { unByKey } from \"ol/Observable\";\n//Other\nimport { EventBus } from \"../../EventBus\";\nimport ApiService from \"../../services/api.service\";\nimport axios from \"axios\";\n\nexport default {\n  mixins: [Mapable, Isochrones, KeyShortcuts],\n  data: () => ({\n    interactionType: \"isochrone-interaction\",\n    isOptionsElVisible: true,\n    isIsochroneOptionsVisible: true,\n    speedRule: val => {\n      if (val < 1) return \"Please enter a number greater than 0\";\n      if (val > 40) return \"Please enter a number no greater than 40\";\n      return true;\n    },\n    timeRule: val => {\n      if (val < 1) return \"Please enter a number greater than 0\";\n      if (val > 20) return \"Please enter a number not greater than 20\";\n      return true;\n    },\n    isIsochroneBusy: false,\n    isIsochroneCalculationTypeElVisible: true,\n    isIsochroneStartElVisible: true,\n    isResultsElVisible: true,\n    downloadDialogState: false,\n    selectedCalculation: null,\n    isochroneColorPickerState: false,\n    activeCalculation: null, // for color palette selection\n    activeCalculationMode: null, // for color palette selection,\n    //Single Isochrone\n    mapClickListener: null,\n    // Multiisochrone\n    multiIsochronePoiCount: null,\n    drawPolygon: null,\n    mapPointerMoveKey: null,\n    maxAmenities: 150, //TODO: make this a configurable setting\n    // Cancel Request Token\n    cancelRequestToken: null\n  }),\n  components: {\n    download: Download,\n    IsochroneColorPicker\n  },\n  computed: {\n    ...mapGetters(\"isochrones\", {\n      calculations: \"calculations\"\n    }),\n    ...mapGetters(\"scenarios\", {\n      activeScenario: \"activeScenario\"\n    }),\n    ...mapGetters(\"map\", {\n      contextmenu: \"contextmenu\",\n      subStudyAreaLayer: \"subStudyAreaLayer\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      poisConfig: \"poisConfig\",\n      routingProfiles: \"routingProfiles\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAoisLayer: \"poisAoisLayer\",\n      poisAois: \"poisAois\",\n      selectedPois: \"selectedPois\",\n      selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n    }),\n    ...mapFields(\"isochrones\", {\n      type: \"type\",\n      time: \"time\",\n      speed: \"speed\",\n      steps: \"steps\",\n      routing: \"routing\",\n      calculations: \"calculations\",\n      isochroneLayer: \"isochroneLayer\",\n      isochroneOverlayLayer: \"isochroneOverlayLayer\",\n      isochroneRoadNetworkLayer: \"isochroneRoadNetworkLayer\",\n      multiIsochroneSelectionLayer: \"multiIsochroneSelectionLayer\",\n      multiIsochroneMethod: \"multiIsochroneMethod\",\n      colors: \"colors\",\n      defaultIsochroneColor: \"defaultIsochroneColor\",\n      scenarioIsochroneColor: \"scenarioIsochroneColor\",\n      selectedThematicData: \"selectedThematicData\"\n    }),\n    ...mapFields(\"map\", {\n      isMapBusy: \"isMapBusy\"\n    }),\n    headersSingle() {\n      return [\n        {\n          text: this.$t(\"isochrones.results.table.visible\"),\n          value: \"visible\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.range\"),\n          align: \"center\",\n          value: \"range\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.area\"),\n          align: \"center\",\n          value: \"area\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.population\"),\n          align: \"center\",\n          value: \"population\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.legend\"),\n          value: \"legend\",\n          sortable: false\n        }\n      ];\n    },\n    headersMulti() {\n      return [\n        {\n          text: this.$t(\"isochrones.results.table.visible\"),\n          value: \"visible\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.range\"),\n          value: \"range\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.area\"),\n          value: \"area\",\n          sortable: false\n        },\n\n        {\n          text: this.$t(\"isochrones.results.table.legend\"),\n          value: \"legend\",\n          sortable: false\n        }\n      ];\n    },\n    getMultiIsochroneInfoLabelText() {\n      let text = \"\";\n      if (\n        this.multiIsochronePoiCount === 0 &&\n        this.multiIsochroneMethod === \"study_area\"\n      ) {\n        text = this.$t(\"isochrones.multiple.studyAreaInfoLabel\");\n      } else if (\n        this.multiIsochronePoiCount === 0 &&\n        this.multiIsochroneMethod === \"draw\"\n      ) {\n        text = this.$t(\"isochrones.multiple.drawPolygonInfoLabel\");\n      } else {\n        text = `${this.$t(\"isochrones.multiple.amenityCount\")}: ${\n          this.multiIsochronePoiCount\n        } (${this.$t(\"isochrones.multiple.limit\")}: ${this.maxAmenities})`;\n      }\n      return text;\n    },\n    isMultiIsochroneCalculationDisabled() {\n      if (\n        this.multiIsochronePoiCount > 0 &&\n        this.multiIsochronePoiCount < this.maxAmenities\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  },\n  methods: {\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\",\n      startHelpTooltip: \"START_HELP_TOOLTIP\",\n      stopHelpTooltip: \"STOP_HELP_TOOLTIP\"\n    }),\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      this.createIsochroneLayer();\n      this.createIsochroneRoadNetworkLayer();\n      this.createIsochroneOverlayLayer();\n      this.createMultiIsochroneSelectionLayer();\n      this.setUpCtxMenu();\n\n      EventBus.$on(\"show-isochrone-window\", this.showIsochroneWindow);\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneLayer() {\n      const style = getIsochroneStyle();\n      const vector = new VectorLayer({\n        name: \"isochrone_layer\",\n        displayInLegend: false,\n        zIndex: 6,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneLayer = vector;\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneRoadNetworkLayer() {\n      const style = getIsochroneNetworkStyle();\n      const vector = new VectorImageLayer({\n        name: \"isochrone_road_network_layer\",\n        displayInLegend: false,\n        zIndex: 5,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneRoadNetworkLayer = vector;\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneOverlayLayer() {\n      const vector = new VectorImageLayer({\n        name: \"isochrone_overlayer\",\n        displayInLegend: false,\n        zIndex: 7,\n        source: new VectorSource(),\n        style: isochroneOverlayStyle\n      });\n      this.map.addLayer(vector);\n      this.isochroneOverlayLayer = vector;\n    },\n\n    /**\n     * Create multi isochrone selection layer\n     */\n    createMultiIsochroneSelectionLayer() {\n      const selectionSource = new VectorSource({\n        wrapX: false\n      });\n      const selectionLayer = new VectorLayer({\n        displayInLayerList: false,\n        zIndex: 5,\n        source: selectionSource,\n        style: studyAreaASelectStyle()\n      });\n      this.map.addLayer(selectionLayer);\n      this.multiIsochroneSelectionLayer = selectionLayer;\n    },\n\n    /**\n     * Register map click listener to calculate single isochrone.\n     */\n    registerMapClick() {\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      if (this.type === \"single\") {\n        this.mapClickListener = this.map.once(\"singleclick\", this.onMapClick);\n        this.startHelpTooltip(\n          this.$t(\"map.tooltips.clickForIsochroneCalculation\")\n        );\n      } else {\n        this.mapClickListener = this.map.on(\"singleclick\", this.onMapClick);\n      }\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n    },\n\n    /**\n     * Activate multi isochrone method.\n     */\n    activateMultiIsochrone(type) {\n      this.clear();\n      this.multiIsochroneMethod = type;\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      this.removeMultiIsochroneInteraction();\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n\n      if (this.multiIsochroneMethod === \"study_area\") {\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.studyAreaInfoLabel\"),\n          state: true,\n          timeout: 5000\n        });\n        //Study are method\n        this.pointerMoveKey = this.map.on(\n          \"pointermove\",\n          this.onMultiIsochronePointerMove\n        );\n        if (!this.subStudyAreaLayer) {\n          this.toggleSnackbar({\n            type: \"error\",\n            message: \"Study area layer not available\",\n            state: true,\n            timeout: 10000\n          });\n          this.stop();\n          return;\n        }\n\n        this.subStudyAreaLayer.setVisible(true);\n        this.registerMapClick();\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      } else if (this.multiIsochroneMethod === \"draw\") {\n        const drawPolygon = new DrawInteraction({\n          type: \"Polygon\"\n        });\n        drawPolygon.on(\"drawstart\", this.onMultiIsochroneDrawStart);\n        drawPolygon.on(\"drawend\", this.onMultiIsochroneDrawEnd);\n        this.map.addInteraction(drawPolygon);\n        this.drawPolygon = drawPolygon;\n        this.startHelpTooltip(\n          this.$t(\"map.tooltips.clickToStartDrawingPolygon\")\n        );\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.drawPolygonInfoLabel\"),\n          state: true,\n          timeout: 10000\n        });\n      }\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onMultiIsochroneDrawStart() {\n      this.toggleSnackbar({ state: false });\n      this.multiIsochronePoiCount = 0;\n      this.multiIsochroneSelectionLayer.getSource().clear();\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToContinueDrawing\"));\n    },\n\n    /**\n     * Draw interaction end event handler\n     */\n    onMultiIsochroneDrawEnd(evt) {\n      if (evt.feature) {\n        this.multiIsochroneSelectionLayer.getSource().addFeature(evt.feature);\n      } else {\n        return;\n      }\n      if (this.selectedPois.length === 0) {\n        this.toggleSnackbar({\n          type: \"error\",\n          message: this.$t(\"map.snackbarMessages.selectAmenities\"),\n          state: true,\n          timeout: 10000\n        });\n        return;\n      }\n      this.countPois();\n      this.toggleSnackbar({\n        type:\n          this.multiIsochronePoiCount > this.maxAmenities\n            ? \"error\"\n            : this.appColor.primary,\n        message:\n          this.$t(\"isochrones.multiple.amenityCount\") +\n          ` ${this.multiIsochronePoiCount} / ${this.maxAmenities}`,\n        state: true,\n        timeout: 0\n      });\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToStartDrawing\"));\n    },\n    /**\n     * Event for updating the edit help tooltip\n     */\n    onMultiIsochronePointerMove(evt) {\n      const coordinate = evt.coordinate;\n      if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(coordinate).length > 0\n      ) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToRemove\"));\n      } else if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(coordinate).length == 0\n      ) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      }\n    },\n    removeMultiIsochroneInteraction() {\n      // cleanup possible old select interaction\n      if (this.drawPolygon) {\n        this.map.removeInteraction(this.drawPolygon);\n      }\n      if (this.mapClickListenerKey) {\n        unByKey(this.mapClickListenerKey);\n      }\n      if (this.pointerMoveKey) {\n        unByKey(this.pointerMoveKey);\n      }\n      this.multiIsochronePoiCount = 0;\n    },\n    /**\n     * Count pois that intersect with study area or polygon\n     */\n    countPois() {\n      this.multiIsochronePoiCount = 0;\n      const region = [];\n      const multiIsochroneSelectionLayerFeatures = this.multiIsochroneSelectionLayer\n        .getSource()\n        .getFeatures();\n      if (multiIsochroneSelectionLayerFeatures.length === 0) {\n        this.toggleSnackbar({\n          type:\n            this.multiIsochronePoiCount > this.maxAmenities ||\n            this.multiIsochronePoiCount === 0\n              ? \"error\"\n              : this.appColor.primary,\n          message:\n            this.$t(\"isochrones.multiple.amenityCount\") +\n            ` ${this.multiIsochronePoiCount} (Limit: ${this.maxAmenities})`,\n          state: true,\n          timeout: 100000\n        });\n        return;\n      }\n      multiIsochroneSelectionLayerFeatures.forEach(feature => {\n        if (this.multiIsochroneMethod === \"study_area\") {\n          region.push(feature.get(\"id\"));\n        } else {\n          const geometry = feature\n            .getGeometry()\n            .clone()\n            .transform(\"EPSG:3857\", \"EPSG:4326\");\n          region.push(geometryToWKT(geometry));\n        }\n      });\n      ApiService.post(`/isochrones/multi/count-pois`, {\n        region_type: this.multiIsochroneMethod,\n        region,\n        scenario_id: 0, //TODO: Get scenario id\n        modus: this.calculationMode.active,\n        routing_profile: this.routing,\n        minutes: this.time,\n        speed: this.speed,\n        amenities: this.selectedPoisOnlyKeys\n      })\n        .then(response => {\n          if (response.data) {\n            const poisNumber = response.data;\n            this.multiIsochronePoiCount = poisNumber;\n            this.toggleSnackbar({\n              type:\n                this.multiIsochronePoiCount > this.maxAmenities ||\n                this.multiIsochronePoiCount === 0\n                  ? \"error\"\n                  : this.appColor.primary,\n              message:\n                this.$t(\"isochrones.multiple.amenityCount\") +\n                ` ${this.multiIsochronePoiCount} (Limit: ${this.maxAmenities})`,\n              state: true,\n              timeout: 100000\n            });\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    //=============================================================\n    /**\n     * Handler for 'singleclick' on the map.\n     * Collects data and passes it to corresponding objects.\n     * @param  {ol/MapBrowserEvent} evt The OL event of 'singleclick' on the map\n     */\n    onMapClick(evt) {\n      const projection = this.map\n        .getView()\n        .getProjection()\n        .getCode();\n      const coordinateWgs84 = transform(\n        evt.coordinate,\n        projection,\n        \"EPSG:4326\"\n      );\n      if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.type === \"multiple\"\n      ) {\n        //Check if there is a feature already selected at clicked coordinate,\n        //and if so, delete it and return.\n        const featureAtCoord = this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(evt.coordinate);\n        if (featureAtCoord.length > 0) {\n          this.multiIsochroneSelectionLayer\n            .getSource()\n            .removeFeature(featureAtCoord[0]);\n          this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n          this.countPois();\n          return;\n        }\n        const subStudyAreaAtCoord = this.subStudyAreaLayer\n          .getSource()\n          .getFeaturesAtCoordinate(evt.coordinate);\n        if (subStudyAreaAtCoord.length > 0) {\n          const feature = subStudyAreaAtCoord[0].clone();\n          this.multiIsochroneSelectionLayer.getSource().addFeature(feature);\n        }\n        this.countPois();\n      } else {\n        const payloadSingle = {\n          x: coordinateWgs84[0],\n          y: coordinateWgs84[1]\n        };\n        const calculationNumber = this.calculations.length + 1;\n        const isochroneMarkerFeature = new Feature({\n          geometry: new Point(evt.coordinate),\n          calculationNumber: calculationNumber\n        });\n        isochroneMarkerFeature.setId(\"isochrone_marker_\" + calculationNumber);\n        isochroneMarkerFeature.set(\"showLabel\", false);\n        this.isochroneLayer.getSource().addFeature(isochroneMarkerFeature);\n        this.calculateIsochrone(payloadSingle)\n          .then(() => {})\n          .catch(error => {\n            if (error && error.message === \"cancelled\") {\n              return;\n            }\n            this.toggleSnackbar({\n              type: \"error\", //success or error\n              message: this.$t(\"map.snackbarMessages.calculateIsochroneError\"),\n              state: true,\n              timeout: 2500\n            });\n          });\n        this.clear();\n      }\n    },\n    /**\n     * Calculate isochrone .\n     * Collects data and passes it to corresponding objects.\n     * @param  {Object} parameters The parameters for the isochrone calculation\n     * @param  {ol/Feature} isochroneMarkerFeature The starting point for the isochrone calculation (Optional)\n     */\n    calculateIsochrone(params) {\n      const type = this.type;\n      const time = this.time;\n      const speed = this.speed;\n      const routing = this.routing;\n      const steps = this.steps;\n      const modus = this.calculationMode.active;\n      const scenario_id = this.activeScenario ? this.activeScenario : 0;\n      const baseParams = {\n        minutes: time,\n        speed,\n        modus,\n        n: steps,\n        routing_profile: routing,\n        scenario_id\n      };\n      const payload = { ...baseParams, ...params };\n      this.isMapBusy = true;\n      this.isIsochroneBusy = true;\n      const axiosInstance = axios.create();\n      const CancelToken = axios.CancelToken;\n      return new Promise((resolve, reject) => {\n        let endpoint = \"\";\n        if (type === \"single\") {\n          endpoint = \"single\";\n        } else if (type === \"multiple\") {\n          endpoint = \"multi/pois\";\n        }\n        axiosInstance\n          .post(`/isochrones/${endpoint}`, payload, {\n            cancelToken: new CancelToken(c => {\n              // An executor function receives a cancel function as a parameter\n              this.cancelRequestToken = c;\n            })\n          })\n          .then(response => {\n            resolve(response);\n            if (response.data) {\n              const calculationData = [];\n              const calculationNumber = this.calculations.length + 1;\n              //Order features based on id\n              let olFeatures = geojsonToFeature(response.data, {\n                dataProjection: \"EPSG:4326\",\n                featureProjection: \"EPSG:3857\"\n              });\n\n              olFeatures.sort((a, b) => {\n                return a.get(\"step\") - b.get(\"step\");\n              });\n              olFeatures.forEach((feature, index) => {\n                const isochroneCalculationUid =\n                  feature.get(\"isochrone_calculation_id\") || calculationNumber;\n                feature.setId(\n                  \"isochrone_feature_\" + isochroneCalculationUid + \"_\" + index\n                );\n                let color = \"\";\n                let level = feature.get(\"step\");\n                let modus = feature.get(\"modus\") || modus;\n                if (modus === \"default\" || modus === \"comparison\") {\n                  color = IsochroneUtils.getInterpolatedColor(\n                    1,\n                    20,\n                    parseInt(level / 60),\n                    this.colors[this.defaultIsochroneColor]\n                  );\n                } else {\n                  color = IsochroneUtils.getInterpolatedColor(\n                    1,\n                    20,\n                    parseInt(level / 60),\n                    this.colors[this.scenarioIsochroneColor]\n                  );\n                }\n                let obj = {\n                  id: feature.getId(),\n                  type: feature.get(\"modus\")\n                    ? this.$t(\n                        `isochrones.mode.${feature.get(\"modus\").toLowerCase()}`\n                      )\n                    : this.$t(`isochrones.mode.${modus.toLowerCase()}`),\n                  isochrone_calculation_id: isochroneCalculationUid,\n                  modus: modus,\n                  range: Math.round(feature.get(\"step\") / 60) + \" min\",\n                  color: color,\n                  area: getPolygonArea(feature.getGeometry()),\n                  population:\n                    feature.get(\"reached_opportunities\").sum_pop ||\n                    feature.get(\"reached_opportunities\").reached_population,\n                  isVisible: true\n                };\n                feature.set(\"isVisible\", true);\n                feature.set(\"calculationNumber\", calculationNumber);\n                feature.set(\"color\", color);\n                feature.set(\"calculationType\", type);\n                feature.set(\"hoverColor\", \"\");\n                feature.set(\"showLabel\", false);\n                calculationData.push(obj);\n              });\n              let transformedData = {\n                id: calculationNumber,\n                calculationType: type.toLowerCase(),\n                calculationMode: baseParams.modus.replace(/'/g, \"\"), // remove extra apostrophe in multi-isochrone\n                time: baseParams.minutes + \" min\",\n                speed: baseParams.speed + \" km/h\",\n                routing_profile: routing,\n                scenario_id,\n                isExpanded: true,\n                isVisible: true,\n                data: calculationData,\n                additionalData: {}\n              };\n              // Add default calculation color palette.\n              if (transformedData.calculationMode === \"default\") {\n                transformedData[\n                  `defaultColorPalette`\n                ] = this.defaultIsochroneColor;\n              } else if (transformedData.calculationMode === \"scenario\") {\n                transformedData[\n                  `scenarioColorPalette`\n                ] = this.scenarioIsochroneColor;\n              } else if (transformedData.calculationMode === \"comparison\") {\n                transformedData[\n                  `defaultColorPalette`\n                ] = this.defaultIsochroneColor;\n                transformedData[\n                  `scenarioColorPalette`\n                ] = this.scenarioIsochroneColor;\n              }\n              if (type === \"single\") {\n                //TODO: Get start point from response\n                const markerFeature = this.isochroneLayer\n                  .getSource()\n                  .getFeatureById(\"isochrone_marker_\" + calculationNumber);\n                markerFeature.set(\"speed\", speed);\n                markerFeature.set(\"routing\", routing);\n                const startPointCoord = markerFeature\n                  .getGeometry()\n                  .getCoordinates();\n                const wgs84Coord = toLonLat(startPointCoord);\n                //Geocode\n\n                delete axiosInstance.defaults.headers.common[\"Authorization\"];\n                axiosInstance\n                  .get(\n                    `https://api.locationiq.com/v1/reverse.php?key=ca068d7840bca4&lat=${wgs84Coord[1]}&lon=${wgs84Coord[0]}&format=json`\n                  )\n                  .then(response => {\n                    if (response.status === 200 && response.data.display_name) {\n                      const address = response.data.display_name;\n                      transformedData.position = address;\n                    }\n                  })\n                  .catch(() => {\n                    transformedData.position = \"Unknown\";\n                  })\n                  .finally(() => {\n                    this.isMapBusy = false;\n                    this.isIsochroneBusy = false;\n                    this.calculations.forEach(calculation => {\n                      calculation.isExpanded = false;\n                    });\n                    this.calculations.unshift(transformedData);\n                    this.isochroneLayer.getSource().addFeatures(olFeatures);\n\n                    this.toggleIsochroneWindow(true, transformedData);\n                    this.isOptionsElVisible = false;\n                  });\n              } else {\n                transformedData.position = \"Multi Isochrone Calculation\";\n                this.calculations.forEach(calculation => {\n                  calculation.isExpanded = false;\n                });\n                transformedData.additionalData[\"features\"] = [];\n                this.multiIsochroneSelectionLayer\n                  .getSource()\n                  .getFeatures()\n                  .forEach(feature => {\n                    const clonedFeature = feature.clone();\n                    transformedData.additionalData[\"features\"].push(\n                      clonedFeature\n                    );\n                  });\n                this.isochroneOverlayLayer\n                  .getSource()\n                  .addFeatures(transformedData.additionalData[\"features\"]);\n                this.calculations.unshift(transformedData);\n                this.isochroneLayer.getSource().addFeatures(olFeatures);\n                this.toggleIsochroneWindow(true, transformedData);\n                this.isOptionsElVisible = false;\n                this.isMapBusy = false;\n                this.isIsochroneBusy = false;\n              }\n            }\n          })\n          .catch(error => {\n            reject(error);\n          })\n          .finally(() => {\n            this.multiIsochroneSelectionLayer.getSource().clear();\n            this.isMapBusy = false;\n            this.isIsochroneBusy = false;\n            this.clear();\n          });\n      });\n    },\n    calculateMultiIsochrone() {\n      const regionType = this.multiIsochroneMethod;\n      const payload = {\n        region_type: regionType\n      };\n      const features = this.multiIsochroneSelectionLayer\n        .getSource()\n        .getFeatures();\n      if (regionType === \"study_area\") {\n        // Get selected study areas ids\n        const region = [];\n        features.forEach(feature => {\n          region.push(feature.get(\"id\").toString());\n        });\n        payload.region = region;\n      } else {\n        // Get polygon geometry\n        const feature = features[0];\n        if (!feature) return;\n        const geometry = feature\n          .getGeometry()\n          .clone()\n          .transform(\"EPSG:3857\", \"EPSG:4326\");\n        const region = geometryToWKT(geometry);\n        payload.region = [region];\n      }\n      payload.amenities = this.selectedPoisOnlyKeys;\n      this.calculateIsochrone(payload);\n    },\n    isCalculationActive(calculation) {\n      if (!this.selectedThematicData) {\n        return false;\n      }\n      if (calculation.id === this.selectedThematicData.calculationId) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    groupedCalculationData(data) {\n      const groupedCalculations = groupBy(data, \"type\");\n      return groupedCalculations;\n    },\n    /**\n     * Configure right-click for isochrone.\n     */\n    setUpCtxMenu() {\n      if (this.contextmenu) {\n        this.contextmenu.on(\"beforeopen\", evt => {\n          const features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"isochrone_layer\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          let closestFeature;\n          let closestDistance;\n          const clickedCoord = toLonLat(evt.coordinate);\n\n          features.forEach(f => {\n            if (f.get(\"calculationType\") === \"single\") {\n              let startingPoint = wktToFeature(f.get(\"starting_point\"));\n              const distance = getDistance(\n                clickedCoord,\n                startingPoint.getGeometry().getCoordinates()\n              );\n              if (!closestDistance || closestDistance > distance) {\n                closestDistance = distance;\n                closestFeature = f;\n              }\n            }\n          });\n\n          if (!closestFeature) {\n            closestFeature = features[0];\n          }\n          if (features.length > 0) {\n            this.contextmenu.extend([\n              \"-\", // this is a separator\n              {\n                text: `<i class=\"fa fa-trash fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.deleteIsochrone\"\n                )}`,\n                label: \"deleteIsochrone\",\n                callback: () => {\n                  const calculation = this.calculations.filter(\n                    calculation =>\n                      calculation.id === closestFeature.get(\"calculationNumber\")\n                  );\n                  if (calculation[0]) {\n                    this.deleteCalculation(calculation[0]);\n                  }\n                }\n              }, // this is a separator\n              {\n                text: `<i class=\"fas fa-redo fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.redoCalculation\"\n                )}`,\n                label: \"redoCalculation\",\n                callback: () => {\n                  const calculation = this.calculations.filter(\n                    calculation =>\n                      calculation.id === closestFeature.get(\"calculationNumber\")\n                  );\n                  if (calculation[0]) {\n                    this.removeCalculation(calculation[0]);\n                    if (calculation[0].calculationType === \"single\") {\n                      this.updatePosition({\n                        coordinate: wktToFeature(\n                          closestFeature.get(\"starting_point\")\n                        )\n                          .getGeometry()\n                          .getCoordinates(),\n                        placeName: \"\"\n                      });\n                    }\n                    this.calculateIsochrone(calculation[0]);\n                  }\n                }\n              }\n            ]);\n          }\n        });\n      }\n    },\n    // ------------RESULTS----------\n    showIsochroneWindow(calculationId) {\n      const calculation = this.calculations.filter(\n        calculation => calculation.id === calculationId\n      );\n      if (calculation && calculation[0]) {\n        this.toggleIsochroneWindow(true, calculation[0]);\n      }\n    },\n    toggleIsochroneWindow(state, calculation) {\n      if (state === false) {\n        this.isochroneLayer\n          .getSource()\n          .getFeatures()\n          .forEach(f => {\n            f.set(\"highlightFeature\", false);\n          });\n        this.selectedThematicData = null;\n        return;\n      }\n      const features = IsochroneUtils.getCalculationFeatures(\n        calculation,\n        this.isochroneLayer\n      );\n\n      features.forEach(f => {\n        f.set(\"highlightFeature\", true);\n      });\n      const pois = IsochroneUtils.getCalculationPoisObject(features);\n      const payload = {\n        calculationId: calculation.id,\n        calculationType: calculation.calculationType,\n        pois: pois\n      };\n      if (calculation.calculationType === \"multiple\") {\n        const multiIsochroneTableData = IsochroneUtils.getMultiIsochroneTableData(\n          features\n        );\n        payload.multiIsochroneTableData = multiIsochroneTableData;\n      }\n      this.selectedThematicData = payload;\n    },\n    // eslint-disable-next-line no-unused-vars\n    toggleIsochroneVisibility(feature, calculation, data) {\n      this.toggleIsochroneFeatureVisibility(feature);\n    },\n    toggleIsochroneFeatureVisibility(feature) {\n      let featureId = feature.id;\n      feature.isVisible = !feature.isVisible;\n      if (featureId) {\n        let isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(featureId);\n        if (isochroneFeature) {\n          isochroneFeature.set(\"isVisible\", feature.isVisible);\n        }\n      }\n    },\n    toggleDownloadDialog(calculation) {\n      this.downloadDialogState = true;\n      this.selectedCalculation = calculation;\n    },\n    toggleCalculation(calculation, modus = null) {\n      let data = calculation.data;\n      if (modus) {\n        data = data.filter(calculation => calculation.modus === modus);\n      }\n      const isIndeterminateState = this.getToggleCalculationCheckboxIndeterminateState(\n        data\n      );\n      data.forEach(isochrone => {\n        let featureId = isochrone.id;\n        let isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(featureId);\n        if (isochroneFeature) {\n          // Edge case for comparision\n\n          if (modus && isochroneFeature.get(\"modus\") === modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n          if (!modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n        }\n      });\n      const visibleCount = data.filter(isochrone => isochrone.isVisible).length;\n      if (visibleCount === 0) {\n        calculation.isVisible = false;\n      } else {\n        calculation.isVisible = true;\n      }\n    },\n    toggleRoadNetwork(state, calculation, type) {\n      const roadNetworkSource = this.isochroneRoadNetworkLayer.getSource();\n      if (calculation.additionalData[type]) {\n        // Network is already fetched\n        const features = calculation.additionalData[type].features;\n        if (state === true) {\n          features.forEach(feature => {\n            roadNetworkSource.addFeature(feature);\n          });\n        } else {\n          features.forEach(feature => {\n            if (roadNetworkSource.hasFeature(feature)) {\n              roadNetworkSource.removeFeature(feature);\n            }\n          });\n        }\n      } else {\n        this.isMapBusy = true;\n        this.isIsochroneBusy = true;\n        // Network is not fetched yet\n        ApiService.get_(\n          `/isochrones/network/${calculation.data[0].isochrone_calculation_id}/${type}?return_type=geobuf`,\n          {\n            responseType: \"arraybuffer\",\n            headers: {\n              Accept: \"application/pdf\"\n            }\n          }\n        )\n          .then(response => {\n            if (response.data) {\n              const olFeatures = geobufToFeatures(response.data, {\n                dataProjection: \"EPSG:4326\",\n                featureProjection: \"EPSG:3857\"\n              });\n              calculation.additionalData[type] = {\n                features: olFeatures,\n                state: true\n              };\n              // Set isochrone calculation speed property for styling purpose\n              const speed = parseFloat(calculation.speed.split(\" \")[0]);\n              const lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n              const highestCostValue = 1200;\n              olFeatures.forEach(feature => {\n                feature.set(\"speed\", speed);\n                const cost = feature.get(\"cost\");\n                const modus = feature.get(\"modus\");\n                let color;\n                if (modus === \"default\") {\n                  color = this.colors[calculation.defaultColorPalette];\n                } else if (modus === \"scenario\") {\n                  color = this.colors[calculation.scenarioColorPalette];\n                }\n                const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n                  lowestCostValue,\n                  highestCostValue,\n                  cost,\n                  color\n                );\n                feature.set(\"color\", interpolatedColor);\n              });\n              roadNetworkSource.addFeatures(olFeatures);\n            }\n          })\n          .catch(error => {\n            console.log(error);\n          })\n          .finally(() => {\n            this.isMapBusy = false;\n            this.isIsochroneBusy = false;\n          });\n      }\n    },\n    toggleStudyArea(state, calculation) {\n      const features = calculation.additionalData[\"features\"];\n      features.forEach(feature => {\n        const hasFeature = this.isochroneOverlayLayer\n          .getSource()\n          .hasFeature(feature);\n        if (state === false && hasFeature) {\n          this.isochroneOverlayLayer.getSource().removeFeature(feature);\n        } else if (state === true && !hasFeature) {\n          this.isochroneOverlayLayer.getSource().addFeature(feature);\n        }\n      });\n    },\n    getPaletteColor(calculation, mode) {\n      const colorKey = `${mode}ColorPalette`;\n      return Object.values(this.colors[calculation[colorKey]]).toString();\n    },\n    toggleColorPickerDialog(calculation, mode) {\n      this.isochroneColorPickerState = true;\n      this.activeCalculation = calculation;\n      this.activeCalculationMode = mode;\n    },\n    getToggleCalculationCheckboxState(calculationData) {\n      const countVisibleFeatures = calculationData.filter(\n        o => o.isVisible === true\n      );\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n      return true;\n    },\n    getToggleCalculationCheckboxIndeterminateState(calculationData) {\n      const countVisibleFeatures = calculationData.filter(\n        o => o.isVisible === true\n      );\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n      if (countVisibleFeatures.length === calculationData.length) {\n        return false;\n      }\n      return true;\n    },\n    getStudyAreaToggleSwitchState(calculation) {\n      const features = calculation.additionalData[\"features\"];\n      let hasFeature = false;\n      features.forEach(feature => {\n        if (this.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n          hasFeature = true;\n        }\n      });\n      return hasFeature;\n    },\n\n    // ------------CLEAR----------\n    deleteAll() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"isochrones.deleteTitle\"),\n          this.$t(\"isochrones.deleteAllMessage\"),\n          { color: this.appColor.primary }\n        )\n        .then(confirm => {\n          if (confirm) {\n            this.calculations.forEach(calculation => {\n              this.removeCalculation(calculation);\n            });\n          }\n        });\n    },\n    removeCalculation(calculation) {\n      let id = calculation.id;\n      if (\n        this.selectedThematicData &&\n        this.selectedThematicData.calculationId === id\n      ) {\n        this.selectedThematicData = null;\n      } else if (this.selectedThematicData) {\n        this.selectedThematicData.calculationId =\n          this.selectedThematicData.calculationId - 1;\n      }\n\n      this.calculations = this.calculations.filter(\n        calculation => calculation.id != id\n      );\n      this.calculations = this.calculations.map(calculation => {\n        if (calculation.id > id) {\n          calculation.id = calculation.id - 1;\n        }\n        return calculation;\n      });\n      const isochroneSource = this.isochroneLayer.getSource();\n      isochroneSource.getFeatures().forEach(isochroneFeature => {\n        const isochroneCalculationNr = isochroneFeature.get(\n          \"calculationNumber\"\n        );\n        if (isochroneCalculationNr === id) {\n          isochroneSource.removeFeature(isochroneFeature);\n        }\n        if (isochroneCalculationNr > id) {\n          const updatedNr = isochroneCalculationNr - 1;\n          if (isochroneFeature.getGeometry().getType() === \"Point\") {\n            isochroneFeature.setId(\"isochrone_marker_\" + updatedNr);\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          } else {\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          }\n        }\n      });\n      const isochroneRoadNetworkLayerSource = this.isochroneRoadNetworkLayer.getSource();\n      Object.keys(calculation.additionalData).forEach(type => {\n        const features = calculation.additionalData[type].features;\n        if (isochroneRoadNetworkLayerSource && features) {\n          features.forEach(feature => {\n            isochroneRoadNetworkLayerSource.removeFeature(feature);\n          });\n        }\n      });\n      // Remove isochrone overlay features\n      if (Array.isArray(calculation.additionalData.features)) {\n        calculation.additionalData.features.forEach(feature => {\n          if (this.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n            this.isochroneOverlayLayer.getSource().removeFeature(feature);\n          }\n        });\n      }\n\n      this.isochroneOverlayLayer.changed();\n    },\n    /**\n     * Clears the map and ol interaction activity\n     */\n    stopIsochroneCalculation() {\n      this.clear();\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n      this.toggleSnackbar({\n        type: \"error\",\n        message: this.$t(\"map.snackbarMessages.calculationCancelled\"),\n        state: true,\n        timeout: 4000\n      });\n    },\n    clear() {\n      if (this.mapClickListener) {\n        unByKey(this.mapClickListener);\n        this.mapClickListener = null;\n      }\n      this.toggleSnackbar({ state: false });\n      this.removeMultiIsochroneInteraction();\n      this.multiIsochroneMethod = null;\n      this.multiIsochronePoiCount = 0;\n      this.stopHelpTooltip();\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.multiIsochroneSelectionLayer.getSource().clear();\n    },\n    stop() {\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n      this.clear();\n    }\n  },\n  watch: {\n    routing() {\n      this.appConfig.routing.forEach(routing => {\n        if (routing.type === this.routing) {\n          this.speed = routing.speed;\n        }\n      });\n    },\n    selectedPois() {\n      if (this.multiIsochroneMethod) {\n        this.countPois();\n      }\n    },\n    type(value) {\n      if (value === \"single\" && this.subStudyAreaLayer.getVisible()) {\n        this.subStudyAreaLayer.setVisible(false);\n      }\n    }\n  },\n  created() {\n    // Set default routing\n    const defaultRouting = this.appConfig.routing[0];\n    this.routing = defaultRouting.type;\n    this.speed = defaultRouting.speed;\n  }\n};\n</script>\n<style lang=\"css\">\n.result-icons {\n  color: \"#4A4A4A\";\n  cursor: pointer;\n}\n.result-icons:hover {\n  color: #30c2ff;\n}\n.delete-icon:hover {\n  color: #ff6060;\n}\n.v-data-table td,\n.v-data-table th {\n  padding: 0 5px;\n}\n.v-data-table th {\n  font-size: 14px;\n}\n.v-data-table td {\n  font-size: 13px;\n}\n.legend {\n  height: 20px;\n  border-radius: 4px;\n  width: 40px;\n}\n\n.colorPalettePicker {\n  height: 20px;\n  border-radius: 4px;\n  width: 50px;\n  cursor: pointer;\n}\n\n.activeIcon {\n  color: #30c2ff;\n}\n.v-input--selection-controls {\n  margin-top: 0px;\n  padding-top: 0px;\n}\n\n.subheader {\n  height: 25px;\n}\n\n.v-chip--label {\n  border-radius: 0px 8px 8px 0px !important;\n}\n\n.result-title {\n  display: inline-block;\n  width: 265px;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.chip-label-custom {\n  display: block;\n  width: 66px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n"],"sourceRoot":"src/components/isochrones"}]}