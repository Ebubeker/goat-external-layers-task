{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/Measure.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/Measure.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport { EventBus } from \"../../../../EventBus\";\nimport { Mapable } from \"../../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../../mixins/InteractionsToggle\";\nimport OlMeasureController from \"../../../../controllers/OlMeasureController\";\nexport default {\n  name: \"measure\",\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts],\n  props: {\n    color: {\n      type: String,\n      default: \"#2BB381\"\n    }\n  },\n  data: function data() {\n    return {\n      measureSpeedDialFab: false,\n      interactionType: \"measure-interaction\",\n      activeMeasureType: \"\",\n      moduleName: \"measuretool\",\n      stroke: \"2\",\n      colors: {\n        selected: \"#3c78d8\",\n        exceptions: [\"#FFFFFF\", \"#000000\"]\n      },\n      transparency: 100,\n      activeId: undefined,\n      measuretoolConf: {\n        strokeColor: \"#ffcc33\",\n        fillColor: \"rgba(255, 204, 51, 0.2)\",\n        sketchStrokeColor: \"rgba(0, 0, 0, 0.5)\",\n        sketchFillColor: \"rgba(255, 255, 255, 0.2)\",\n        sketchVertexStrokeColor: \"rgba(0, 0, 0, 0.7)\",\n        sketchVertexFillColor: \"rgba(255, 255, 255, 0.2)\"\n      }\n    };\n  },\n  methods: {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound: function onMapBound() {\n      var me = this;\n      me.olMapCtrl = new OlMeasureController(me.map, this.measuretoolConf);\n      me.olMapCtrl.createMeasureLayer();\n    },\n    toggle: function toggle(item, type) {\n      var me = this; //Close other interactions.\n\n      EventBus.$emit(\"ol-interaction-activated\", me.interactionType); //1- Set active index of clicked item or remove it\n      //- If type is measure  toggle off drawing section if opened\n\n      me.olMapCtrl.removeInteraction();\n      var id = item.id;\n\n      if (type === \"measure\") {\n        me.closeDrawSection();\n\n        if (me.activeId === id) {\n          me.activeId = undefined;\n          me.activeMeasureType = \"\";\n        } else {\n          this.activeId = id;\n          me.olMapCtrl.addInteraction(item.measureType);\n          me.activeMeasureType = item.measureType;\n          me.map.getTarget().style.cursor = \"pointer\";\n\n          if (this.addKeyupListener) {\n            this.addKeyupListener();\n          }\n        }\n      }\n    },\n\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop: function stop() {\n      var me = this;\n      this.measureSpeedDialFab = false;\n\n      if (this.activeId !== undefined) {\n        this.closeDrawSection();\n        this.activeId = undefined;\n      }\n\n      me.olMapCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.olMapCtrl.clear();\n      this.map.getTarget().style.cursor = \"\";\n    },\n    closeDrawSection: function closeDrawSection() {\n      //Option only for draw section items.\n      var el = this.$refs[this.activeId];\n      if (el) el[0].$el.click();\n    }\n  },\n  mounted: function mounted() {},\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appColor: \"appColor\"\n  }))\n};",{"version":3,"sources":["Measure.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,QAAA;AACA,SAAA,OAAA;AACA,SAAA,YAAA;AACA,SAAA,kBAAA;AACA,OAAA,mBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,MAAA,EAAA,CAAA,kBAAA,EAAA,OAAA,EAAA,YAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA;AADA,GAHA;AAMA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,mBAAA,EAAA,KADA;AAEA,MAAA,eAAA,EAAA,qBAFA;AAGA,MAAA,iBAAA,EAAA,EAHA;AAIA,MAAA,UAAA,EAAA,aAJA;AAKA,MAAA,MAAA,EAAA,GALA;AAMA,MAAA,MAAA,EAAA;AACA,QAAA,QAAA,EAAA,SADA;AAEA,QAAA,UAAA,EAAA,CAAA,SAAA,EAAA,SAAA;AAFA,OANA;AAUA,MAAA,YAAA,EAAA,GAVA;AAWA,MAAA,QAAA,EAAA,SAXA;AAYA,MAAA,eAAA,EAAA;AACA,QAAA,WAAA,EAAA,SADA;AAEA,QAAA,SAAA,EAAA,yBAFA;AAGA,QAAA,iBAAA,EAAA,oBAHA;AAIA,QAAA,eAAA,EAAA,0BAJA;AAKA,QAAA,uBAAA,EAAA,oBALA;AAMA,QAAA,qBAAA,EAAA;AANA;AAZA,KAAA;AAAA,GANA;AA2BA,EAAA,OAAA,EAAA;AACA;;;AAGA,IAAA,UAJA,wBAIA;AACA,UAAA,EAAA,GAAA,IAAA;AACA,MAAA,EAAA,CAAA,SAAA,GAAA,IAAA,mBAAA,CAAA,EAAA,CAAA,GAAA,EAAA,KAAA,eAAA,CAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,kBAAA;AACA,KARA;AASA,IAAA,MATA,kBASA,IATA,EASA,IATA,EASA;AACA,UAAA,EAAA,GAAA,IAAA,CADA,CAGA;;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,0BAAA,EAAA,EAAA,CAAA,eAAA,EAJA,CAMA;AACA;;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,iBAAA;AAEA,UAAA,EAAA,GAAA,IAAA,CAAA,EAAA;;AACA,UAAA,IAAA,KAAA,SAAA,EAAA;AACA,QAAA,EAAA,CAAA,gBAAA;;AACA,YAAA,EAAA,CAAA,QAAA,KAAA,EAAA,EAAA;AACA,UAAA,EAAA,CAAA,QAAA,GAAA,SAAA;AACA,UAAA,EAAA,CAAA,iBAAA,GAAA,EAAA;AACA,SAHA,MAGA;AACA,eAAA,QAAA,GAAA,EAAA;AACA,UAAA,EAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,WAAA;AACA,UAAA,EAAA,CAAA,iBAAA,GAAA,IAAA,CAAA,WAAA;AACA,UAAA,EAAA,CAAA,GAAA,CAAA,SAAA,GAAA,KAAA,CAAA,MAAA,GAAA,SAAA;;AACA,cAAA,KAAA,gBAAA,EAAA;AACA,iBAAA,gBAAA;AACA;AACA;AACA;AACA,KAnCA;;AAqCA;;;AAGA,IAAA,IAxCA,kBAwCA;AACA,UAAA,EAAA,GAAA,IAAA;AACA,WAAA,mBAAA,GAAA,KAAA;;AACA,UAAA,KAAA,QAAA,KAAA,SAAA,EAAA;AACA,aAAA,gBAAA;AACA,aAAA,QAAA,GAAA,SAAA;AACA;;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,iBAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA,eAAA;AACA,WAAA,SAAA,CAAA,KAAA;AACA,WAAA,GAAA,CAAA,SAAA,GAAA,KAAA,CAAA,MAAA,GAAA,EAAA;AACA,KAnDA;AAoDA,IAAA,gBApDA,8BAoDA;AACA;AACA,UAAA,EAAA,GAAA,KAAA,KAAA,CAAA,KAAA,QAAA,CAAA;AACA,UAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA;AACA;AAxDA,GA3BA;AAsFA,EAAA,OAtFA,qBAsFA,CAAA,CAtFA;AAuFA,EAAA,QAAA,oBACA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAAA,CADA;AAvFA,CAAA","sourcesContent":["<template>\n  <div>\n    <v-speed-dial\n      v-if=\"!activeId\"\n      v-model=\"measureSpeedDialFab\"\n      direction=\"right\"\n      class=\"measure-button\"\n      transition=\"slide-x-reverse-transition\"\n    >\n      <template v-slot:activator>\n        <v-btn\n          v-if=\"!activeId\"\n          :color=\"!activeId && measureSpeedDialFab ? 'error' : appColor.primary\"\n          dark\n          x-small\n          fab\n        >\n          <v-icon v-if=\"!measureSpeedDialFab\" small>\n            fa-solid fa-ruler-combined\n          </v-icon>\n          <v-icon v-else>\n            close\n          </v-icon>\n        </v-btn>\n      </template>\n      <v-tooltip top>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn\n            @click=\"\n              toggle(\n                { measureType: 'distance', id: 1, name: 'distance' },\n                'measure'\n              )\n            \"\n            v-on=\"on\"\n            :color=\"appColor.primary\"\n            fab\n            dark\n            x-small\n          >\n            <v-icon dark>fas fa-ruler</v-icon>\n          </v-btn>\n        </template>\n        <span>{{ $t(`appBar.drawAndMeasure.measure.length`) }}</span>\n      </v-tooltip>\n      <v-tooltip top>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn\n            @click=\"\n              toggle({ measureType: 'area', id: 1, name: 'area' }, 'measure')\n            \"\n            v-on=\"on\"\n            :color=\"appColor.primary\"\n            fab\n            dark\n            x-small\n          >\n            <v-icon dark>fa-solid fa-ruler-combined</v-icon>\n          </v-btn>\n        </template>\n        <span>{{ $t(`appBar.drawAndMeasure.measure.area`) }}</span>\n      </v-tooltip>\n    </v-speed-dial>\n    <v-btn\n      class=\"measure-button\"\n      v-if=\"activeId\"\n      color=\"error\"\n      dark\n      @click=\"stop()\"\n      x-small\n      fab\n    >\n      <v-icon>\n        close\n      </v-icon>\n    </v-btn>\n  </div>\n</template>\n<script>\nimport { mapGetters } from \"vuex\";\nimport { EventBus } from \"../../../../EventBus\";\nimport { Mapable } from \"../../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../../mixins/InteractionsToggle\";\nimport OlMeasureController from \"../../../../controllers/OlMeasureController\";\n\nexport default {\n  name: \"measure\",\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts],\n  props: {\n    color: { type: String, default: \"#2BB381\" }\n  },\n  data: () => ({\n    measureSpeedDialFab: false,\n    interactionType: \"measure-interaction\",\n    activeMeasureType: \"\",\n    moduleName: \"measuretool\",\n    stroke: \"2\",\n    colors: {\n      selected: \"#3c78d8\",\n      exceptions: [\"#FFFFFF\", \"#000000\"]\n    },\n    transparency: 100,\n    activeId: undefined,\n    measuretoolConf: {\n      strokeColor: \"#ffcc33\",\n      fillColor: \"rgba(255, 204, 51, 0.2)\",\n      sketchStrokeColor: \"rgba(0, 0, 0, 0.5)\",\n      sketchFillColor: \"rgba(255, 255, 255, 0.2)\",\n      sketchVertexStrokeColor: \"rgba(0, 0, 0, 0.7)\",\n      sketchVertexFillColor: \"rgba(255, 255, 255, 0.2)\"\n    }\n  }),\n  methods: {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      const me = this;\n      me.olMapCtrl = new OlMeasureController(me.map, this.measuretoolConf);\n      me.olMapCtrl.createMeasureLayer();\n    },\n    toggle(item, type) {\n      const me = this;\n\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", me.interactionType);\n\n      //1- Set active index of clicked item or remove it\n      //- If type is measure  toggle off drawing section if opened\n      me.olMapCtrl.removeInteraction();\n\n      const id = item.id;\n      if (type === \"measure\") {\n        me.closeDrawSection();\n        if (me.activeId === id) {\n          me.activeId = undefined;\n          me.activeMeasureType = \"\";\n        } else {\n          this.activeId = id;\n          me.olMapCtrl.addInteraction(item.measureType);\n          me.activeMeasureType = item.measureType;\n          me.map.getTarget().style.cursor = \"pointer\";\n          if (this.addKeyupListener) {\n            this.addKeyupListener();\n          }\n        }\n      }\n    },\n\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop() {\n      const me = this;\n      this.measureSpeedDialFab = false;\n      if (this.activeId !== undefined) {\n        this.closeDrawSection();\n        this.activeId = undefined;\n      }\n      me.olMapCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.olMapCtrl.clear();\n      this.map.getTarget().style.cursor = \"\";\n    },\n    closeDrawSection() {\n      //Option only for draw section items.\n      let el = this.$refs[this.activeId];\n      if (el) el[0].$el.click();\n    }\n  },\n\n  mounted() {},\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.measure-button {\n  z-index: 1;\n}\n</style>\n"],"sourceRoot":"src/components/viewer/ol/controls"}]}