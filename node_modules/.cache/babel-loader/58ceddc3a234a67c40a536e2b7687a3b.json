{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochroneColorPicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochroneColorPicker.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nexport default {\n  props: {\n    selectedMode: {\n      type: String,\n      required: false\n    },\n    calculation: {\n      type: Object,\n      required: false\n    },\n    visible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  methods: {\n    getPaletteColor: function getPaletteColor(color) {\n      return Object.values(color).toString();\n    },\n    colorChanged: function colorChanged() {\n      var _this = this;\n\n      var color = this.colors[this.calculation[\"\".concat(this.selectedMode, \"ColorPalette\")]]; // Update isochrone color\n\n      this.calculation.data.forEach(function (obj) {\n        var isochroneFeature = _this.isochroneLayer.getSource().getFeatureById(obj.id);\n\n        if (_this.selectedMode == isochroneFeature.get(\"modus\")) {\n          console.log(_this.selectedMode);\n          var step = isochroneFeature.get(\"step\");\n          var interpolatedColor = IsochroneUtils.getInterpolatedColor(1, 20, parseInt(step / 60), color);\n          isochroneFeature.set(\"color\", interpolatedColor); // legend el color\n\n          obj.color = interpolatedColor;\n        }\n      }); // Update network color\n\n      if (!this.calculation.additionalData[this.selectedMode]) return;\n      this.calculation.additionalData[this.selectedMode].features.forEach(function (feature) {\n        var cost = feature.get(\"cost\");\n        var lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n\n        var highestCostValue = 1200;\n        var interpolatedColor = IsochroneUtils.getInterpolatedColor(lowestCostValue, highestCostValue, cost, color);\n        feature.set(\"color\", interpolatedColor);\n      });\n    }\n  },\n  watch: {},\n  computed: _objectSpread({\n    show: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    }\n  }, mapGetters(\"isochrones\", {\n    isochroneLayer: \"isochroneLayer\",\n    colors: \"colors\"\n  }), {}, mapGetters(\"app\", {\n    appColor: \"appColor\"\n  }))\n};",{"version":3,"sources":["IsochroneColorPicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,cAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,YAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KADA;AAEA,IAAA,WAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KAFA;AAGA,IAAA,OAAA,EAAA;AAAA,MAAA,IAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA;AAAA;AAHA,GADA;AAMA,EAAA,IAAA,EAAA;AAAA,WAAA,EAAA;AAAA,GANA;AAOA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,KADA,EACA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,KAAA,EAAA,QAAA,EAAA;AACA,KAHA;AAIA,IAAA,YAJA,0BAIA;AAAA;;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CACA,KAAA,WAAA,WAAA,KAAA,YAAA,kBADA,CAAA,CADA,CAKA;;AACA,WAAA,WAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,gBAAA,GAAA,KAAA,CAAA,cAAA,CACA,SADA,GAEA,cAFA,CAEA,GAAA,CAAA,EAFA,CAAA;;AAGA,YAAA,KAAA,CAAA,YAAA,IAAA,gBAAA,CAAA,GAAA,CAAA,OAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,YAAA;AACA,cAAA,IAAA,GAAA,gBAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,cAAA,iBAAA,GAAA,cAAA,CAAA,oBAAA,CACA,CADA,EAEA,EAFA,EAGA,QAAA,CAAA,IAAA,GAAA,EAAA,CAHA,EAIA,KAJA,CAAA;AAMA,UAAA,gBAAA,CAAA,GAAA,CAAA,OAAA,EAAA,iBAAA,EATA,CAUA;;AACA,UAAA,GAAA,CAAA,KAAA,GAAA,iBAAA;AACA;AACA,OAjBA,EANA,CAyBA;;AACA,UAAA,CAAA,KAAA,WAAA,CAAA,cAAA,CAAA,KAAA,YAAA,CAAA,EAAA;AACA,WAAA,WAAA,CAAA,cAAA,CAAA,KAAA,YAAA,EAAA,QAAA,CAAA,OAAA,CACA,UAAA,OAAA,EAAA;AACA,YAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,YAAA,eAAA,GAAA,CAAA,CAFA,CAEA;;AACA,YAAA,gBAAA,GAAA,IAAA;AACA,YAAA,iBAAA,GAAA,cAAA,CAAA,oBAAA,CACA,eADA,EAEA,gBAFA,EAGA,IAHA,EAIA,KAJA,CAAA;AAMA,QAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,iBAAA;AACA,OAZA;AAcA;AA7CA,GAPA;AAsDA,EAAA,KAAA,EAAA,EAtDA;AAuDA,EAAA,QAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,OAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,KAJA,EAIA;AACA,YAAA,CAAA,KAAA,EAAA;AACA,eAAA,KAAA,CAAA,OAAA;AACA;AACA;AARA;AADA,KAWA,UAAA,CAAA,YAAA,EAAA;AACA,IAAA,cAAA,EAAA,gBADA;AAEA,IAAA,MAAA,EAAA;AAFA,GAAA,CAXA,MAeA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAAA,CAfA;AAvDA,CAAA","sourcesContent":["<template>\n  <v-dialog v-model=\"show\" scrollable max-width=\"330\" v-if=\"calculation\">\n    <v-card>\n      <v-app-bar :color=\"appColor.primary\" dark>\n        <v-app-bar-nav-icon><v-icon>fas fa-palette</v-icon></v-app-bar-nav-icon>\n        <v-toolbar-title>{{\n          $t(\"isochrones.pickColor.title\")\n        }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-app-bar-nav-icon @click.stop=\"show = false\"\n          ><v-icon>close</v-icon></v-app-bar-nav-icon\n        >\n      </v-app-bar>\n      <vue-scroll>\n        <v-container class=\"pb-0\">\n          <v-alert\n            border=\"left\"\n            colored-border\n            class=\"mb-0 mt-2 mx-1 elevation-2\"\n            icon=\"info\"\n            :color=\"appColor.primary\"\n            dense\n          >\n            <span v-html=\"$t('isochrones.results.colorMessage')\"></span>\n          </v-alert>\n          <v-radio-group\n            @change=\"colorChanged\"\n            class=\"ml-3 mt-3  mb-0\"\n            v-model=\"calculation[`${selectedMode}ColorPalette`]\"\n          >\n            <v-layout\n              row\n              wrap\n              align-center\n              class=\"mb-3\"\n              v-for=\"(color, key, index) in colors\"\n              :key=\"index\"\n            >\n              <v-radio :value=\"key\">\n                <template v-slot:label>\n                  <div\n                    class=\"colorPalettePicker\"\n                    :style=\"{\n                      backgroundImage: `linear-gradient(to right, ${getPaletteColor(\n                        color\n                      )})`\n                    }\"\n                  ></div>\n                </template>\n              </v-radio>\n            </v-layout>\n          </v-radio-group>\n        </v-container>\n      </vue-scroll>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\n\nexport default {\n  props: {\n    selectedMode: { type: String, required: false },\n    calculation: { type: Object, required: false },\n    visible: { type: Boolean, required: true }\n  },\n  data: () => ({}),\n  methods: {\n    getPaletteColor(color) {\n      return Object.values(color).toString();\n    },\n    colorChanged() {\n      const color = this.colors[\n        this.calculation[`${this.selectedMode}ColorPalette`]\n      ];\n\n      // Update isochrone color\n      this.calculation.data.forEach(obj => {\n        const isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(obj.id);\n        if (this.selectedMode == isochroneFeature.get(\"modus\")) {\n          console.log(this.selectedMode);\n          const step = isochroneFeature.get(\"step\");\n          const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n            1,\n            20,\n            parseInt(step / 60),\n            color\n          );\n          isochroneFeature.set(\"color\", interpolatedColor);\n          // legend el color\n          obj.color = interpolatedColor;\n        }\n      });\n\n      // Update network color\n      if (!this.calculation.additionalData[this.selectedMode]) return;\n      this.calculation.additionalData[this.selectedMode].features.forEach(\n        feature => {\n          const cost = feature.get(\"cost\");\n          const lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n          const highestCostValue = 1200;\n          const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n            lowestCostValue,\n            highestCostValue,\n            cost,\n            color\n          );\n          feature.set(\"color\", interpolatedColor);\n        }\n      );\n    }\n  },\n  watch: {},\n  computed: {\n    show: {\n      get() {\n        return this.visible;\n      },\n      set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    },\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\",\n      colors: \"colors\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.colorPalettePicker {\n  height: 20px;\n  border-radius: 5px;\n  width: 265px;\n}\n</style>\n"],"sourceRoot":"src/components/isochrones"}]}