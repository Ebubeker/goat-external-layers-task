{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/changeStyle/FillVectorStyle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/changeStyle/FillVectorStyle.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\nimport { debounce } from \"../../../utils/Helpers\";\nexport default {\n  props: [\"item\", \"ruleIndex\"],\n  mixins: [Legend],\n  data: function data() {\n    return {\n      isExpanded: true,\n      tab: null,\n      hexa: \"hexa\",\n      fillColor: null,\n      outLineColor: null,\n      outLineWidth: null,\n      dialogue: false\n    };\n  },\n  computed: _objectSpread({}, mapGetters(\"app\", {\n    appColor: \"appColor\"\n  }), {}, mapFields(\"map\", {\n    vectorTileStyles: \"vectorTileStyles\",\n    vectorTileStylesCopy: \"vectorTileStylesCopy\"\n  }), {\n    style: function style() {\n      return this.filterStylesOnActiveModeByLayerName(this.item.get(\"name\")).rules[this.ruleIndex];\n    }\n  }),\n  created: function created() {\n    if (this.dialogue == true) {\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    }\n\n    this.dialogue = !this.dialogue;\n    this.fillColor = this.style.symbolizers[0].color;\n    this.outLineWidth = this.style.symbolizers[0].outlineWidth;\n\n    if (this.outLineWidth == 0) {\n      this.style.symbolizers[0].outlineWidth = 0.001;\n      this.item.getSource().changed();\n    }\n\n    this.outLineColor = this.style.symbolizers[0].outlineColor;\n  },\n  methods: {\n    expand: function expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close: function close() {\n      this.dialogue = false; //Refresh the legend\n\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    },\n    resetStyle: function resetStyle() {\n      /*\n        Function to reset the style of layer at attribute level\n      */\n      //Get original style for layer attribute\n      var sourceStyle = this.vectorTileStylesCopy[this.item.get(\"name\")].style.rules[this.ruleIndex]; //Get present style for layer attribute\n\n      var targetStyle = this.vectorTileStyles[this.item.get(\"name\")].style.rules[this.ruleIndex]; //Assign original style to present style to reset\n\n      targetStyle.symbolizers[0].color = sourceStyle.symbolizers[0].color;\n      targetStyle.symbolizers[0].outlineWidth = sourceStyle.symbolizers[0].outlineWidth;\n      targetStyle.symbolizers[0].outlineColor = sourceStyle.symbolizers[0].outlineColor;\n      this.fillColor = targetStyle.symbolizers[0].color;\n      this.outLineWidth = targetStyle.symbolizers[0].outlineWidth;\n\n      if (this.outLineWidth == 0) {\n        targetStyle.symbolizers[0].outlineWidth = 0.001;\n      }\n\n      this.outLineColor = targetStyle.symbolizers[0].outlineColor;\n      this.item.getSource().changed();\n    },\n    updateLegendRow: debounce(function () {\n      this.item.set(\"attributeDisplayStatusKey\", this.item.get(\"attributeDisplayStatusKey\") + 1);\n    }, 60),\n    onFillColorChange: function onFillColorChange(value) {\n      //Change color of polygon fill on inpu change\n      this.style.symbolizers[0].color = value.slice(0, 7);\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onOutLineColorChange: function onOutLineColorChange(value) {\n      //Change color of polygon boundary on input change\n      this.style.symbolizers[0].outlineColor = value;\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onOutLineWidthChange: function onOutLineWidthChange() {\n      //Change width of Polygon boundary on input change\n      if (this.outLineWidth == 0) {\n        this.style.symbolizers[0].outlineWidth = 0.001;\n      } else {\n        this.style.symbolizers[0].outlineWidth = this.outLineWidth;\n      }\n\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    }\n  }\n};",{"version":3,"sources":["FillVectorStyle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,SAAA,QAAA,iBAAA;AACA,OAAA,MAAA;AACA,SAAA,QAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,MAAA,EAAA,WAAA,CADA;AAEA,EAAA,MAAA,EAAA,CAAA,MAAA,CAFA;AAGA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,UAAA,EAAA,IADA;AAEA,MAAA,GAAA,EAAA,IAFA;AAGA,MAAA,IAAA,EAAA,MAHA;AAIA,MAAA,SAAA,EAAA,IAJA;AAKA,MAAA,YAAA,EAAA,IALA;AAMA,MAAA,YAAA,EAAA,IANA;AAOA,MAAA,QAAA,EAAA;AAPA,KAAA;AAAA,GAHA;AAYA,EAAA,QAAA,oBACA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAAA,CADA,MAIA,SAAA,CAAA,KAAA,EAAA;AACA,IAAA,gBAAA,EAAA,kBADA;AAEA,IAAA,oBAAA,EAAA;AAFA,GAAA,CAJA;AAQA,IAAA,KARA,mBAQA;AACA,aAAA,KAAA,mCAAA,CAAA,KAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EACA,KADA,CACA,KAAA,SADA,CAAA;AAEA;AAXA,IAZA;AAyBA,EAAA,OAzBA,qBAyBA;AACA,QAAA,KAAA,QAAA,IAAA,IAAA,EAAA;AACA;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,cAAA,EAAA,KAAA,IAAA,CAAA,GAAA,CAAA,cAAA,IAAA,CAAA;AACA;;AACA,SAAA,QAAA,GAAA,CAAA,KAAA,QAAA;AACA,SAAA,SAAA,GAAA,KAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,KAAA;AACA,SAAA,YAAA,GAAA,KAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA;;AACA,QAAA,KAAA,YAAA,IAAA,CAAA,EAAA;AACA,WAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GAAA,KAAA;AACA,WAAA,IAAA,CAAA,SAAA,GAAA,OAAA;AACA;;AACA,SAAA,YAAA,GAAA,KAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA;AACA,GAtCA;AAuCA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA,WAAA,UAAA,GAAA,CAAA,KAAA,UAAA;AACA,KAHA;AAIA,IAAA,KAJA,mBAIA;AACA,WAAA,QAAA,GAAA,KAAA,CADA,CAEA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,cAAA,EAAA,KAAA,IAAA,CAAA,GAAA,CAAA,cAAA,IAAA,CAAA;AACA,KARA;AASA,IAAA,UATA,wBASA;AACA;;;AAIA;AACA,UAAA,WAAA,GAAA,KAAA,oBAAA,CAAA,KAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,KAAA,CACA,KADA,CACA,KAAA,SADA,CAAA,CANA,CASA;;AACA,UAAA,WAAA,GAAA,KAAA,gBAAA,CAAA,KAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,KAAA,CACA,KADA,CACA,KAAA,SADA,CAAA,CAVA,CAaA;;AACA,MAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,KAAA,GAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,KAAA;AACA,MAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GACA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YADA;AAGA,MAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GACA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YADA;AAGA,WAAA,SAAA,GAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,KAAA;AACA,WAAA,YAAA,GAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA;;AACA,UAAA,KAAA,YAAA,IAAA,CAAA,EAAA;AACA,QAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GAAA,KAAA;AACA;;AACA,WAAA,YAAA,GAAA,WAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA;AAEA,WAAA,IAAA,CAAA,SAAA,GAAA,OAAA;AACA,KAtCA;AAuCA,IAAA,eAAA,EAAA,QAAA,CAAA,YAAA;AACA,WAAA,IAAA,CAAA,GAAA,CACA,2BADA,EAEA,KAAA,IAAA,CAAA,GAAA,CAAA,2BAAA,IAAA,CAFA;AAIA,KALA,EAKA,EALA,CAvCA;AA6CA,IAAA,iBA7CA,6BA6CA,KA7CA,EA6CA;AACA;AACA,WAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,WAAA,IAAA,CAAA,SAAA,GAAA,OAAA;AACA,WAAA,eAAA;AACA,KAlDA;AAoDA,IAAA,oBApDA,gCAoDA,KApDA,EAoDA;AACA;AACA,WAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GAAA,KAAA;AACA,WAAA,IAAA,CAAA,SAAA,GAAA,OAAA;AACA,WAAA,eAAA;AACA,KAzDA;AA0DA,IAAA,oBA1DA,kCA0DA;AACA;AACA,UAAA,KAAA,YAAA,IAAA,CAAA,EAAA;AACA,aAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GAAA,KAAA;AACA,OAFA,MAEA;AACA,aAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA,YAAA,GAAA,KAAA,YAAA;AACA;;AACA,WAAA,IAAA,CAAA,SAAA,GAAA,OAAA;AACA,WAAA,eAAA;AACA;AAnEA;AAvCA,CAAA","sourcesContent":["<template>\n  <vue-scroll>\n    <v-tabs grow v-model=\"tab\" style=\"width: 400px; margin:auto;\">\n      <v-tab :key=\"1\">\n        <v-badge>\n          <b>{{ $t(\"appBar.stylePanel.fillColor\") }}</b>\n        </v-badge>\n      </v-tab>\n      <v-tab :key=\"2\">\n        <v-badge>\n          <b>{{ $t(\"appBar.stylePanel.outlineColorAndWidth\") }}</b>\n        </v-badge>\n      </v-tab>\n    </v-tabs>\n    <v-tabs-items v-model=\"tab\">\n      <v-tab-item :key=\"1\">\n        <v-color-picker\n          class=\"elevation-0\"\n          canvas-height=\"100\"\n          width=\"400\"\n          style=\"margin:auto; margin-bottom: 20px;\"\n          :mode.sync=\"hexa\"\n          v-model=\"fillColor\"\n          @input=\"onFillColorChange($event)\"\n        >\n        </v-color-picker>\n      </v-tab-item>\n      <v-tab-item :key=\"2\">\n        <span\n          class=\"d-flex mb-6\"\n          style=\"width:400px;margin:10px auto 0px auto;\"\n        >\n          <v-text-field\n            type=\"number\"\n            :min=\"0\"\n            :max=\"10\"\n            outlined\n            tile\n            v-model=\"outLineWidth\"\n            :step=\"1\"\n            label=\"Outline Width\"\n            style=\"height:50px;\"\n            @input=\"onOutLineWidthChange()\"\n          ></v-text-field>\n        </span>\n        <v-color-picker\n          class=\"elevation-0\"\n          canvas-height=\"100\"\n          width=\"400\"\n          style=\"margin:auto; margin-bottom: 20px;\"\n          :mode.sync=\"hexa\"\n          v-model=\"outLineColor\"\n          @input=\"onOutLineColorChange($event)\"\n        >\n        </v-color-picker>\n      </v-tab-item>\n    </v-tabs-items>\n    <v-btn\n      color=\"warning\"\n      dark\n      @click=\"resetStyle\"\n      style=\"width:100%;background-color: #2bb381 !important;\"\n    >\n      Reset Style\n    </v-btn>\n  </vue-scroll>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\nimport { debounce } from \"../../../utils/Helpers\";\n\nexport default {\n  props: [\"item\", \"ruleIndex\"],\n  mixins: [Legend],\n  data: () => ({\n    isExpanded: true,\n    tab: null,\n    hexa: \"hexa\",\n    fillColor: null,\n    outLineColor: null,\n    outLineWidth: null,\n    dialogue: false\n  }),\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    }),\n    style() {\n      return this.filterStylesOnActiveModeByLayerName(this.item.get(\"name\"))\n        .rules[this.ruleIndex];\n    }\n  },\n  created() {\n    if (this.dialogue == true) {\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    }\n    this.dialogue = !this.dialogue;\n    this.fillColor = this.style.symbolizers[0].color;\n    this.outLineWidth = this.style.symbolizers[0].outlineWidth;\n    if (this.outLineWidth == 0) {\n      this.style.symbolizers[0].outlineWidth = 0.001;\n      this.item.getSource().changed();\n    }\n    this.outLineColor = this.style.symbolizers[0].outlineColor;\n  },\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.dialogue = false;\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    },\n    resetStyle() {\n      /*\n        Function to reset the style of layer at attribute level\n      */\n\n      //Get original style for layer attribute\n      let sourceStyle = this.vectorTileStylesCopy[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Get present style for layer attribute\n      let targetStyle = this.vectorTileStyles[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Assign original style to present style to reset\n      targetStyle.symbolizers[0].color = sourceStyle.symbolizers[0].color;\n      targetStyle.symbolizers[0].outlineWidth =\n        sourceStyle.symbolizers[0].outlineWidth;\n\n      targetStyle.symbolizers[0].outlineColor =\n        sourceStyle.symbolizers[0].outlineColor;\n\n      this.fillColor = targetStyle.symbolizers[0].color;\n      this.outLineWidth = targetStyle.symbolizers[0].outlineWidth;\n      if (this.outLineWidth == 0) {\n        targetStyle.symbolizers[0].outlineWidth = 0.001;\n      }\n      this.outLineColor = targetStyle.symbolizers[0].outlineColor;\n\n      this.item.getSource().changed();\n    },\n    updateLegendRow: debounce(function() {\n      this.item.set(\n        \"attributeDisplayStatusKey\",\n        this.item.get(\"attributeDisplayStatusKey\") + 1\n      );\n    }, 60),\n    onFillColorChange(value) {\n      //Change color of polygon fill on inpu change\n      this.style.symbolizers[0].color = value.slice(0, 7);\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n\n    onOutLineColorChange(value) {\n      //Change color of polygon boundary on input change\n      this.style.symbolizers[0].outlineColor = value;\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onOutLineWidthChange() {\n      //Change width of Polygon boundary on input change\n      if (this.outLineWidth == 0) {\n        this.style.symbolizers[0].outlineWidth = 0.001;\n      } else {\n        this.style.symbolizers[0].outlineWidth = this.outLineWidth;\n      }\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    }\n  }\n};\n</script>\n<style>\n.v-dialog {\n  box-shadow: none;\n}\n</style>\n"],"sourceRoot":"src/components/layers/changeStyle"}]}