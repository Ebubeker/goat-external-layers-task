{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochronesDownload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochronesDownload.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport { saveAs } from \"file-saver\";\nimport ApiService from \"../../services/api.service\";\nexport default {\n  props: {\n    calculation: {\n      type: Object,\n      required: false\n    },\n    visible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      name: \"isochrones-export\",\n      selected: \"GeoJson\",\n      items: [\"GeoJson\", \"Shapefile\", \"XLSX\"],\n      isDownloading: false\n    };\n  },\n  methods: {\n    download: function download() {\n      var _this = this;\n\n      var me = this;\n      var exportName = me.name;\n\n      if (me.name.length === 0) {\n        exportName = \"export\";\n      }\n\n      this.isDownloading = true;\n      var isochrone_calculation_id = me.calculation.data[0].isochrone_calculation_id;\n      ApiService.get_(\"/isochrones/export/\".concat(isochrone_calculation_id, \"?return_type=\").concat(me.selected), {\n        responseType: \"blob\"\n      }).then(function (response) {\n        saveAs(response.data, \"\".concat(exportName, \".zip\"));\n      }).finally(function () {\n        _this.isDownloading = false;\n        me.show = false;\n      });\n    }\n  },\n  computed: _objectSpread({}, mapGetters(\"isochrones\", {\n    isochroneLayer: \"isochroneLayer\"\n  }), {}, mapGetters(\"app\", {\n    appColor: \"appColor\",\n    openapiConfig: \"openapiConfig\"\n  }), {\n    show: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    }\n  }),\n  created: function created() {\n    this.items = this.openapiConfig.components.schemas.IsochroneExportType.enum;\n    this.selected = this.items[0];\n  }\n};",{"version":3,"sources":["IsochronesDownload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,MAAA,QAAA,YAAA;AACA,OAAA,UAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KADA;AAEA,IAAA,OAAA,EAAA;AAAA,MAAA,IAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA;AAAA;AAFA,GADA;AAKA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,IAAA,EAAA,mBADA;AAEA,MAAA,QAAA,EAAA,SAFA;AAGA,MAAA,KAAA,EAAA,CAAA,SAAA,EAAA,WAAA,EAAA,MAAA,CAHA;AAIA,MAAA,aAAA,EAAA;AAJA,KAAA;AAAA,GALA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA,UAAA,EAAA,GAAA,IAAA;AACA,UAAA,UAAA,GAAA,EAAA,CAAA,IAAA;;AACA,UAAA,EAAA,CAAA,IAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,QAAA,UAAA,GAAA,QAAA;AACA;;AACA,WAAA,aAAA,GAAA,IAAA;AACA,UAAA,wBAAA,GACA,EAAA,CAAA,WAAA,CAAA,IAAA,CAAA,CAAA,EAAA,wBADA;AAEA,MAAA,UAAA,CAAA,IAAA,8BACA,wBADA,0BACA,EAAA,CAAA,QADA,GAEA;AAAA,QAAA,YAAA,EAAA;AAAA,OAFA,EAIA,IAJA,CAIA,UAAA,QAAA,EAAA;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,IAAA,YAAA,UAAA,UAAA;AACA,OANA,EAOA,OAPA,CAOA,YAAA;AACA,QAAA,KAAA,CAAA,aAAA,GAAA,KAAA;AACA,QAAA,EAAA,CAAA,IAAA,GAAA,KAAA;AACA,OAVA;AAWA;AArBA,GAXA;AAkCA,EAAA,QAAA,oBACA,UAAA,CAAA,YAAA,EAAA;AAAA,IAAA,cAAA,EAAA;AAAA,GAAA,CADA,MAEA,UAAA,CAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA,UADA;AAEA,IAAA,aAAA,EAAA;AAFA,GAAA,CAFA;AAMA,IAAA,IAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,OAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,KAJA,EAIA;AACA,YAAA,CAAA,KAAA,EAAA;AACA,eAAA,KAAA,CAAA,OAAA;AACA;AACA;AARA;AANA,IAlCA;AAmDA,EAAA,OAnDA,qBAmDA;AACA,SAAA,KAAA,GAAA,KAAA,aAAA,CAAA,UAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,IAAA;AACA,SAAA,QAAA,GAAA,KAAA,KAAA,CAAA,CAAA,CAAA;AACA;AAtDA,CAAA","sourcesContent":["<template>\n  <v-dialog v-model=\"show\" scrollable max-width=\"350px\">\n    <v-card>\n      <v-app-bar :color=\"appColor.primary\" dark>\n        <v-app-bar-nav-icon\n          ><v-icon>fa-solid fa-download</v-icon></v-app-bar-nav-icon\n        >\n        <v-toolbar-title>{{ $t(\"isochrones.download.title\") }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-app-bar-nav-icon @click.stop=\"show = false\"\n          ><v-icon>close</v-icon></v-app-bar-nav-icon\n        >\n      </v-app-bar>\n      <vue-scroll>\n        <v-card-title primary-title>\n          <v-flex xs12>\n            <v-text-field\n              :label=\"$t(`isochrones.download.fileName`)\"\n              v-model=\"name\"\n              type=\"text\"\n            ></v-text-field>\n            <v-select\n              :items=\"items\"\n              v-model=\"selected\"\n              :label=\"$t(`isochrones.download.outputFormat`)\"\n            ></v-select>\n          </v-flex>\n        </v-card-title>\n      </vue-scroll>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn\n          class=\"white--text\"\n          @click=\"download()\"\n          :loading=\"isDownloading\"\n          :color=\"appColor.primary\"\n          ><v-icon left>fas fa-download</v-icon\n          >{{ $t(\"isochrones.download.download\") }}</v-btn\n        >\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport { saveAs } from \"file-saver\";\nimport ApiService from \"../../services/api.service\";\n\nexport default {\n  props: {\n    calculation: { type: Object, required: false },\n    visible: { type: Boolean, required: true }\n  },\n  data: () => ({\n    name: \"isochrones-export\",\n    selected: \"GeoJson\",\n    items: [\"GeoJson\", \"Shapefile\", \"XLSX\"],\n    isDownloading: false\n  }),\n  methods: {\n    download() {\n      let me = this;\n      let exportName = me.name;\n      if (me.name.length === 0) {\n        exportName = \"export\";\n      }\n      this.isDownloading = true;\n      const isochrone_calculation_id =\n        me.calculation.data[0].isochrone_calculation_id;\n      ApiService.get_(\n        `/isochrones/export/${isochrone_calculation_id}?return_type=${me.selected}`,\n        { responseType: \"blob\" }\n      )\n        .then(response => {\n          saveAs(response.data, `${exportName}.zip`);\n        })\n        .finally(() => {\n          this.isDownloading = false;\n          me.show = false;\n        });\n    }\n  },\n  computed: {\n    ...mapGetters(\"isochrones\", { isochroneLayer: \"isochroneLayer\" }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      openapiConfig: \"openapiConfig\"\n    }),\n    show: {\n      get() {\n        return this.visible;\n      },\n      set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    }\n  },\n  created() {\n    this.items = this.openapiConfig.components.schemas.IsochroneExportType.enum;\n    this.selected = this.items[0];\n  }\n};\n</script>\n"],"sourceRoot":"src/components/isochrones"}]}