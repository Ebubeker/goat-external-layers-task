{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js??ref--13-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/controllers/OlMeasureController.js","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/controllers/OlMeasureController.js","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/eslint-loader/index.js","mtime":1657636581253}],"contextDependencies":[],"result":["import _classCallCheck from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/get\";\nimport _inherits from \"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport DrawInteraction from \"ol/interaction/Draw\";\nimport { unByKey } from \"ol/Observable.js\";\nimport { getArea, getLength } from \"ol/sphere.js\";\nimport { LineString, Polygon } from \"ol/geom.js\";\nimport { getMeasureStyle, getMeasureInteractionStyle } from \"../style/OlStyleDefs\";\nimport OlBaseController from \"./OlBaseController\";\nimport i18n from \"../../src/plugins/i18n\";\n/**\n * Class holding the OpenLayers related logic for the measure tool.\n */\n\nvar OlMeasureController =\n/*#__PURE__*/\nfunction (_OlBaseController) {\n  _inherits(OlMeasureController, _OlBaseController);\n\n  function OlMeasureController(map, measureConf) {\n    var _this;\n\n    _classCallCheck(this, OlMeasureController);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OlMeasureController).call(this, map));\n    Object.assign(_assertThisInitialized(_this), {\n      measureConf: measureConf\n    });\n    return _this;\n  }\n  /**\n   * Creates a vector layer for the measurement results and adds it to the\n   * map.\n   */\n\n\n  _createClass(OlMeasureController, [{\n    key: \"createMeasureLayer\",\n    value: function createMeasureLayer() {\n      var me = this;\n      var style = getMeasureStyle(me.measureConf);\n\n      _get(_getPrototypeOf(OlMeasureController.prototype), \"createLayer\", this).call(this, \"Measure Layer\", style);\n    }\n    /**\n     * Creates and adds the necessary draw interaction and adds it to the map.\n     */\n\n  }, {\n    key: \"addInteraction\",\n    value: function addInteraction(measureType) {\n      var me = this; // cleanup possible old draw interaction\n\n      if (me.draw) {\n        me.removeInteraction();\n      }\n\n      var type = measureType === \"area\" ? \"Polygon\" : \"LineString\";\n      var draw = new DrawInteraction({\n        source: me.source,\n        type: type,\n        style: getMeasureInteractionStyle(me.measureConf)\n      });\n      me.map.addInteraction(draw);\n      me.pointerMoveKey = me.map.on(\"pointermove\", me.onPointerMove.bind(me));\n      me.createTooltip();\n      me.createHelpTooltip();\n      me.helpMessage = i18n.t(\"map.tooltips.clickToStartMeasure\");\n      var listener;\n      var sketch;\n      draw.on(\"drawstart\", function (evt) {\n        // preserve sketch\n        sketch = evt.feature;\n        /** @type {module:ol/coordinate~Coordinate|undefined} */\n\n        var tooltipCoord = evt.coordinate;\n        me.listener = sketch.getGeometry().on(\"change\", function (evt) {\n          var geom = evt.target;\n          var output;\n\n          if (geom instanceof Polygon) {\n            output = me.formatArea(geom);\n            tooltipCoord = geom.getInteriorPoint().getCoordinates();\n\n            if (geom.getLinearRing(0).getCoordinates().length > 3) {\n              me.helpMessage = i18n.t(\"map.tooltips.clickToFinishDrawingPolygon\");\n            } else {\n              me.helpMessage = i18n.t(\"map.tooltips.clickToContinueDrawing\");\n            }\n          } else if (geom instanceof LineString) {\n            output = me.formatLength(geom);\n            tooltipCoord = geom.getLastCoordinate();\n            me.helpMessage = i18n.t(\"map.tooltips.clickToFinishDrawingPolygon\");\n          }\n\n          me.tooltipElement.innerHTML = output;\n          me.tooltip.setPosition(tooltipCoord);\n        });\n      }, me);\n      draw.on(\"drawend\", function () {\n        me.tooltipElement.className = \"tooltip tooltip-static\";\n        me.tooltip.setOffset([0, -7]);\n        me.helpMessage = i18n.t(\"map.tooltips.clickToStartMeasure\");\n        me.helpTooltipElement.innerHTML = me.helpMessage; // unset sketch\n\n        sketch = null; // unset tooltip so that a new one can be created\n\n        me.tooltipElement = null;\n        me.createTooltip();\n        unByKey(listener);\n      }, me); // make draw interaction available as member\n\n      me.draw = draw;\n    }\n    /**\n     * Event for updating the measure help tooltip\n     */\n\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(evt) {\n      var me = this;\n      var coordinate = evt.coordinate;\n      me.helpTooltipElement.innerHTML = me.helpMessage;\n      me.helpTooltip.setPosition(coordinate);\n    }\n    /**\n     * Calculates and formats the length of the given line.\n     *\n     * @param  {ol.geom.LineString} line The LineString object to calculate length for\n     */\n\n  }, {\n    key: \"formatLength\",\n    value: function formatLength(line) {\n      var length = getLength(line);\n      var output;\n\n      if (length > 100) {\n        output = Math.round(length / 1000 * 100) / 100 + \" \" + \"km\";\n      } else {\n        output = Math.round(length * 100) / 100 + \" \" + \"m\";\n      }\n\n      return output;\n    }\n    /**\n     * Calculates and formats the area of the given polygon.\n     *\n     * @param  {ol.geom.Polygon} polygon The Polygon object to calculate area for\n     */\n\n  }, {\n    key: \"formatArea\",\n    value: function formatArea(polygon) {\n      var area = getArea(polygon);\n      var output;\n\n      if (area > 10000) {\n        output = Math.round(area / 1000000 * 100) / 100 + \" \" + \"km²\";\n      } else {\n        output = Math.round(area * 100) / 100 + \" \" + \"m²\";\n      }\n\n      return output;\n    }\n    /**\n     * Removes the current interaction and clears the values.\n     */\n\n  }, {\n    key: \"removeInteraction\",\n    value: function removeInteraction() {\n      var me = this;\n\n      if (me.draw) {\n        me.map.removeInteraction(me.draw);\n      }\n\n      if (me.pointerMoveKey) {\n        unByKey(me.pointerMoveKey);\n      }\n\n      if (me.helpTooltip) {\n        me.map.removeOverlay(me.helpTooltip);\n      }\n\n      if (me.tooltip) {\n        me.map.removeOverlay(me.tooltip);\n      }\n    }\n  }]);\n\n  return OlMeasureController;\n}(OlBaseController);\n\nexport { OlMeasureController as default };",{"version":3,"sources":["/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/controllers/OlMeasureController.js"],"names":["DrawInteraction","unByKey","getArea","getLength","LineString","Polygon","getMeasureStyle","getMeasureInteractionStyle","OlBaseController","i18n","OlMeasureController","map","measureConf","Object","assign","me","style","measureType","draw","removeInteraction","type","source","addInteraction","pointerMoveKey","on","onPointerMove","bind","createTooltip","createHelpTooltip","helpMessage","t","listener","sketch","evt","feature","tooltipCoord","coordinate","getGeometry","geom","target","output","formatArea","getInteriorPoint","getCoordinates","getLinearRing","length","formatLength","getLastCoordinate","tooltipElement","innerHTML","tooltip","setPosition","className","setOffset","helpTooltipElement","helpTooltip","line","Math","round","polygon","area","removeOverlay"],"mappings":"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","sourcesContent":["import DrawInteraction from \"ol/interaction/Draw\";\nimport { unByKey } from \"ol/Observable.js\";\nimport { getArea, getLength } from \"ol/sphere.js\";\nimport { LineString, Polygon } from \"ol/geom.js\";\nimport {\n  getMeasureStyle,\n  getMeasureInteractionStyle\n} from \"../style/OlStyleDefs\";\n\nimport OlBaseController from \"./OlBaseController\";\nimport i18n from \"../../src/plugins/i18n\";\n\n/**\n * Class holding the OpenLayers related logic for the measure tool.\n */\nexport default class OlMeasureController extends OlBaseController {\n  constructor(map, measureConf) {\n    super(map);\n    Object.assign(this, { measureConf });\n  }\n\n  /**\n   * Creates a vector layer for the measurement results and adds it to the\n   * map.\n   */\n  createMeasureLayer() {\n    const me = this;\n    const style = getMeasureStyle(me.measureConf);\n    super.createLayer(\"Measure Layer\", style);\n  }\n\n  /**\n   * Creates and adds the necessary draw interaction and adds it to the map.\n   */\n  addInteraction(measureType) {\n    const me = this;\n    // cleanup possible old draw interaction\n    if (me.draw) {\n      me.removeInteraction();\n    }\n    let type = measureType === \"area\" ? \"Polygon\" : \"LineString\";\n    let draw = new DrawInteraction({\n      source: me.source,\n      type: type,\n      style: getMeasureInteractionStyle(me.measureConf)\n    });\n    me.map.addInteraction(draw);\n\n    me.pointerMoveKey = me.map.on(\"pointermove\", me.onPointerMove.bind(me));\n    me.createTooltip();\n    me.createHelpTooltip();\n\n    me.helpMessage = i18n.t(\"map.tooltips.clickToStartMeasure\");\n\n    let listener;\n    let sketch;\n\n    draw.on(\n      \"drawstart\",\n      evt => {\n        // preserve sketch\n        sketch = evt.feature;\n        /** @type {module:ol/coordinate~Coordinate|undefined} */\n        let tooltipCoord = evt.coordinate;\n        me.listener = sketch.getGeometry().on(\"change\", function(evt) {\n          const geom = evt.target;\n          let output;\n          if (geom instanceof Polygon) {\n            output = me.formatArea(geom);\n            tooltipCoord = geom.getInteriorPoint().getCoordinates();\n            if (geom.getLinearRing(0).getCoordinates().length > 3) {\n              me.helpMessage = i18n.t(\n                \"map.tooltips.clickToFinishDrawingPolygon\"\n              );\n            } else {\n              me.helpMessage = i18n.t(\"map.tooltips.clickToContinueDrawing\");\n            }\n          } else if (geom instanceof LineString) {\n            output = me.formatLength(geom);\n            tooltipCoord = geom.getLastCoordinate();\n            me.helpMessage = i18n.t(\"map.tooltips.clickToFinishDrawingPolygon\");\n          }\n          me.tooltipElement.innerHTML = output;\n          me.tooltip.setPosition(tooltipCoord);\n        });\n      },\n      me\n    );\n\n    draw.on(\n      \"drawend\",\n      () => {\n        me.tooltipElement.className = \"tooltip tooltip-static\";\n        me.tooltip.setOffset([0, -7]);\n        me.helpMessage = i18n.t(\"map.tooltips.clickToStartMeasure\");\n        me.helpTooltipElement.innerHTML = me.helpMessage;\n        // unset sketch\n        sketch = null;\n        // unset tooltip so that a new one can be created\n        me.tooltipElement = null;\n        me.createTooltip();\n        unByKey(listener);\n      },\n      me\n    );\n\n    // make draw interaction available as member\n    me.draw = draw;\n  }\n\n  /**\n   * Event for updating the measure help tooltip\n   */\n  onPointerMove(evt) {\n    const me = this;\n    const coordinate = evt.coordinate;\n    me.helpTooltipElement.innerHTML = me.helpMessage;\n    me.helpTooltip.setPosition(coordinate);\n  }\n\n  /**\n   * Calculates and formats the length of the given line.\n   *\n   * @param  {ol.geom.LineString} line The LineString object to calculate length for\n   */\n  formatLength(line) {\n    const length = getLength(line);\n    let output;\n    if (length > 100) {\n      output = Math.round((length / 1000) * 100) / 100 + \" \" + \"km\";\n    } else {\n      output = Math.round(length * 100) / 100 + \" \" + \"m\";\n    }\n    return output;\n  }\n\n  /**\n   * Calculates and formats the area of the given polygon.\n   *\n   * @param  {ol.geom.Polygon} polygon The Polygon object to calculate area for\n   */\n  formatArea(polygon) {\n    const area = getArea(polygon);\n    let output;\n    if (area > 10000) {\n      output = Math.round((area / 1000000) * 100) / 100 + \" \" + \"km²\";\n    } else {\n      output = Math.round(area * 100) / 100 + \" \" + \"m²\";\n    }\n    return output;\n  }\n\n  /**\n   * Removes the current interaction and clears the values.\n   */\n  removeInteraction() {\n    const me = this;\n    if (me.draw) {\n      me.map.removeInteraction(me.draw);\n    }\n    if (me.pointerMoveKey) {\n      unByKey(me.pointerMoveKey);\n    }\n    if (me.helpTooltip) {\n      me.map.removeOverlay(me.helpTooltip);\n    }\n    if (me.tooltip) {\n      me.map.removeOverlay(me.tooltip);\n    }\n  }\n}\n"]}]}