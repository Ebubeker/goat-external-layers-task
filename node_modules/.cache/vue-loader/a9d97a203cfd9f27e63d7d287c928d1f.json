{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/print/PrintViewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/print/PrintViewer.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { getCurrentDate, getCurrentTime } from \"../../../utils/Helpers\";\nimport PrintLegend from \"./PrintLegend\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nexport default {\n  components: {\n    \"print-legend\": PrintLegend\n  },\n  mixins: [Mapable],\n  data() {\n    return {\n      mapSideSheetSize: 65, // in mm. The sheet area for legend, title and logos. (right or bottom)\n      logoGoat: \"img/goat_standard.svg\",\n      logoP4B: \"img/plan4better_standard.svg\",\n      rotationIcon: \"img/north_arrow.png\"\n    };\n  },\n  computed: {\n    ...mapGetters(\"map\", {\n      print: \"print\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    /**\n     * Get formated date time as dd/mm/yyyy hh:mm:ss\n     */\n    formatedDateTime() {\n      const m = new Date();\n      const dateString =\n        m.getUTCFullYear() +\n        \"/\" +\n        (\"0\" + (m.getUTCMonth() + 1)).slice(-2) +\n        \"/\" +\n        (\"0\" + m.getUTCDate()).slice(-2) +\n        \" \" +\n        (\"0\" + m.getUTCHours()).slice(-2) +\n        \":\" +\n        (\"0\" + m.getUTCMinutes()).slice(-2) +\n        \":\" +\n        (\"0\" + m.getUTCSeconds()).slice(-2);\n      return dateString;\n    },\n    /**\n     * Map viewport width in mm\n     */\n    getMapWidth() {\n      const sheetWidth = this.print.layout.size[0];\n      const sheetPadding = this.print.layout.padding;\n      let viewPortWidth = sheetWidth - 2 * sheetPadding;\n      if (this.print.layout.orientation === \"landscape\" && this.print.legend) {\n        viewPortWidth = viewPortWidth - this.mapSideSheetSize;\n      }\n      return viewPortWidth;\n    },\n    /**\n     * Map viewport height in mm\n     */\n    getMapHeight() {\n      const sheetHeight = this.print.layout.size[1];\n      const sheetPadding = this.print.layout.padding;\n      let viewPortHeight = sheetHeight - 2 * sheetPadding;\n      if (this.print.layout.orientation === \"portrait\" && this.print.legend) {\n        viewPortHeight = viewPortHeight - this.mapSideSheetSize;\n      }\n      // If legend is deactivated, create a small sheet padding in the bottom to position title and logos\n      if (!this.print.legend) {\n        viewPortHeight = viewPortHeight - 20;\n      }\n      return viewPortHeight;\n    },\n    /**\n     * Get title style based on layout size, orientation and legend visibility\n     */\n    getTitleStyle() {\n      let left;\n      let top;\n      const sheetWidth = this.print.layout.size[0];\n      const sheetPadding = this.print.layout.padding;\n      if (this.print.legend && this.print.layout.orientation === \"landscape\") {\n        left = 5 + sheetPadding + this.getMapWidth;\n        top = sheetPadding;\n      } else {\n        left = sheetWidth / 2 - 30;\n        top = sheetPadding + this.getMapHeight;\n      }\n      const style = `z-index: 1;width: 60mm;text-align: center;word-wrap: break-word;vertical-align: middle;position:absolute;left:${left}mm;top:${top}mm;`;\n      return style;\n    }\n  },\n  watch: {\n    \"print.active\": function(state) {\n      if (state === true) {\n        this.map.setTarget(\"ol-map-print\");\n      } else {\n        this.map.setTarget(\"ol-map-container\");\n      }\n    },\n    \"print.layout\": function() {\n      this.updateMap();\n    },\n    \"print.legend\": function() {\n      this.updateMap();\n    },\n    \"print.title\": function(newValue, oldValue) {\n      // Rerender if user clear the text\n      if (!newValue || newValue.length - oldValue.length > 1) {\n        setTimeout(() => {\n          this.$forceUpdate();\n        }, 50);\n      }\n    }\n  },\n  methods: {\n    getCurrentDate,\n    getCurrentTime,\n    updateMap() {\n      // Workaround as we have for the map to be rendered.\n      setTimeout(() => {\n        this.map.updateSize();\n        this.map.render();\n      }, 50);\n    },\n    /**\n     * Legend style\n     */\n    getLegendStyle() {\n      let left;\n      let top;\n      const padding = this.print.layout.padding;\n      if (this.print.layout.orientation === \"portrait\") {\n        left = padding;\n        top = padding + this.getMapHeight + 7; // 7 is added to avoid overlapping with crs label\n      } else {\n        left = 5 + padding + this.getMapWidth;\n        const title = this.$refs[\"print-title\"];\n        if (title && title.clientHeight) {\n          console.log(title.clientHeight);\n          let pixels = padding + title.clientHeight;\n          top = (pixels * 25.4) / 72 + 7; // convert to mm\n        } else {\n          top = padding;\n        }\n      }\n      const style = `z-index:1;position:absolute;top:${top}mm;left:${left}mm;overflow:hidden;`;\n      return style;\n    },\n    /**\n     * Legend Height\n     */\n    getLegendMaxHeight() {\n      let maxHeight;\n      const padding = this.print.layout.padding;\n      if (this.print.layout.orientation === \"landscape\") {\n        maxHeight = this.print.layout.size[1] - 2 * padding - 10;\n      } else {\n        maxHeight =\n          this.print.layout.size[1] - 2 * padding - this.getMapHeight - 5;\n      }\n      return maxHeight;\n    }\n  }\n};\n",{"version":3,"sources":["PrintViewer.vue"],"names":[],"mappingsfile":"PrintViewer.vue","sourceRoot":"src/components/viewer/print","sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\">\n      <div\n        id=\"map-print-wrapper\"\n        class=\"elevation-10 ml-4 ma-3\"\n        :style=\"\n          `position:relative;width:${print.layout.size[0]}mm;height:${print.layout.size[1]}mm;padding:${print.layout.padding}mm;`\n        \"\n      >\n        <!-- MAP -->\n        <div\n          :style=\"\n            `width:${getMapWidth}mm;height:${getMapHeight}mm;position:absolute;border: 1px solid #ccc;`\n          \"\n          id=\"ol-map-print\"\n        >\n          <img\n            crossorigin=\"anonymous\"\n            :src=\"rotationIcon\"\n            :style=\"\n              `transform:rotate(${print.rotation}deg);z-index:2;max-width:10mm;position:absolute;right:5mm;top:5mm;`\n            \"\n          />\n          <!-- TIME -->\n          <div\n            class=\"caption\"\n            :style=\"\n              `z-index:1;position:absolute;left:0mm;bottom:-5mm;font-size:0.55rem !important;`\n            \"\n          >\n            {{ `CRS: ${print.selectedCrs}` }}\n          </div>\n          <!-- CRS -->\n          <div\n            class=\"caption\"\n            :style=\"\n              `z-index:1;max-width:40mm;position:absolute;right:0mm;bottom:-5mm;font-size:0.55rem !important;`\n            \"\n          >\n            {{ formatedDateTime }}\n          </div>\n        </div>\n\n        <!-- TITLE -->\n        <div class=\"title\" ref=\"print-title\" :style=\"getTitleStyle\">\n          {{ print.title ? print.title.toUpperCase() : \"\" }}\n        </div>\n        <!-- LEGEND -->\n        <div\n          v-if=\"print.legend\"\n          :style=\"\n            getLegendStyle() + `max-height:${this.getLegendMaxHeight()}mm;`\n          \"\n        >\n          <div class=\".subtitle-1\">LEGEND</div>\n\n          <print-legend v-if=\"print.active === true\"></print-legend>\n        </div>\n        <!-- GOAT LOGO -->\n        <img\n          crossorigin=\"anonymous\"\n          :src=\"logoGoat\"\n          :style=\"\n            `z-index:1;max-width:30mm;position:absolute;right:39mm;bottom:5mm;padding-right:2mm;border-right: 1px solid #ccc;`\n          \"\n        />\n        <img\n          crossorigin=\"anonymous\"\n          :src=\"logoP4B\"\n          :style=\"\n            `z-index:1;max-width:35mm;position:absolute;right:2mm;bottom:5mm;`\n          \"\n        />\n      </div>\n    </v-row>\n  </div>\n</template>\n<script>\nimport { mapGetters } from \"vuex\";\nimport { getCurrentDate, getCurrentTime } from \"../../../utils/Helpers\";\nimport PrintLegend from \"./PrintLegend\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nexport default {\n  components: {\n    \"print-legend\": PrintLegend\n  },\n  mixins: [Mapable],\n  data() {\n    return {\n      mapSideSheetSize: 65, // in mm. The sheet area for legend, title and logos. (right or bottom)\n      logoGoat: \"img/goat_standard.svg\",\n      logoP4B: \"img/plan4better_standard.svg\",\n      rotationIcon: \"img/north_arrow.png\"\n    };\n  },\n  computed: {\n    ...mapGetters(\"map\", {\n      print: \"print\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    /**\n     * Get formated date time as dd/mm/yyyy hh:mm:ss\n     */\n    formatedDateTime() {\n      const m = new Date();\n      const dateString =\n        m.getUTCFullYear() +\n        \"/\" +\n        (\"0\" + (m.getUTCMonth() + 1)).slice(-2) +\n        \"/\" +\n        (\"0\" + m.getUTCDate()).slice(-2) +\n        \" \" +\n        (\"0\" + m.getUTCHours()).slice(-2) +\n        \":\" +\n        (\"0\" + m.getUTCMinutes()).slice(-2) +\n        \":\" +\n        (\"0\" + m.getUTCSeconds()).slice(-2);\n      return dateString;\n    },\n    /**\n     * Map viewport width in mm\n     */\n    getMapWidth() {\n      const sheetWidth = this.print.layout.size[0];\n      const sheetPadding = this.print.layout.padding;\n      let viewPortWidth = sheetWidth - 2 * sheetPadding;\n      if (this.print.layout.orientation === \"landscape\" && this.print.legend) {\n        viewPortWidth = viewPortWidth - this.mapSideSheetSize;\n      }\n      return viewPortWidth;\n    },\n    /**\n     * Map viewport height in mm\n     */\n    getMapHeight() {\n      const sheetHeight = this.print.layout.size[1];\n      const sheetPadding = this.print.layout.padding;\n      let viewPortHeight = sheetHeight - 2 * sheetPadding;\n      if (this.print.layout.orientation === \"portrait\" && this.print.legend) {\n        viewPortHeight = viewPortHeight - this.mapSideSheetSize;\n      }\n      // If legend is deactivated, create a small sheet padding in the bottom to position title and logos\n      if (!this.print.legend) {\n        viewPortHeight = viewPortHeight - 20;\n      }\n      return viewPortHeight;\n    },\n    /**\n     * Get title style based on layout size, orientation and legend visibility\n     */\n    getTitleStyle() {\n      let left;\n      let top;\n      const sheetWidth = this.print.layout.size[0];\n      const sheetPadding = this.print.layout.padding;\n      if (this.print.legend && this.print.layout.orientation === \"landscape\") {\n        left = 5 + sheetPadding + this.getMapWidth;\n        top = sheetPadding;\n      } else {\n        left = sheetWidth / 2 - 30;\n        top = sheetPadding + this.getMapHeight;\n      }\n      const style = `z-index: 1;width: 60mm;text-align: center;word-wrap: break-word;vertical-align: middle;position:absolute;left:${left}mm;top:${top}mm;`;\n      return style;\n    }\n  },\n  watch: {\n    \"print.active\": function(state) {\n      if (state === true) {\n        this.map.setTarget(\"ol-map-print\");\n      } else {\n        this.map.setTarget(\"ol-map-container\");\n      }\n    },\n    \"print.layout\": function() {\n      this.updateMap();\n    },\n    \"print.legend\": function() {\n      this.updateMap();\n    },\n    \"print.title\": function(newValue, oldValue) {\n      // Rerender if user clear the text\n      if (!newValue || newValue.length - oldValue.length > 1) {\n        setTimeout(() => {\n          this.$forceUpdate();\n        }, 50);\n      }\n    }\n  },\n  methods: {\n    getCurrentDate,\n    getCurrentTime,\n    updateMap() {\n      // Workaround as we have for the map to be rendered.\n      setTimeout(() => {\n        this.map.updateSize();\n        this.map.render();\n      }, 50);\n    },\n    /**\n     * Legend style\n     */\n    getLegendStyle() {\n      let left;\n      let top;\n      const padding = this.print.layout.padding;\n      if (this.print.layout.orientation === \"portrait\") {\n        left = padding;\n        top = padding + this.getMapHeight + 7; // 7 is added to avoid overlapping with crs label\n      } else {\n        left = 5 + padding + this.getMapWidth;\n        const title = this.$refs[\"print-title\"];\n        if (title && title.clientHeight) {\n          console.log(title.clientHeight);\n          let pixels = padding + title.clientHeight;\n          top = (pixels * 25.4) / 72 + 7; // convert to mm\n        } else {\n          top = padding;\n        }\n      }\n      const style = `z-index:1;position:absolute;top:${top}mm;left:${left}mm;overflow:hidden;`;\n      return style;\n    },\n    /**\n     * Legend Height\n     */\n    getLegendMaxHeight() {\n      let maxHeight;\n      const padding = this.print.layout.padding;\n      if (this.print.layout.orientation === \"landscape\") {\n        maxHeight = this.print.layout.size[1] - 2 * padding - 10;\n      } else {\n        maxHeight =\n          this.print.layout.size[1] - 2 * padding - this.getMapHeight - 5;\n      }\n      return maxHeight;\n    }\n  }\n};\n</script>\n"]}]}