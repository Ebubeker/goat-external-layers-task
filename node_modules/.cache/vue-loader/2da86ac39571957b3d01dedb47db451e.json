{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerOrder/LayerOrder.vue?vue&type=style&index=0&id=0ec1b11c&lang=css&scoped=true&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerOrder/LayerOrder.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/css-loader/index.js","mtime":1657636580953},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657636583241},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/postcss-loader/src/index.js","mtime":1657636582109},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.v-expansion-panel__header {\n  cursor: default;\n}\n.active-icon {\n  color: #30c2ff;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 0px;\n}\n\n.v-expansion-panel-content >>> .v-input__slot {\n  margin-bottom: 0px;\n}\n\n.checkbox >>> .v-input__control {\n  height: 25px;\n}\n\n.layer-row >>> .v-expansion-panel-header {\n  cursor: auto;\n}\n",{"version":3,"sources":["LayerOrder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6PA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"LayerOrder.vue","sourceRoot":"src/components/layers/layerOrder","sourcesContent":["<template>\n  <div>\n    <v-expansion-panels readonly>\n      <draggable\n        v-model=\"getVisibleLayers\"\n        :move=\"onMove\"\n        style=\"width:100%;\"\n        handle=\".handle\"\n      >\n        <v-expansion-panel\n          v-for=\"(layer, i) in getVisibleLayers\"\n          :key=\"i\"\n          class=\"layer-row\"\n          :class=\"{\n            'expansion-panel__container--active':\n              layer.get('showOptions') === true\n          }\"\n        >\n          <v-expansion-panel-header expand-icon=\"\" v-slot=\"{}\" class=\"handle\">\n            <v-layout row class=\"pl-1\" wrap align-center>\n              <v-flex class=\"checkbox\" xs1>\n                <v-simple-checkbox\n                  :color=\"appColor.primary\"\n                  :value=\"layer.getVisible()\"\n                  @input=\"toggleLayerVisibility(layer)\"\n                ></v-simple-checkbox>\n              </v-flex>\n              <v-flex xs10 class=\"light-text\">\n                <h4 class=\"pl-2\">\n                  {{ translate(\"layerName\", layer.get(\"name\")) }}\n                </h4>\n              </v-flex>\n              <v-flex xs1>\n                <v-icon\n                  v-show=\"\n                    layer.getVisible() && layer.get('name') !== 'study_area'\n                  \"\n                  small\n                  style=\"width: 30px; height: 30px;\"\n                  v-html=\"\n                    layer.get('showOptions') === false\n                      ? 'fas fa-chevron-down'\n                      : 'fas fa-chevron-up'\n                  \"\n                  :class=\"{\n                    'expansion-panel__container--active':\n                      layer.get('showOptions') === true\n                  }\"\n                  @click.stop=\"toggleLayerOptions(layer)\"\n                ></v-icon>\n              </v-flex>\n            </v-layout>\n          </v-expansion-panel-header>\n          <v-card\n            class=\"pt-2\"\n            v-show=\"\n              layer.get('showOptions') === true &&\n                layer.get('name') !== 'study_area'\n            \"\n            style=\"background-color: white;\"\n            transition=\"slide-y-reverse-transition\"\n          >\n            <InLegend\n              v-if=\"layer.get('showOptions') === true\"\n              :layer=\"layer\"\n            ></InLegend>\n            <v-layout row style=\"width:100%;padding-left: 10px;\">\n              <v-flex\n                class=\"xs2\"\n                style=\"text-align:center;\"\n                v-if=\"\n                  ['VECTORTILE', 'VECTOR', 'MVT'].includes(\n                    layer.get('type').toUpperCase()\n                  )\n                \"\n              >\n                <v-icon\n                  v-ripple\n                  style=\"color:#B0B0B0;margin-top:3px;cursor:pointer\"\n                  dark\n                  @click=\"openStyleDialog(item)\"\n                >\n                  fas fa-cog\n                </v-icon>\n              </v-flex>\n              <v-flex\n                :class=\"{\n                  xs10:\n                    ['VECTORTILE', 'VECTOR', 'MVT'].includes(\n                      layer.get('type').toUpperCase()\n                    ) == true,\n                  xs12: false\n                }\"\n              >\n                <v-slider\n                  :value=\"layer.getOpacity()\"\n                  class=\"mx-5\"\n                  step=\"0.05\"\n                  min=\"0\"\n                  max=\"1\"\n                  @input=\"changeLayerOpacity($event, layer)\"\n                  :label=\"$t('layerTree.settings.transparency')\"\n                  :color=\"appColor.secondary\"\n                ></v-slider>\n              </v-flex>\n            </v-layout>\n          </v-card>\n        </v-expansion-panel>\n        <v-divider></v-divider>\n      </draggable>\n    </v-expansion-panels>\n    <span v-if=\"styleDialogStatus\">\n      <StyleDialog\n        :item=\"currentItem\"\n        :translate=\"translate\"\n        :key=\"styleDialogKey\"\n        :styleDialogStatus=\"styleDialogStatus\"\n        @styleDialogStatus=\"styleDialogStatus = $event\"\n      >\n      </StyleDialog>\n    </span>\n  </div>\n</template>\n\n<script>\nimport draggable from \"vuedraggable\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport StyleDialog from \"../changeStyle/StyleDialog.vue\";\nimport { EventBus } from \"../../../EventBus\";\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  props: [\"map\", \"translate\", \"toggleLayerOptions\", \"changeLayerOpacity\"],\n  data: () => ({\n    allLayers: [],\n    currentItem: {\n      showOptions: false,\n      name: \"\"\n    },\n    styleDialogKey: 0,\n    styleDialogStatus: false\n  }),\n  components: {\n    draggable,\n    InLegend,\n    StyleDialog\n  },\n  computed: {\n    getVisibleLayers: {\n      //Get visible layers\n      get: function() {\n        return this.allLayers.filter(\n          layer =>\n            layer.getVisible() === true &&\n            ![\"basemap\", \"heatmap\"].includes(layer.get(\"group\"))\n        );\n      },\n      set: function() {\n        //Sort layers in decreasing order based on zIndex\n        this.sortLayerArray(this.allLayers);\n      }\n    },\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  },\n  created() {\n    //Get list of all map layers\n    this.allLayers = this.map\n      .getLayers()\n      .getArray()\n      .filter(l => l.get(\"type\") && l.get(\"displayInLayerList\") !== false);\n  },\n  mounted() {\n    EventBus.$on(\"updateStyleDialogStatusForLayerOrder\", value => {\n      this.styleDialogStatus = value;\n    });\n  },\n  methods: {\n    openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.styleDialogKey += 1;\n      }\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"layerTreeKey\") >= 0 &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.currentItem.set(\n          \"layerTreeKey\",\n          this.currentItem.get(\"layerTreeKey\") + 1\n        );\n      }\n      this.currentItem = item;\n    },\n    sortLayerArray(layers) {\n      //Sort layer arrays based on zIndex\n      layers.sort((a, b) => (a.layerOrderKey > b.layerOrderKey ? -1 : 1));\n    },\n    toggleLayerVisibility(layer) {\n      layer.setVisible(!layer.getVisible());\n      if (layer.get(\"showOptions\")) {\n        layer.set(\"showOptions\", false);\n      }\n    },\n    onMove({ draggedContext, relatedContext }) {\n      //Get dragged and target layers on item move event\n      let draggedElement = draggedContext.element;\n      let relatedElement = relatedContext.element;\n      this.reOrderLayers(draggedElement, relatedElement);\n    },\n    reOrderLayers(draggedElement, relatedElement) {\n      //Reorder the layers\n      let start = draggedElement.layerOrderKey;\n      let end = relatedElement.layerOrderKey;\n      if (start > end) {\n        for (let i = 0; i < this.allLayers.length; i++) {\n          if (\n            this.allLayers[i].layerOrderKey >= end &&\n            this.allLayers[i].layerOrderKey < start\n          ) {\n            this.allLayers[i].mapLayer.setZIndex(\n              this.allLayers[i].layerOrderKey + 1\n            );\n            this.allLayers[i].layerOrderKey += 1;\n          }\n        }\n      } else if (start < end) {\n        for (let i = 0; i < this.allLayers.length; i++) {\n          if (\n            this.allLayers[i].layerOrderKey > start &&\n            this.allLayers[i].layerOrderKey <= end\n          ) {\n            this.allLayers[i].mapLayer.setZIndex(\n              this.allLayers[i].layerOrderKey - 1\n            );\n            this.allLayers[i].layerOrderKey -= 1;\n          }\n        }\n      }\n      draggedElement.mapLayer.setZIndex(end);\n      draggedElement.layerOrderKey = end;\n    }\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.v-expansion-panel__header {\n  cursor: default;\n}\n.active-icon {\n  color: #30c2ff;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 0px;\n}\n\n.v-expansion-panel-content >>> .v-input__slot {\n  margin-bottom: 0px;\n}\n\n.checkbox >>> .v-input__control {\n  height: 25px;\n}\n\n.layer-row >>> .v-expansion-panel-header {\n  cursor: auto;\n}\n</style>\n"]}]}