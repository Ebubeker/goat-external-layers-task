{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/Isochrones.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/Isochrones.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//TODO: ADD STUDY AREA LAYER AND POIS FOR MULTIISOCHRONES\n//TODO: FIX MULTIISOCHRONE DATA TABLE WINDOW\nimport { Mapable } from \"../../mixins/Mapable\";\nimport { Isochrones } from \"../../mixins/Isochrones\";\nimport { KeyShortcuts } from \"../../mixins/KeyShortcuts\";\n//Child components\nimport Download from \"./IsochronesDownload\";\nimport IsochroneColorPicker from \"./IsochroneColorPicker\";\n\nimport {\n  getIsochroneStyle,\n  getIsochroneNetworkStyle,\n  isochroneOverlayStyle,\n  studyAreaASelectStyle\n} from \"../../style/OlStyleDefs\";\n\n//Store imports\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\n\n//Ol imports\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\n\nimport {\n  wktToFeature,\n  geojsonToFeature,\n  getPolygonArea,\n  geometryToWKT,\n  geobufToFeatures\n} from \"../../utils/MapUtils\";\nimport DrawInteraction from \"ol/interaction/Draw\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nimport { groupBy } from \"../../utils/Helpers\";\nimport { getDistance } from \"ol/sphere\";\nimport { toLonLat } from \"ol/proj\";\nimport { transform } from \"ol/proj.js\";\nimport { unByKey } from \"ol/Observable\";\n//Other\nimport { EventBus } from \"../../EventBus\";\nimport ApiService from \"../../services/api.service\";\nimport axios from \"axios\";\n\nexport default {\n  mixins: [Mapable, Isochrones, KeyShortcuts],\n  data: () => ({\n    interactionType: \"isochrone-interaction\",\n    isOptionsElVisible: true,\n    isIsochroneOptionsVisible: true,\n    speedRule: val => {\n      if (val < 1) return \"Please enter a number greater than 0\";\n      if (val > 40) return \"Please enter a number no greater than 40\";\n      return true;\n    },\n    timeRule: val => {\n      if (val < 1) return \"Please enter a number greater than 0\";\n      if (val > 20) return \"Please enter a number not greater than 20\";\n      return true;\n    },\n    isIsochroneBusy: false,\n    isIsochroneCalculationTypeElVisible: true,\n    isIsochroneStartElVisible: true,\n    isResultsElVisible: true,\n    downloadDialogState: false,\n    selectedCalculation: null,\n    isochroneColorPickerState: false,\n    activeCalculation: null, // for color palette selection\n    activeCalculationMode: null, // for color palette selection,\n    //Single Isochrone\n    mapClickListener: null,\n    // Multiisochrone\n    multiIsochronePoiCount: null,\n    drawPolygon: null,\n    mapPointerMoveKey: null,\n    maxAmenities: 150, //TODO: make this a configurable setting\n    // Cancel Request Token\n    cancelRequestToken: null\n  }),\n  components: {\n    download: Download,\n    IsochroneColorPicker\n  },\n  computed: {\n    ...mapGetters(\"isochrones\", {\n      calculations: \"calculations\"\n    }),\n    ...mapGetters(\"scenarios\", {\n      activeScenario: \"activeScenario\"\n    }),\n    ...mapGetters(\"map\", {\n      contextmenu: \"contextmenu\",\n      subStudyAreaLayer: \"subStudyAreaLayer\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      poisConfig: \"poisConfig\",\n      routingProfiles: \"routingProfiles\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAoisLayer: \"poisAoisLayer\",\n      poisAois: \"poisAois\",\n      selectedPois: \"selectedPois\",\n      selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n    }),\n    ...mapFields(\"isochrones\", {\n      type: \"type\",\n      time: \"time\",\n      speed: \"speed\",\n      steps: \"steps\",\n      routing: \"routing\",\n      calculations: \"calculations\",\n      isochroneLayer: \"isochroneLayer\",\n      isochroneOverlayLayer: \"isochroneOverlayLayer\",\n      isochroneRoadNetworkLayer: \"isochroneRoadNetworkLayer\",\n      multiIsochroneSelectionLayer: \"multiIsochroneSelectionLayer\",\n      multiIsochroneMethod: \"multiIsochroneMethod\",\n      colors: \"colors\",\n      defaultIsochroneColor: \"defaultIsochroneColor\",\n      scenarioIsochroneColor: \"scenarioIsochroneColor\",\n      selectedThematicData: \"selectedThematicData\"\n    }),\n    ...mapFields(\"map\", {\n      isMapBusy: \"isMapBusy\"\n    }),\n    headersSingle() {\n      return [\n        {\n          text: this.$t(\"isochrones.results.table.visible\"),\n          value: \"visible\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.range\"),\n          align: \"center\",\n          value: \"range\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.area\"),\n          align: \"center\",\n          value: \"area\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.population\"),\n          align: \"center\",\n          value: \"population\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.legend\"),\n          value: \"legend\",\n          sortable: false\n        }\n      ];\n    },\n    headersMulti() {\n      return [\n        {\n          text: this.$t(\"isochrones.results.table.visible\"),\n          value: \"visible\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.range\"),\n          value: \"range\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.area\"),\n          value: \"area\",\n          sortable: false\n        },\n\n        {\n          text: this.$t(\"isochrones.results.table.legend\"),\n          value: \"legend\",\n          sortable: false\n        }\n      ];\n    },\n    getMultiIsochroneInfoLabelText() {\n      let text = \"\";\n      if (\n        this.multiIsochronePoiCount === 0 &&\n        this.multiIsochroneMethod === \"study_area\"\n      ) {\n        text = this.$t(\"isochrones.multiple.studyAreaInfoLabel\");\n      } else if (\n        this.multiIsochronePoiCount === 0 &&\n        this.multiIsochroneMethod === \"draw\"\n      ) {\n        text = this.$t(\"isochrones.multiple.drawPolygonInfoLabel\");\n      } else {\n        text = `${this.$t(\"isochrones.multiple.amenityCount\")}: ${\n          this.multiIsochronePoiCount\n        } (${this.$t(\"isochrones.multiple.limit\")}: ${this.maxAmenities})`;\n      }\n      return text;\n    },\n    isMultiIsochroneCalculationDisabled() {\n      if (\n        this.multiIsochronePoiCount > 0 &&\n        this.multiIsochronePoiCount < this.maxAmenities\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  },\n  methods: {\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\",\n      startHelpTooltip: \"START_HELP_TOOLTIP\",\n      stopHelpTooltip: \"STOP_HELP_TOOLTIP\"\n    }),\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      this.createIsochroneLayer();\n      this.createIsochroneRoadNetworkLayer();\n      this.createIsochroneOverlayLayer();\n      this.createMultiIsochroneSelectionLayer();\n      this.setUpCtxMenu();\n\n      EventBus.$on(\"show-isochrone-window\", this.showIsochroneWindow);\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneLayer() {\n      const style = getIsochroneStyle();\n      const vector = new VectorLayer({\n        name: \"isochrone_layer\",\n        displayInLegend: false,\n        zIndex: 6,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneLayer = vector;\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneRoadNetworkLayer() {\n      const style = getIsochroneNetworkStyle();\n      const vector = new VectorImageLayer({\n        name: \"isochrone_road_network_layer\",\n        displayInLegend: false,\n        zIndex: 5,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneRoadNetworkLayer = vector;\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneOverlayLayer() {\n      const vector = new VectorImageLayer({\n        name: \"isochrone_overlayer\",\n        displayInLegend: false,\n        zIndex: 7,\n        source: new VectorSource(),\n        style: isochroneOverlayStyle\n      });\n      this.map.addLayer(vector);\n      this.isochroneOverlayLayer = vector;\n    },\n\n    /**\n     * Create multi isochrone selection layer\n     */\n    createMultiIsochroneSelectionLayer() {\n      const selectionSource = new VectorSource({\n        wrapX: false\n      });\n      const selectionLayer = new VectorLayer({\n        displayInLayerList: false,\n        zIndex: 5,\n        source: selectionSource,\n        style: studyAreaASelectStyle()\n      });\n      this.map.addLayer(selectionLayer);\n      this.multiIsochroneSelectionLayer = selectionLayer;\n    },\n\n    /**\n     * Register map click listener to calculate single isochrone.\n     */\n    registerMapClick() {\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      if (this.type === \"single\") {\n        this.mapClickListener = this.map.once(\"singleclick\", this.onMapClick);\n        this.startHelpTooltip(\n          this.$t(\"map.tooltips.clickForIsochroneCalculation\")\n        );\n      } else {\n        this.mapClickListener = this.map.on(\"singleclick\", this.onMapClick);\n      }\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n    },\n\n    /**\n     * Activate multi isochrone method.\n     */\n    activateMultiIsochrone(type) {\n      this.clear();\n      this.multiIsochroneMethod = type;\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      this.removeMultiIsochroneInteraction();\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n\n      if (this.multiIsochroneMethod === \"study_area\") {\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.studyAreaInfoLabel\"),\n          state: true,\n          timeout: 5000\n        });\n        //Study are method\n        this.pointerMoveKey = this.map.on(\n          \"pointermove\",\n          this.onMultiIsochronePointerMove\n        );\n        if (!this.subStudyAreaLayer) {\n          this.toggleSnackbar({\n            type: \"error\",\n            message: \"Study area layer not available\",\n            state: true,\n            timeout: 10000\n          });\n          this.stop();\n          return;\n        }\n\n        this.subStudyAreaLayer.setVisible(true);\n        this.registerMapClick();\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      } else if (this.multiIsochroneMethod === \"draw\") {\n        const drawPolygon = new DrawInteraction({\n          type: \"Polygon\"\n        });\n        drawPolygon.on(\"drawstart\", this.onMultiIsochroneDrawStart);\n        drawPolygon.on(\"drawend\", this.onMultiIsochroneDrawEnd);\n        this.map.addInteraction(drawPolygon);\n        this.drawPolygon = drawPolygon;\n        this.startHelpTooltip(\n          this.$t(\"map.tooltips.clickToStartDrawingPolygon\")\n        );\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.drawPolygonInfoLabel\"),\n          state: true,\n          timeout: 10000\n        });\n      }\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onMultiIsochroneDrawStart() {\n      this.toggleSnackbar({ state: false });\n      this.multiIsochronePoiCount = 0;\n      this.multiIsochroneSelectionLayer.getSource().clear();\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToContinueDrawing\"));\n    },\n\n    /**\n     * Draw interaction end event handler\n     */\n    onMultiIsochroneDrawEnd(evt) {\n      if (evt.feature) {\n        this.multiIsochroneSelectionLayer.getSource().addFeature(evt.feature);\n      } else {\n        return;\n      }\n      if (this.selectedPois.length === 0) {\n        this.toggleSnackbar({\n          type: \"error\",\n          message: this.$t(\"map.snackbarMessages.selectAmenities\"),\n          state: true,\n          timeout: 10000\n        });\n        return;\n      }\n      this.countPois();\n      this.toggleSnackbar({\n        type:\n          this.multiIsochronePoiCount > this.maxAmenities\n            ? \"error\"\n            : this.appColor.primary,\n        message:\n          this.$t(\"isochrones.multiple.amenityCount\") +\n          ` ${this.multiIsochronePoiCount} / ${this.maxAmenities}`,\n        state: true,\n        timeout: 0\n      });\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToStartDrawing\"));\n    },\n    /**\n     * Event for updating the edit help tooltip\n     */\n    onMultiIsochronePointerMove(evt) {\n      const coordinate = evt.coordinate;\n      if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(coordinate).length > 0\n      ) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToRemove\"));\n      } else if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(coordinate).length == 0\n      ) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      }\n    },\n    removeMultiIsochroneInteraction() {\n      // cleanup possible old select interaction\n      if (this.drawPolygon) {\n        this.map.removeInteraction(this.drawPolygon);\n      }\n      if (this.mapClickListenerKey) {\n        unByKey(this.mapClickListenerKey);\n      }\n      if (this.pointerMoveKey) {\n        unByKey(this.pointerMoveKey);\n      }\n      this.multiIsochronePoiCount = 0;\n    },\n    /**\n     * Count pois that intersect with study area or polygon\n     */\n    countPois() {\n      this.multiIsochronePoiCount = 0;\n      const region = [];\n      const multiIsochroneSelectionLayerFeatures = this.multiIsochroneSelectionLayer\n        .getSource()\n        .getFeatures();\n      if (multiIsochroneSelectionLayerFeatures.length === 0) {\n        this.toggleSnackbar({\n          type:\n            this.multiIsochronePoiCount > this.maxAmenities ||\n            this.multiIsochronePoiCount === 0\n              ? \"error\"\n              : this.appColor.primary,\n          message:\n            this.$t(\"isochrones.multiple.amenityCount\") +\n            ` ${this.multiIsochronePoiCount} (Limit: ${this.maxAmenities})`,\n          state: true,\n          timeout: 100000\n        });\n        return;\n      }\n      multiIsochroneSelectionLayerFeatures.forEach(feature => {\n        if (this.multiIsochroneMethod === \"study_area\") {\n          region.push(feature.get(\"id\"));\n        } else {\n          const geometry = feature\n            .getGeometry()\n            .clone()\n            .transform(\"EPSG:3857\", \"EPSG:4326\");\n          region.push(geometryToWKT(geometry));\n        }\n      });\n      ApiService.post(`/isochrones/multi/count-pois`, {\n        region_type: this.multiIsochroneMethod,\n        region,\n        scenario_id: 0, //TODO: Get scenario id\n        modus: this.calculationMode.active,\n        routing_profile: this.routing,\n        minutes: this.time,\n        speed: this.speed,\n        amenities: this.selectedPoisOnlyKeys\n      })\n        .then(response => {\n          if (response.data) {\n            const poisNumber = response.data;\n            this.multiIsochronePoiCount = poisNumber;\n            this.toggleSnackbar({\n              type:\n                this.multiIsochronePoiCount > this.maxAmenities ||\n                this.multiIsochronePoiCount === 0\n                  ? \"error\"\n                  : this.appColor.primary,\n              message:\n                this.$t(\"isochrones.multiple.amenityCount\") +\n                ` ${this.multiIsochronePoiCount} (Limit: ${this.maxAmenities})`,\n              state: true,\n              timeout: 100000\n            });\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    //=============================================================\n    /**\n     * Handler for 'singleclick' on the map.\n     * Collects data and passes it to corresponding objects.\n     * @param  {ol/MapBrowserEvent} evt The OL event of 'singleclick' on the map\n     */\n    onMapClick(evt) {\n      const projection = this.map\n        .getView()\n        .getProjection()\n        .getCode();\n      const coordinateWgs84 = transform(\n        evt.coordinate,\n        projection,\n        \"EPSG:4326\"\n      );\n      if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.type === \"multiple\"\n      ) {\n        //Check if there is a feature already selected at clicked coordinate,\n        //and if so, delete it and return.\n        const featureAtCoord = this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(evt.coordinate);\n        if (featureAtCoord.length > 0) {\n          this.multiIsochroneSelectionLayer\n            .getSource()\n            .removeFeature(featureAtCoord[0]);\n          this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n          this.countPois();\n          return;\n        }\n        const subStudyAreaAtCoord = this.subStudyAreaLayer\n          .getSource()\n          .getFeaturesAtCoordinate(evt.coordinate);\n        if (subStudyAreaAtCoord.length > 0) {\n          const feature = subStudyAreaAtCoord[0].clone();\n          this.multiIsochroneSelectionLayer.getSource().addFeature(feature);\n        }\n        this.countPois();\n      } else {\n        const payloadSingle = {\n          x: coordinateWgs84[0],\n          y: coordinateWgs84[1]\n        };\n        const calculationNumber = this.calculations.length + 1;\n        const isochroneMarkerFeature = new Feature({\n          geometry: new Point(evt.coordinate),\n          calculationNumber: calculationNumber\n        });\n        isochroneMarkerFeature.setId(\"isochrone_marker_\" + calculationNumber);\n        isochroneMarkerFeature.set(\"showLabel\", false);\n        this.isochroneLayer.getSource().addFeature(isochroneMarkerFeature);\n        this.calculateIsochrone(payloadSingle)\n          .then(() => {})\n          .catch(error => {\n            if (error && error.message === \"cancelled\") {\n              return;\n            }\n            this.toggleSnackbar({\n              type: \"error\", //success or error\n              message: this.$t(\"map.snackbarMessages.calculateIsochroneError\"),\n              state: true,\n              timeout: 2500\n            });\n          });\n        this.clear();\n      }\n    },\n    /**\n     * Calculate isochrone .\n     * Collects data and passes it to corresponding objects.\n     * @param  {Object} parameters The parameters for the isochrone calculation\n     * @param  {ol/Feature} isochroneMarkerFeature The starting point for the isochrone calculation (Optional)\n     */\n    calculateIsochrone(params) {\n      const type = this.type;\n      const time = this.time;\n      const speed = this.speed;\n      const routing = this.routing;\n      const steps = this.steps;\n      const modus = this.calculationMode.active;\n      const scenario_id = this.activeScenario ? this.activeScenario : 0;\n      const baseParams = {\n        minutes: time,\n        speed,\n        modus,\n        n: steps,\n        routing_profile: routing,\n        scenario_id\n      };\n      const payload = { ...baseParams, ...params };\n      this.isMapBusy = true;\n      this.isIsochroneBusy = true;\n      const axiosInstance = axios.create();\n      const CancelToken = axios.CancelToken;\n      return new Promise((resolve, reject) => {\n        let endpoint = \"\";\n        if (type === \"single\") {\n          endpoint = \"single\";\n        } else if (type === \"multiple\") {\n          endpoint = \"multi/pois\";\n        }\n        axiosInstance\n          .post(`/isochrones/${endpoint}`, payload, {\n            cancelToken: new CancelToken(c => {\n              // An executor function receives a cancel function as a parameter\n              this.cancelRequestToken = c;\n            })\n          })\n          .then(response => {\n            resolve(response);\n            if (response.data) {\n              const calculationData = [];\n              const calculationNumber = this.calculations.length + 1;\n              //Order features based on id\n              let olFeatures = geojsonToFeature(response.data, {\n                dataProjection: \"EPSG:4326\",\n                featureProjection: \"EPSG:3857\"\n              });\n\n              olFeatures.sort((a, b) => {\n                return a.get(\"step\") - b.get(\"step\");\n              });\n              olFeatures.forEach((feature, index) => {\n                const isochroneCalculationUid =\n                  feature.get(\"isochrone_calculation_id\") || calculationNumber;\n                feature.setId(\n                  \"isochrone_feature_\" + isochroneCalculationUid + \"_\" + index\n                );\n                let color = \"\";\n                let level = feature.get(\"step\");\n                let modus = feature.get(\"modus\") || modus;\n                if (modus === \"default\" || modus === \"comparison\") {\n                  color = IsochroneUtils.getInterpolatedColor(\n                    1,\n                    20,\n                    parseInt(level / 60),\n                    this.colors[this.defaultIsochroneColor]\n                  );\n                } else {\n                  color = IsochroneUtils.getInterpolatedColor(\n                    1,\n                    20,\n                    parseInt(level / 60),\n                    this.colors[this.scenarioIsochroneColor]\n                  );\n                }\n                let obj = {\n                  id: feature.getId(),\n                  type: feature.get(\"modus\")\n                    ? this.$t(\n                        `isochrones.mode.${feature.get(\"modus\").toLowerCase()}`\n                      )\n                    : this.$t(`isochrones.mode.${modus.toLowerCase()}`),\n                  isochrone_calculation_id: isochroneCalculationUid,\n                  modus: modus,\n                  range: Math.round(feature.get(\"step\") / 60) + \" min\",\n                  color: color,\n                  area: getPolygonArea(feature.getGeometry()),\n                  population:\n                    feature.get(\"reached_opportunities\").sum_pop ||\n                    feature.get(\"reached_opportunities\").reached_population,\n                  isVisible: true\n                };\n                feature.set(\"isVisible\", true);\n                feature.set(\"calculationNumber\", calculationNumber);\n                feature.set(\"color\", color);\n                feature.set(\"calculationType\", type);\n                feature.set(\"hoverColor\", \"\");\n                feature.set(\"showLabel\", false);\n                calculationData.push(obj);\n              });\n              let transformedData = {\n                id: calculationNumber,\n                calculationType: type.toLowerCase(),\n                calculationMode: baseParams.modus.replace(/'/g, \"\"), // remove extra apostrophe in multi-isochrone\n                time: baseParams.minutes + \" min\",\n                speed: baseParams.speed + \" km/h\",\n                routing_profile: routing,\n                scenario_id,\n                isExpanded: true,\n                isVisible: true,\n                data: calculationData,\n                additionalData: {}\n              };\n              // Add default calculation color palette.\n              if (transformedData.calculationMode === \"default\") {\n                transformedData[\n                  `defaultColorPalette`\n                ] = this.defaultIsochroneColor;\n              } else if (transformedData.calculationMode === \"scenario\") {\n                transformedData[\n                  `scenarioColorPalette`\n                ] = this.scenarioIsochroneColor;\n              } else if (transformedData.calculationMode === \"comparison\") {\n                transformedData[\n                  `defaultColorPalette`\n                ] = this.defaultIsochroneColor;\n                transformedData[\n                  `scenarioColorPalette`\n                ] = this.scenarioIsochroneColor;\n              }\n              if (type === \"single\") {\n                //TODO: Get start point from response\n                const markerFeature = this.isochroneLayer\n                  .getSource()\n                  .getFeatureById(\"isochrone_marker_\" + calculationNumber);\n                markerFeature.set(\"speed\", speed);\n                markerFeature.set(\"routing\", routing);\n                const startPointCoord = markerFeature\n                  .getGeometry()\n                  .getCoordinates();\n                const wgs84Coord = toLonLat(startPointCoord);\n                //Geocode\n\n                delete axiosInstance.defaults.headers.common[\"Authorization\"];\n                axiosInstance\n                  .get(\n                    `https://api.locationiq.com/v1/reverse.php?key=ca068d7840bca4&lat=${wgs84Coord[1]}&lon=${wgs84Coord[0]}&format=json`\n                  )\n                  .then(response => {\n                    if (response.status === 200 && response.data.display_name) {\n                      const address = response.data.display_name;\n                      transformedData.position = address;\n                    }\n                  })\n                  .catch(() => {\n                    transformedData.position = \"Unknown\";\n                  })\n                  .finally(() => {\n                    this.isMapBusy = false;\n                    this.isIsochroneBusy = false;\n                    this.calculations.forEach(calculation => {\n                      calculation.isExpanded = false;\n                    });\n                    this.calculations.unshift(transformedData);\n                    this.isochroneLayer.getSource().addFeatures(olFeatures);\n\n                    this.toggleIsochroneWindow(true, transformedData);\n                    this.isOptionsElVisible = false;\n                  });\n              } else {\n                transformedData.position = \"Multi Isochrone Calculation\";\n                this.calculations.forEach(calculation => {\n                  calculation.isExpanded = false;\n                });\n                transformedData.additionalData[\"features\"] = [];\n                this.multiIsochroneSelectionLayer\n                  .getSource()\n                  .getFeatures()\n                  .forEach(feature => {\n                    const clonedFeature = feature.clone();\n                    transformedData.additionalData[\"features\"].push(\n                      clonedFeature\n                    );\n                  });\n                this.isochroneOverlayLayer\n                  .getSource()\n                  .addFeatures(transformedData.additionalData[\"features\"]);\n                this.calculations.unshift(transformedData);\n                this.isochroneLayer.getSource().addFeatures(olFeatures);\n                this.toggleIsochroneWindow(true, transformedData);\n                this.isOptionsElVisible = false;\n                this.isMapBusy = false;\n                this.isIsochroneBusy = false;\n              }\n            }\n          })\n          .catch(error => {\n            reject(error);\n          })\n          .finally(() => {\n            this.multiIsochroneSelectionLayer.getSource().clear();\n            this.isMapBusy = false;\n            this.isIsochroneBusy = false;\n            this.clear();\n          });\n      });\n    },\n    calculateMultiIsochrone() {\n      const regionType = this.multiIsochroneMethod;\n      const payload = {\n        region_type: regionType\n      };\n      const features = this.multiIsochroneSelectionLayer\n        .getSource()\n        .getFeatures();\n      if (regionType === \"study_area\") {\n        // Get selected study areas ids\n        const region = [];\n        features.forEach(feature => {\n          region.push(feature.get(\"id\").toString());\n        });\n        payload.region = region;\n      } else {\n        // Get polygon geometry\n        const feature = features[0];\n        if (!feature) return;\n        const geometry = feature\n          .getGeometry()\n          .clone()\n          .transform(\"EPSG:3857\", \"EPSG:4326\");\n        const region = geometryToWKT(geometry);\n        payload.region = [region];\n      }\n      payload.amenities = this.selectedPoisOnlyKeys;\n      this.calculateIsochrone(payload);\n    },\n    isCalculationActive(calculation) {\n      if (!this.selectedThematicData) {\n        return false;\n      }\n      if (calculation.id === this.selectedThematicData.calculationId) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    groupedCalculationData(data) {\n      const groupedCalculations = groupBy(data, \"type\");\n      return groupedCalculations;\n    },\n    /**\n     * Configure right-click for isochrone.\n     */\n    setUpCtxMenu() {\n      if (this.contextmenu) {\n        this.contextmenu.on(\"beforeopen\", evt => {\n          const features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"isochrone_layer\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          let closestFeature;\n          let closestDistance;\n          const clickedCoord = toLonLat(evt.coordinate);\n\n          features.forEach(f => {\n            if (f.get(\"calculationType\") === \"single\") {\n              let startingPoint = wktToFeature(f.get(\"starting_point\"));\n              const distance = getDistance(\n                clickedCoord,\n                startingPoint.getGeometry().getCoordinates()\n              );\n              if (!closestDistance || closestDistance > distance) {\n                closestDistance = distance;\n                closestFeature = f;\n              }\n            }\n          });\n\n          if (!closestFeature) {\n            closestFeature = features[0];\n          }\n          if (features.length > 0) {\n            this.contextmenu.extend([\n              \"-\", // this is a separator\n              {\n                text: `<i class=\"fa fa-trash fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.deleteIsochrone\"\n                )}`,\n                label: \"deleteIsochrone\",\n                callback: () => {\n                  const calculation = this.calculations.filter(\n                    calculation =>\n                      calculation.id === closestFeature.get(\"calculationNumber\")\n                  );\n                  if (calculation[0]) {\n                    this.deleteCalculation(calculation[0]);\n                  }\n                }\n              }, // this is a separator\n              {\n                text: `<i class=\"fas fa-redo fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.redoCalculation\"\n                )}`,\n                label: \"redoCalculation\",\n                callback: () => {\n                  const calculation = this.calculations.filter(\n                    calculation =>\n                      calculation.id === closestFeature.get(\"calculationNumber\")\n                  );\n                  if (calculation[0]) {\n                    this.removeCalculation(calculation[0]);\n                    if (calculation[0].calculationType === \"single\") {\n                      this.updatePosition({\n                        coordinate: wktToFeature(\n                          closestFeature.get(\"starting_point\")\n                        )\n                          .getGeometry()\n                          .getCoordinates(),\n                        placeName: \"\"\n                      });\n                    }\n                    this.calculateIsochrone(calculation[0]);\n                  }\n                }\n              }\n            ]);\n          }\n        });\n      }\n    },\n    // ------------RESULTS----------\n    showIsochroneWindow(calculationId) {\n      const calculation = this.calculations.filter(\n        calculation => calculation.id === calculationId\n      );\n      if (calculation && calculation[0]) {\n        this.toggleIsochroneWindow(true, calculation[0]);\n      }\n    },\n    toggleIsochroneWindow(state, calculation) {\n      if (state === false) {\n        this.isochroneLayer\n          .getSource()\n          .getFeatures()\n          .forEach(f => {\n            f.set(\"highlightFeature\", false);\n          });\n        this.selectedThematicData = null;\n        return;\n      }\n      const features = IsochroneUtils.getCalculationFeatures(\n        calculation,\n        this.isochroneLayer\n      );\n\n      features.forEach(f => {\n        f.set(\"highlightFeature\", true);\n      });\n      const pois = IsochroneUtils.getCalculationPoisObject(features);\n      const payload = {\n        calculationId: calculation.id,\n        calculationType: calculation.calculationType,\n        pois: pois\n      };\n      if (calculation.calculationType === \"multiple\") {\n        const multiIsochroneTableData = IsochroneUtils.getMultiIsochroneTableData(\n          features\n        );\n        payload.multiIsochroneTableData = multiIsochroneTableData;\n      }\n      this.selectedThematicData = payload;\n    },\n    // eslint-disable-next-line no-unused-vars\n    toggleIsochroneVisibility(feature, calculation, data) {\n      this.toggleIsochroneFeatureVisibility(feature);\n    },\n    toggleIsochroneFeatureVisibility(feature) {\n      let featureId = feature.id;\n      feature.isVisible = !feature.isVisible;\n      if (featureId) {\n        let isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(featureId);\n        if (isochroneFeature) {\n          isochroneFeature.set(\"isVisible\", feature.isVisible);\n        }\n      }\n    },\n    toggleDownloadDialog(calculation) {\n      this.downloadDialogState = true;\n      this.selectedCalculation = calculation;\n    },\n    toggleCalculation(calculation, modus = null) {\n      let data = calculation.data;\n      if (modus) {\n        data = data.filter(calculation => calculation.modus === modus);\n      }\n      const isIndeterminateState = this.getToggleCalculationCheckboxIndeterminateState(\n        data\n      );\n      data.forEach(isochrone => {\n        let featureId = isochrone.id;\n        let isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(featureId);\n        if (isochroneFeature) {\n          // Edge case for comparision\n\n          if (modus && isochroneFeature.get(\"modus\") === modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n          if (!modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n        }\n      });\n      const visibleCount = data.filter(isochrone => isochrone.isVisible).length;\n      if (visibleCount === 0) {\n        calculation.isVisible = false;\n      } else {\n        calculation.isVisible = true;\n      }\n    },\n    toggleRoadNetwork(state, calculation, type) {\n      const roadNetworkSource = this.isochroneRoadNetworkLayer.getSource();\n      if (calculation.additionalData[type]) {\n        // Network is already fetched\n        const features = calculation.additionalData[type].features;\n        if (state === true) {\n          features.forEach(feature => {\n            roadNetworkSource.addFeature(feature);\n          });\n        } else {\n          features.forEach(feature => {\n            if (roadNetworkSource.hasFeature(feature)) {\n              roadNetworkSource.removeFeature(feature);\n            }\n          });\n        }\n      } else {\n        this.isMapBusy = true;\n        this.isIsochroneBusy = true;\n        // Network is not fetched yet\n        ApiService.get_(\n          `/isochrones/network/${calculation.data[0].isochrone_calculation_id}/${type}?return_type=geobuf`,\n          {\n            responseType: \"arraybuffer\",\n            headers: {\n              Accept: \"application/pdf\"\n            }\n          }\n        )\n          .then(response => {\n            if (response.data) {\n              const olFeatures = geobufToFeatures(response.data, {\n                dataProjection: \"EPSG:4326\",\n                featureProjection: \"EPSG:3857\"\n              });\n              calculation.additionalData[type] = {\n                features: olFeatures,\n                state: true\n              };\n              // Set isochrone calculation speed property for styling purpose\n              const speed = parseFloat(calculation.speed.split(\" \")[0]);\n              const lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n              const highestCostValue = 1200;\n              olFeatures.forEach(feature => {\n                feature.set(\"speed\", speed);\n                const cost = feature.get(\"cost\");\n                const modus = feature.get(\"modus\");\n                let color;\n                if (modus === \"default\") {\n                  color = this.colors[calculation.defaultColorPalette];\n                } else if (modus === \"scenario\") {\n                  color = this.colors[calculation.scenarioColorPalette];\n                }\n                const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n                  lowestCostValue,\n                  highestCostValue,\n                  cost,\n                  color\n                );\n                feature.set(\"color\", interpolatedColor);\n              });\n              roadNetworkSource.addFeatures(olFeatures);\n            }\n          })\n          .catch(error => {\n            console.log(error);\n          })\n          .finally(() => {\n            this.isMapBusy = false;\n            this.isIsochroneBusy = false;\n          });\n      }\n    },\n    toggleStudyArea(state, calculation) {\n      const features = calculation.additionalData[\"features\"];\n      features.forEach(feature => {\n        const hasFeature = this.isochroneOverlayLayer\n          .getSource()\n          .hasFeature(feature);\n        if (state === false && hasFeature) {\n          this.isochroneOverlayLayer.getSource().removeFeature(feature);\n        } else if (state === true && !hasFeature) {\n          this.isochroneOverlayLayer.getSource().addFeature(feature);\n        }\n      });\n    },\n    getPaletteColor(calculation, mode) {\n      const colorKey = `${mode}ColorPalette`;\n      return Object.values(this.colors[calculation[colorKey]]).toString();\n    },\n    toggleColorPickerDialog(calculation, mode) {\n      this.isochroneColorPickerState = true;\n      this.activeCalculation = calculation;\n      this.activeCalculationMode = mode;\n    },\n    getToggleCalculationCheckboxState(calculationData) {\n      const countVisibleFeatures = calculationData.filter(\n        o => o.isVisible === true\n      );\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n      return true;\n    },\n    getToggleCalculationCheckboxIndeterminateState(calculationData) {\n      const countVisibleFeatures = calculationData.filter(\n        o => o.isVisible === true\n      );\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n      if (countVisibleFeatures.length === calculationData.length) {\n        return false;\n      }\n      return true;\n    },\n    getStudyAreaToggleSwitchState(calculation) {\n      const features = calculation.additionalData[\"features\"];\n      let hasFeature = false;\n      features.forEach(feature => {\n        if (this.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n          hasFeature = true;\n        }\n      });\n      return hasFeature;\n    },\n\n    // ------------CLEAR----------\n    deleteAll() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"isochrones.deleteTitle\"),\n          this.$t(\"isochrones.deleteAllMessage\"),\n          { color: this.appColor.primary }\n        )\n        .then(confirm => {\n          if (confirm) {\n            this.calculations.forEach(calculation => {\n              this.removeCalculation(calculation);\n            });\n          }\n        });\n    },\n    removeCalculation(calculation) {\n      let id = calculation.id;\n      if (\n        this.selectedThematicData &&\n        this.selectedThematicData.calculationId === id\n      ) {\n        this.selectedThematicData = null;\n      } else if (this.selectedThematicData) {\n        this.selectedThematicData.calculationId =\n          this.selectedThematicData.calculationId - 1;\n      }\n\n      this.calculations = this.calculations.filter(\n        calculation => calculation.id != id\n      );\n      this.calculations = this.calculations.map(calculation => {\n        if (calculation.id > id) {\n          calculation.id = calculation.id - 1;\n        }\n        return calculation;\n      });\n      const isochroneSource = this.isochroneLayer.getSource();\n      isochroneSource.getFeatures().forEach(isochroneFeature => {\n        const isochroneCalculationNr = isochroneFeature.get(\n          \"calculationNumber\"\n        );\n        if (isochroneCalculationNr === id) {\n          isochroneSource.removeFeature(isochroneFeature);\n        }\n        if (isochroneCalculationNr > id) {\n          const updatedNr = isochroneCalculationNr - 1;\n          if (isochroneFeature.getGeometry().getType() === \"Point\") {\n            isochroneFeature.setId(\"isochrone_marker_\" + updatedNr);\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          } else {\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          }\n        }\n      });\n      const isochroneRoadNetworkLayerSource = this.isochroneRoadNetworkLayer.getSource();\n      Object.keys(calculation.additionalData).forEach(type => {\n        const features = calculation.additionalData[type].features;\n        if (isochroneRoadNetworkLayerSource && features) {\n          features.forEach(feature => {\n            isochroneRoadNetworkLayerSource.removeFeature(feature);\n          });\n        }\n      });\n      // Remove isochrone overlay features\n      if (Array.isArray(calculation.additionalData.features)) {\n        calculation.additionalData.features.forEach(feature => {\n          if (this.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n            this.isochroneOverlayLayer.getSource().removeFeature(feature);\n          }\n        });\n      }\n\n      this.isochroneOverlayLayer.changed();\n    },\n    /**\n     * Clears the map and ol interaction activity\n     */\n    stopIsochroneCalculation() {\n      this.clear();\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n      this.toggleSnackbar({\n        type: \"error\",\n        message: this.$t(\"map.snackbarMessages.calculationCancelled\"),\n        state: true,\n        timeout: 4000\n      });\n    },\n    clear() {\n      if (this.mapClickListener) {\n        unByKey(this.mapClickListener);\n        this.mapClickListener = null;\n      }\n      this.toggleSnackbar({ state: false });\n      this.removeMultiIsochroneInteraction();\n      this.multiIsochroneMethod = null;\n      this.multiIsochronePoiCount = 0;\n      this.stopHelpTooltip();\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.multiIsochroneSelectionLayer.getSource().clear();\n    },\n    stop() {\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n      this.clear();\n    }\n  },\n  watch: {\n    routing() {\n      this.appConfig.routing.forEach(routing => {\n        if (routing.type === this.routing) {\n          this.speed = routing.speed;\n        }\n      });\n    },\n    selectedPois() {\n      if (this.multiIsochroneMethod) {\n        this.countPois();\n      }\n    },\n    type(value) {\n      if (value === \"single\" && this.subStudyAreaLayer.getVisible()) {\n        this.subStudyAreaLayer.setVisible(false);\n      }\n    }\n  },\n  created() {\n    // Set default routing\n    const defaultRouting = this.appConfig.routing[0];\n    this.routing = defaultRouting.type;\n    this.speed = defaultRouting.speed;\n  }\n};\n",{"version":3,"sources":["Isochrones.vue"],"names":[],"mappingsfile":"Isochrones.vue","sourceRoot":"src/components/isochrones","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-card flat>\n      <template>\n        <!-- ISOCHRONE OPTIONS  -->\n        <v-flex xs12>\n          <v-card-text class=\"pr-16 pl-16 pt-0 pb-0\">\n            <v-divider></v-divider>\n          </v-card-text>\n          <v-subheader\n            class=\"clickable\"\n            @click=\"isOptionsElVisible = !isOptionsElVisible\"\n          >\n            <v-icon\n              small\n              :style=\"\n                isOptionsElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              class=\"mr-2\"\n              >fas fa-sliders-h</v-icon\n            >\n            <h3>{{ $t(\"isochrones.options.title\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon\n              v-html=\"isOptionsElVisible === true ? 'remove' : 'add'\"\n            ></v-icon>\n          </v-subheader>\n          <div v-if=\"isOptionsElVisible\">\n            <v-expand-transition>\n              <v-flex\n                xs12\n                class=\"mx-4 isochroneOptions\"\n                v-if=\"isIsochroneOptionsVisible\"\n              >\n                <v-row class=\"mt-n2\" align=\"center\">\n                  <v-col class=\"d-flex mb-0 pb-0\" cols=\"12\" sm=\"6\">\n                    <v-select\n                      label=\"Routing\"\n                      class=\"mb-2 mt-0\"\n                      item-value=\"type\"\n                      hide-details\n                      v-model=\"routing\"\n                      :items=\"appConfig.routing\"\n                    >\n                      <template slot=\"selection\" slot-scope=\"{ item }\">\n                        <v-row>\n                          <v-col cols=\"3\" class=\"py-0\"\n                            ><v-icon dense>{{ item.icon }}</v-icon></v-col\n                          >\n                          <v-col cols=\"9\" class=\"py-0\"\n                            ><span class=\"cb-item\">{{\n                              $t(`isochrones.options.${item.type}`)\n                            }}</span></v-col\n                          >\n                        </v-row>\n                      </template>\n                      <template slot=\"item\" slot-scope=\"{ item }\">\n                        <v-row>\n                          <v-col cols=\"3\"\n                            ><v-icon dense>{{ item.icon }}</v-icon></v-col\n                          >\n                          <v-col cols=\"9\"\n                            ><span class=\"cb-item\">{{\n                              $t(`isochrones.options.${item.type}`)\n                            }}</span></v-col\n                          >\n                        </v-row>\n                      </template>\n                    </v-select>\n                  </v-col>\n                  <v-col class=\"d-flex mb-0 pb-2\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      :label=\"$t(`isochrones.options.speed`)\"\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"1\"\n                      max=\"25\"\n                      ref=\"input\"\n                      :rules=\"[speedRule]\"\n                      v-model=\"speed\"\n                      suffix=\"km/h\"\n                      hide-details\n                      class=\"mb-1\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col class=\"d-flex mt-2 pt-0\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      :label=\"$t(`isochrones.options.time`)\"\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"1\"\n                      max=\"20\"\n                      ref=\"input\"\n                      :rules=\"[timeRule]\"\n                      v-model=\"time\"\n                      suffix=\"min\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col class=\"d-flex mt-2 pt-0\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      :label=\"$t(`isochrones.options.nr`)\"\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"1\"\n                      max=\"4\"\n                      ref=\"input\"\n                      v-model=\"steps\"\n                    ></v-text-field>\n                  </v-col>\n                </v-row>\n              </v-flex>\n            </v-expand-transition>\n          </div>\n        </v-flex>\n\n        <!-- ISOCHRONE TYPE -->\n        <v-flex xs12>\n          <v-subheader\n            @click=\"\n              isIsochroneCalculationTypeElVisible = !isIsochroneCalculationTypeElVisible\n            \"\n            class=\"clickable pb-0 mb-0\"\n          >\n            <v-icon\n              class=\"mr-2\"\n              :style=\"\n                isIsochroneCalculationTypeElVisible === true\n                  ? { color: appColor.secondary }\n                  : {}\n              \"\n              small\n              >fas fa-bullseye</v-icon\n            >\n            <h3>{{ $t(\"isochrones.calculationTitle\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon\n              v-html=\"\n                isIsochroneCalculationTypeElVisible === true ? 'remove' : 'add'\n              \"\n            ></v-icon>\n          </v-subheader>\n          <v-card-text\n            v-show=\"isIsochroneCalculationTypeElVisible\"\n            class=\"py-0 my-0 mb-2 justify-center\"\n          >\n            <v-row no-gutters justify=\"center\" align=\"center\">\n              <v-radio-group\n                class=\"ml-2 mt-4 radio-group-height\"\n                v-model=\"type\"\n                :value=\"type\"\n                @change=\"stop\"\n                row\n              >\n                <v-radio\n                  :color=\"appColor.secondary\"\n                  :label=\"$t('isochrones.single.type')\"\n                  value=\"single\"\n                ></v-radio>\n                <v-radio\n                  :color=\"appColor.secondary\"\n                  :label=\"$t('isochrones.multiple.type')\"\n                  value=\"multiple\"\n                ></v-radio>\n              </v-radio-group>\n            </v-row>\n            <v-row no-gutters>\n              <template v-if=\"type === 'single'\">\n                <v-col cols=\"12\" justify=\"center\" align=\"center\" class=\"pr-2\">\n                  <template v-if=\"!isIsochroneBusy\">\n                    <span>\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            outlined\n                            fab\n                            v-on=\"on\"\n                            class=\"mr-2\"\n                            depressed\n                            text\n                            @click=\"registerMapClick('isochrone')\"\n                          >\n                            <v-icon\n                              :color=\"\n                                mapClickListener ? appColor.secondary : 'grey'\n                              \"\n                              >fas fa-map-marker-alt</v-icon\n                            >\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.single.startTooltip\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <br />\n                    <span>Isochrone Single</span>\n                  </template>\n                  <span v-if=\"isIsochroneBusy\">\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                          fab\n                          dark\n                          v-on=\"on\"\n                          class=\"mb-4 elevation-0\"\n                          color=\"red\"\n                          @click=\"stopIsochroneCalculation\"\n                        >\n                          <v-icon color=\"white\">close</v-icon>\n                        </v-btn>\n                      </template>\n                      <span>{{ $t(\"isochrones.stopIsochroneCalc\") }}</span>\n                    </v-tooltip>\n                  </span>\n                </v-col>\n              </template>\n              <template v-if=\"type === 'multiple'\">\n                <v-row no-gutters>\n                  <v-col cols=\"6\" justify=\"center\" align=\"center\" class=\"pl-10\">\n                    <span\n                      v-if=\"!isIsochroneBusy || multiIsochroneMethod === 'draw'\"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            outlined\n                            fab\n                            v-on=\"on\"\n                            class=\"ml-2\"\n                            depressed\n                            text\n                            @click=\"activateMultiIsochrone('study_area')\"\n                          >\n                            <v-icon\n                              :color=\"\n                                multiIsochroneMethod === 'study_area'\n                                  ? appColor.secondary\n                                  : 'grey'\n                              \"\n                              >fa-solid fa-hand-pointer</v-icon\n                            >\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.multiple.studyArea\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <span\n                      v-if=\"\n                        isIsochroneBusy && multiIsochroneMethod === 'study_area'\n                      \"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            fab\n                            dark\n                            v-on=\"on\"\n                            class=\"mb-4 elevation-0\"\n                            color=\"red\"\n                            @click=\"stopIsochroneCalculation\"\n                          >\n                            <v-icon color=\"white\">close</v-icon>\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.stopIsochroneCalc\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <br />\n                    <span>{{ $t(\"isochrones.multiple.studyArea\") }}</span>\n                  </v-col>\n                  <v-col cols=\"6\" justify=\"center\" align=\"center\" class=\"pr-10\">\n                    <span\n                      v-if=\"\n                        !isIsochroneBusy ||\n                          multiIsochroneMethod === 'study_area'\n                      \"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            outlined\n                            fab\n                            v-on=\"on\"\n                            class=\"ml-2 mr-4\"\n                            depressed\n                            text\n                            @click=\"activateMultiIsochrone('draw')\"\n                          >\n                            <v-icon\n                              :color=\"\n                                multiIsochroneMethod === 'draw'\n                                  ? appColor.secondary\n                                  : 'grey'\n                              \"\n                              >fa-solid fa-draw-polygon</v-icon\n                            >\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.multiple.drawPolygon\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <span\n                      v-if=\"isIsochroneBusy && multiIsochroneMethod === 'draw'\"\n                    >\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            fab\n                            dark\n                            v-on=\"on\"\n                            class=\"mb-4 elevation-0\"\n                            color=\"red\"\n                            @click=\"stopIsochroneCalculation\"\n                          >\n                            <v-icon color=\"white\">close</v-icon>\n                          </v-btn>\n                        </template>\n                        <span>{{ $t(\"isochrones.stopIsochroneCalc\") }}</span>\n                      </v-tooltip>\n                    </span>\n                    <br />\n                    <span>{{ $t(\"isochrones.multiple.drawPolygon\") }}</span>\n                  </v-col>\n                </v-row>\n                <v-row no-gutters justify=\"center\" class=\"mt-2\" align=\"center\">\n                  <v-btn\n                    small\n                    class=\"white--text mr-2 mt-5 mb-2\"\n                    color=\"error\"\n                    outlined\n                    @click=\"stop\"\n                  >\n                    {{ $t(\"isochrones.multiple.clear\") }}\n                  </v-btn>\n                  <v-btn\n                    :disabled=\"\n                      !multiIsochronePoiCount ||\n                        multiIsochronePoiCount > maxAmenities ||\n                        isMapBusy\n                    \"\n                    small\n                    class=\"white--text ml-2 mt-5 mb-2\"\n                    :color=\"appColor.primary\"\n                    @click=\"calculateMultiIsochrone\"\n                  >\n                    {{ $t(\"isochrones.multiple.calculate\") }}\n                  </v-btn>\n                </v-row>\n              </template>\n            </v-row>\n            <v-progress-linear\n              v-if=\"isIsochroneBusy\"\n              indeterminate\n              height=\"1\"\n              class=\"mx-0 pb-0\"\n              :color=\"appColor.primary\"\n            ></v-progress-linear>\n          </v-card-text>\n        </v-flex>\n\n        <!-- ISOCHRONE RESULT -->\n        <v-flex id=\"isochroneResultsEl\">\n          <v-card-text class=\"pr-16 pl-16 pt-0 pb-0\">\n            <v-divider></v-divider>\n          </v-card-text>\n          <v-subheader\n            class=\"clickable\"\n            @click=\"isResultsElVisible = !isResultsElVisible\"\n          >\n            <v-icon\n              class=\"mr-2\"\n              :style=\"\n                isResultsElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              style=\"margin-right: 2px;\"\n              small\n              >far fa-list-alt</v-icon\n            >\n            <h3>{{ $t(\"isochrones.results.title\") }}</h3>\n            <v-spacer></v-spacer>\n\n            <v-hover v-slot=\"{ hover }\">\n              <v-btn\n                small\n                v-show=\"isResultsElVisible === true && calculations.length > 1\"\n                class=\"white--text mr-2\"\n                :color=\"hover ? 'error' : 'grey'\"\n                outlined\n                @click.stop=\"deleteAll\"\n              >\n                <v-icon left>delete</v-icon\n                >{{ $t(\"isochrones.results.deleteAll\") }}\n              </v-btn>\n            </v-hover>\n\n            <v-icon\n              v-html=\"isResultsElVisible === true ? 'remove' : 'add'\"\n            ></v-icon>\n          </v-subheader>\n          <v-layout>\n            <v-flex xs12 class=\"mx-3\" v-show=\"isResultsElVisible\">\n              <template v-for=\"calculation in calculations\">\n                <v-card\n                  style=\"width: 330px;\"\n                  class=\"mb-3 \"\n                  :id=\"`result-${calculation.id}`\"\n                  :key=\"calculation.id\"\n                  :class=\"{\n                    'elevation-5': isCalculationActive(calculation)\n                  }\"\n                >\n                  <v-card-title\n                    style=\"background-color:#EEEEEE;\"\n                    class=\"pb-0 mt-0 pt-0 mb-0\"\n                  >\n                    <v-layout row wrap class=\"py-1\">\n                      <v-layout align-start justify-start>\n                        <v-card-text class=\"pa-0 ma-0 ml-2\">\n                          <v-icon small class=\"text-xs-center\">{{\n                            routingProfiles[calculation.routing_profile].icon\n                          }}</v-icon>\n                          <span class=\"ml-1 caption\">\n                            {{\n                              $t(\n                                `isochrones.options.${calculation.routing_profile}`\n                              )\n                            }}\n                          </span>\n\n                          <v-icon small class=\"text-xs-center mx-2\"\n                            >fas fa-tachometer-alt\n                          </v-icon>\n                          <span class=\"caption\">{{ calculation.speed }}</span>\n                          <span\n                            class=\"pl-2 ml-2 text-xs-center\"\n                            style=\"border-left: 1px solid #424242;\"\n                            >{{\n                              $te(\n                                `isochrones.options.${calculation.calculationMode}`\n                              )\n                                ? $t(\n                                    `isochrones.options.${calculation.calculationMode}`\n                                  )\n                                : calculation.calculationMode\n                            }}</span\n                          >\n                        </v-card-text>\n                      </v-layout>\n\n                      <v-layout row>\n                        <v-spacer></v-spacer>\n                        <v-tooltip top>\n                          <template v-slot:activator=\"{ on }\">\n                            <v-icon\n                              @click=\"deleteCalculation(calculation)\"\n                              small\n                              v-on=\"on\"\n                              class=\"result-icons delete-icon mr-6\"\n                            >\n                              fas fa-trash-alt</v-icon\n                            >\n                          </template>\n                          <span>{{\n                            $t(\"isochrones.results.deleteCalcTooltip\")\n                          }}</span>\n                        </v-tooltip>\n                      </v-layout>\n                    </v-layout>\n                    <v-card-text class=\"pr-0 pl-0 pt-0 pb-0\">\n                      <v-layout class=\"ml-0\" row> </v-layout>\n                    </v-card-text>\n                  </v-card-title>\n                  <v-subheader\n                    justify-center\n                    align-center\n                    class=\"clickable subheader mt-1 pb-1\"\n                    @click=\"calculation.isExpanded = !calculation.isExpanded\"\n                  >\n                    <span class=\"fa-stack fa-xs mr-1\" style=\"color:#800000;\">\n                      <span\n                        class=\"fa fa-solid fa-location-pin fa-stack-2x\"\n                      ></span>\n                      <strong\n                        style=\"font-size:12px;\"\n                        class=\"white--text fa-stack-1x mb-1\"\n                      >\n                        {{ calculation.id }}\n                      </strong>\n                    </span>\n                    <v-tooltip\n                      :disabled=\"\n                        calculation.position === 'multiIsochroneCalculation'\n                      \"\n                      open-delay=\"600\"\n                      max-width=\"300\"\n                      top\n                    >\n                      <template v-slot:activator=\"{ on }\">\n                        <p class=\"result-title subtitle-2 mt-4\" v-on=\"on\">\n                          {{\n                            calculation.position === \"multiIsochroneCalculation\"\n                              ? $t(\"isochrones.results.multiIsochroneHeader\")\n                              : calculation.position\n                          }}\n                        </p>\n                      </template>\n                      <span>{{ calculation.position }}</span></v-tooltip\n                    >\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <div\n                          v-if=\"\n                            calculation.calculationMode === 'default' ||\n                              calculation.calculationMode === 'comparison'\n                          \"\n                          @click.stop=\"\n                            toggleColorPickerDialog(calculation, 'default')\n                          \"\n                          v-on=\"on\"\n                          class=\"my-1 mx-2 colorPalettePicker\"\n                          :style=\"{\n                            backgroundImage: `linear-gradient(to right, ${getPaletteColor(\n                              calculation,\n                              'default'\n                            )})`\n                          }\"\n                        ></div>\n                      </template>\n                      <span>{{\n                        $t(`map.tooltips.changeDefaultColorPalette`)\n                      }}</span>\n                    </v-tooltip>\n\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <div\n                          v-if=\"\n                            calculation.calculationMode === 'scenario' ||\n                              calculation.calculationMode === 'comparison'\n                          \"\n                          v-on=\"on\"\n                          @click.stop=\"\n                            toggleColorPickerDialog(calculation, 'scenario')\n                          \"\n                          class=\"my-1 ml-1 mx-2 colorPalettePicker\"\n                          :style=\"{\n                            backgroundImage: `linear-gradient(to right, ${getPaletteColor(\n                              calculation,\n                              'scenario'\n                            )})`\n                          }\"\n                        ></div>\n                      </template>\n                      <span>{{\n                        $t(`map.tooltips.changeScenarioColorPalette`)\n                      }}</span>\n                    </v-tooltip>\n\n                    <v-icon\n                      small\n                      class=\"ml-2\"\n                      v-html=\"\n                        calculation.isExpanded\n                          ? 'fas fa-chevron-down'\n                          : 'fas fa-chevron-up'\n                      \"\n                    ></v-icon>\n                  </v-subheader>\n                  <v-divider\n                    v-if=\"calculation.isExpanded\"\n                    style=\"border-width:revert;\"\n                  ></v-divider>\n\n                  <v-card-text\n                    class=\"pt-0 pb-0\"\n                    v-show=\"calculation.isExpanded\"\n                  >\n                    <v-row justify-center align-center no-gutters>\n                      <v-tooltip top>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn\n                            :color=\"appColor.primary\"\n                            fab\n                            dark\n                            class=\"my-1 mt-3 elevation-1\"\n                            v-on=\"on\"\n                            x-small\n                            @click=\"toggleDownloadDialog(calculation)\"\n                          >\n                            <v-icon small>fa-solid fa-download</v-icon>\n                          </v-btn>\n                        </template>\n                        <span>{{\n                          $t(\"isochrones.results.downloadTooltip\")\n                        }}</span>\n                      </v-tooltip>\n                      <v-spacer></v-spacer>\n                      <v-switch\n                        v-if=\"\n                          calculation.calculationMode !== 'comparison' &&\n                            calculation.calculationType !== 'multiple'\n                        \"\n                        class=\"mt-4 mr-3\"\n                        dense\n                        :color=\"appColor.secondary\"\n                        hide-details\n                        :disabled=\"isIsochroneBusy\"\n                        @change=\"\n                          toggleRoadNetwork(\n                            $event,\n                            calculation,\n                            calculation.calculationMode\n                          )\n                        \"\n                        :input-value=\"\n                          calculation.additionalData[\n                            calculation.calculationMode\n                          ]\n                            ? calculation.additionalData[\n                                calculation.calculationMode\n                              ].state\n                            : false\n                        \"\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.results.roadNetwork\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                      <v-switch\n                        class=\"mt-4\"\n                        :input-value=\"isCalculationActive(calculation)\"\n                        dense\n                        :color=\"appColor.secondary\"\n                        hide-details\n                        @change=\"toggleIsochroneWindow($event, calculation)\"\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.results.dataTable\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                    </v-row>\n                    <v-row\n                      class=\"mb-2\"\n                      v-if=\"calculation.calculationType === 'multiple'\"\n                      justify-center\n                      align-center\n                      no-gutters\n                    >\n                      <v-switch\n                        class=\"mt-2 ml-1\"\n                        dense\n                        @change=\"toggleStudyArea($event, calculation)\"\n                        :color=\"appColor.secondary\"\n                        :input-value=\"\n                          getStudyAreaToggleSwitchState(calculation)\n                        \"\n                        hide-details\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.additionalLayers.studyArea\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                      <!-- TODO: Isochrone starting points not yet available -->\n                      <v-switch\n                        :disabled=\"true\"\n                        class=\"mt-2 ml-3\"\n                        dense\n                        :color=\"appColor.secondary\"\n                        hide-details\n                      >\n                        <template v-slot:label>\n                          <span class=\"caption\">{{\n                            $t(\"isochrones.additionalLayers.startingPoints\")\n                          }}</span>\n                        </template>\n                      </v-switch>\n                    </v-row>\n                    <v-divider></v-divider>\n                    <v-row\n                      no-gutters\n                      :key=\"index\"\n                      v-for=\"(data, key, index) in groupedCalculationData(\n                        calculation.data\n                      )\"\n                    >\n                      <v-row\n                        no-gutters\n                        v-if=\"calculation.calculationMode === 'comparison'\"\n                        style=\"width:100%;background-color:#EEEEEE;border-radius:4px;\"\n                        class=\"mr-0 mt-1 pa-1\"\n                      >\n                        <v-col cols=\"4\" justify=\"start\" align=\"start\">\n                          <v-row no-gutters justify=\"start\" align=\"start\">\n                            <span class=\"result-title subtitle-2 pb-0 mb-0\">\n                              {{\n                                data[0] && data[0].modus\n                                  ? $te(`isochrones.mode.${data[0].modus}`)\n                                    ? $t(`isochrones.mode.${data[0].modus}`)\n                                    : data[0].modus\n                                  : key\n                              }}\n                            </span>\n                          </v-row>\n                        </v-col>\n                        <v-col cols=\"8\" justify=\"end\" align-end class=\"pr-1\">\n                          <v-row no-gutters justify=\"end\" align=\"center\">\n                            <v-switch\n                              v-if=\"calculation.calculationType !== 'multiple'\"\n                              class=\"ma-0 pa-0\"\n                              dense\n                              :color=\"appColor.secondary\"\n                              hide-details\n                              @change=\"\n                                toggleRoadNetwork(\n                                  $event,\n                                  calculation,\n                                  data[0].modus\n                                )\n                              \"\n                              :disabled=\"isIsochroneBusy\"\n                              :input-value=\"\n                                data &&\n                                data[0] &&\n                                calculation.additionalData[data[0].modus]\n                                  ? calculation.additionalData[data[0].modus]\n                                      .state\n                                  : false\n                              \"\n                            >\n                              <template v-slot:label>\n                                <span class=\"caption\">{{\n                                  $t(\"isochrones.results.roadNetwork\")\n                                }}</span>\n                              </template>\n                            </v-switch>\n                          </v-row>\n                        </v-col>\n                      </v-row>\n                      <v-data-table\n                        dense\n                        style=\"width:100%\"\n                        :headers=\"\n                          calculation.calculationType === 'single'\n                            ? headersSingle\n                            : headersMulti\n                        \"\n                        :items=\"data\"\n                        class=\"elevation-0 subtitle-1 pb-2\"\n                        hide-default-footer\n                        hide-default-header\n                        light\n                      >\n                        <template v-slot:header=\"{ props: { headers } }\">\n                          <thead>\n                            <tr>\n                              <th :key=\"h.value\" v-for=\"h in headers\">\n                                <v-checkbox\n                                  v-if=\"h.value === 'visible'\"\n                                  @change=\"\n                                    toggleCalculation(\n                                      calculation,\n                                      calculation.calculationMode ===\n                                        'comparison'\n                                        ? data[0].modus\n                                        : null\n                                    )\n                                  \"\n                                  :input-value=\"\n                                    getToggleCalculationCheckboxState(data)\n                                  \"\n                                  :indeterminate=\"\n                                    getToggleCalculationCheckboxIndeterminateState(\n                                      data\n                                    )\n                                  \"\n                                  :color=\"appColor.secondary\"\n                                  hide-details\n                                  dense\n                                >\n                                </v-checkbox>\n                                <span v-else>{{ h.text }}</span>\n                              </th>\n                            </tr>\n                          </thead>\n                        </template>\n                        <template v-slot:item.visible=\"{ item }\">\n                          <v-checkbox\n                            class=\"my-2\"\n                            dense\n                            :input-value=\"item.isVisible\"\n                            :color=\"appColor.secondary\"\n                            hide-details\n                            @change=\"\n                              toggleIsochroneVisibility(item, calculation, data)\n                            \"\n                          ></v-checkbox>\n                        </template>\n\n                        <template v-slot:items=\"props\">\n                          <td>{{ props.item.range }}</td>\n                          <td>{{ props.item.area }}</td>\n                        </template>\n\n                        <template v-slot:item.legend=\"{ item }\">\n                          <div\n                            class=\"legend\"\n                            :style=\"{ backgroundColor: item.color }\"\n                          ></div>\n                        </template>\n                      </v-data-table>\n                    </v-row>\n                  </v-card-text>\n                </v-card>\n              </template>\n            </v-flex>\n            <confirm ref=\"confirm\"></confirm>\n            <!-- DIALOG BOXES FOR ISOCHRONE RESULTS -->\n            <download\n              :visible=\"downloadDialogState\"\n              :calculation=\"selectedCalculation\"\n              @close=\"downloadDialogState = false\"\n            ></download>\n            <isochrone-color-picker\n              :visible=\"isochroneColorPickerState\"\n              :calculation=\"activeCalculation\"\n              :selectedMode=\"activeCalculationMode\"\n              @close=\"isochroneColorPickerState = false\"\n            ></isochrone-color-picker>\n          </v-layout>\n        </v-flex>\n      </template>\n      <!-- -- -->\n    </v-card>\n    <confirm ref=\"confirm\"></confirm>\n  </v-flex>\n</template>\n\n<script>\n//TODO: ADD STUDY AREA LAYER AND POIS FOR MULTIISOCHRONES\n//TODO: FIX MULTIISOCHRONE DATA TABLE WINDOW\nimport { Mapable } from \"../../mixins/Mapable\";\nimport { Isochrones } from \"../../mixins/Isochrones\";\nimport { KeyShortcuts } from \"../../mixins/KeyShortcuts\";\n//Child components\nimport Download from \"./IsochronesDownload\";\nimport IsochroneColorPicker from \"./IsochroneColorPicker\";\n\nimport {\n  getIsochroneStyle,\n  getIsochroneNetworkStyle,\n  isochroneOverlayStyle,\n  studyAreaASelectStyle\n} from \"../../style/OlStyleDefs\";\n\n//Store imports\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\n\n//Ol imports\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\n\nimport {\n  wktToFeature,\n  geojsonToFeature,\n  getPolygonArea,\n  geometryToWKT,\n  geobufToFeatures\n} from \"../../utils/MapUtils\";\nimport DrawInteraction from \"ol/interaction/Draw\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nimport { groupBy } from \"../../utils/Helpers\";\nimport { getDistance } from \"ol/sphere\";\nimport { toLonLat } from \"ol/proj\";\nimport { transform } from \"ol/proj.js\";\nimport { unByKey } from \"ol/Observable\";\n//Other\nimport { EventBus } from \"../../EventBus\";\nimport ApiService from \"../../services/api.service\";\nimport axios from \"axios\";\n\nexport default {\n  mixins: [Mapable, Isochrones, KeyShortcuts],\n  data: () => ({\n    interactionType: \"isochrone-interaction\",\n    isOptionsElVisible: true,\n    isIsochroneOptionsVisible: true,\n    speedRule: val => {\n      if (val < 1) return \"Please enter a number greater than 0\";\n      if (val > 40) return \"Please enter a number no greater than 40\";\n      return true;\n    },\n    timeRule: val => {\n      if (val < 1) return \"Please enter a number greater than 0\";\n      if (val > 20) return \"Please enter a number not greater than 20\";\n      return true;\n    },\n    isIsochroneBusy: false,\n    isIsochroneCalculationTypeElVisible: true,\n    isIsochroneStartElVisible: true,\n    isResultsElVisible: true,\n    downloadDialogState: false,\n    selectedCalculation: null,\n    isochroneColorPickerState: false,\n    activeCalculation: null, // for color palette selection\n    activeCalculationMode: null, // for color palette selection,\n    //Single Isochrone\n    mapClickListener: null,\n    // Multiisochrone\n    multiIsochronePoiCount: null,\n    drawPolygon: null,\n    mapPointerMoveKey: null,\n    maxAmenities: 150, //TODO: make this a configurable setting\n    // Cancel Request Token\n    cancelRequestToken: null\n  }),\n  components: {\n    download: Download,\n    IsochroneColorPicker\n  },\n  computed: {\n    ...mapGetters(\"isochrones\", {\n      calculations: \"calculations\"\n    }),\n    ...mapGetters(\"scenarios\", {\n      activeScenario: \"activeScenario\"\n    }),\n    ...mapGetters(\"map\", {\n      contextmenu: \"contextmenu\",\n      subStudyAreaLayer: \"subStudyAreaLayer\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      poisConfig: \"poisConfig\",\n      routingProfiles: \"routingProfiles\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAoisLayer: \"poisAoisLayer\",\n      poisAois: \"poisAois\",\n      selectedPois: \"selectedPois\",\n      selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n    }),\n    ...mapFields(\"isochrones\", {\n      type: \"type\",\n      time: \"time\",\n      speed: \"speed\",\n      steps: \"steps\",\n      routing: \"routing\",\n      calculations: \"calculations\",\n      isochroneLayer: \"isochroneLayer\",\n      isochroneOverlayLayer: \"isochroneOverlayLayer\",\n      isochroneRoadNetworkLayer: \"isochroneRoadNetworkLayer\",\n      multiIsochroneSelectionLayer: \"multiIsochroneSelectionLayer\",\n      multiIsochroneMethod: \"multiIsochroneMethod\",\n      colors: \"colors\",\n      defaultIsochroneColor: \"defaultIsochroneColor\",\n      scenarioIsochroneColor: \"scenarioIsochroneColor\",\n      selectedThematicData: \"selectedThematicData\"\n    }),\n    ...mapFields(\"map\", {\n      isMapBusy: \"isMapBusy\"\n    }),\n    headersSingle() {\n      return [\n        {\n          text: this.$t(\"isochrones.results.table.visible\"),\n          value: \"visible\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.range\"),\n          align: \"center\",\n          value: \"range\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.area\"),\n          align: \"center\",\n          value: \"area\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.population\"),\n          align: \"center\",\n          value: \"population\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.legend\"),\n          value: \"legend\",\n          sortable: false\n        }\n      ];\n    },\n    headersMulti() {\n      return [\n        {\n          text: this.$t(\"isochrones.results.table.visible\"),\n          value: \"visible\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.range\"),\n          value: \"range\",\n          sortable: false\n        },\n        {\n          text: this.$t(\"isochrones.results.table.area\"),\n          value: \"area\",\n          sortable: false\n        },\n\n        {\n          text: this.$t(\"isochrones.results.table.legend\"),\n          value: \"legend\",\n          sortable: false\n        }\n      ];\n    },\n    getMultiIsochroneInfoLabelText() {\n      let text = \"\";\n      if (\n        this.multiIsochronePoiCount === 0 &&\n        this.multiIsochroneMethod === \"study_area\"\n      ) {\n        text = this.$t(\"isochrones.multiple.studyAreaInfoLabel\");\n      } else if (\n        this.multiIsochronePoiCount === 0 &&\n        this.multiIsochroneMethod === \"draw\"\n      ) {\n        text = this.$t(\"isochrones.multiple.drawPolygonInfoLabel\");\n      } else {\n        text = `${this.$t(\"isochrones.multiple.amenityCount\")}: ${\n          this.multiIsochronePoiCount\n        } (${this.$t(\"isochrones.multiple.limit\")}: ${this.maxAmenities})`;\n      }\n      return text;\n    },\n    isMultiIsochroneCalculationDisabled() {\n      if (\n        this.multiIsochronePoiCount > 0 &&\n        this.multiIsochronePoiCount < this.maxAmenities\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  },\n  methods: {\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\",\n      startHelpTooltip: \"START_HELP_TOOLTIP\",\n      stopHelpTooltip: \"STOP_HELP_TOOLTIP\"\n    }),\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      this.createIsochroneLayer();\n      this.createIsochroneRoadNetworkLayer();\n      this.createIsochroneOverlayLayer();\n      this.createMultiIsochroneSelectionLayer();\n      this.setUpCtxMenu();\n\n      EventBus.$on(\"show-isochrone-window\", this.showIsochroneWindow);\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneLayer() {\n      const style = getIsochroneStyle();\n      const vector = new VectorLayer({\n        name: \"isochrone_layer\",\n        displayInLegend: false,\n        zIndex: 6,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneLayer = vector;\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneRoadNetworkLayer() {\n      const style = getIsochroneNetworkStyle();\n      const vector = new VectorImageLayer({\n        name: \"isochrone_road_network_layer\",\n        displayInLegend: false,\n        zIndex: 5,\n        source: new VectorSource(),\n        style: style\n      });\n      this.map.addLayer(vector);\n      this.isochroneRoadNetworkLayer = vector;\n    },\n    /**\n     * Creates a vector layer for the isochrone calculations results and adds it to the\n     * map and store.\n     */\n    createIsochroneOverlayLayer() {\n      const vector = new VectorImageLayer({\n        name: \"isochrone_overlayer\",\n        displayInLegend: false,\n        zIndex: 7,\n        source: new VectorSource(),\n        style: isochroneOverlayStyle\n      });\n      this.map.addLayer(vector);\n      this.isochroneOverlayLayer = vector;\n    },\n\n    /**\n     * Create multi isochrone selection layer\n     */\n    createMultiIsochroneSelectionLayer() {\n      const selectionSource = new VectorSource({\n        wrapX: false\n      });\n      const selectionLayer = new VectorLayer({\n        displayInLayerList: false,\n        zIndex: 5,\n        source: selectionSource,\n        style: studyAreaASelectStyle()\n      });\n      this.map.addLayer(selectionLayer);\n      this.multiIsochroneSelectionLayer = selectionLayer;\n    },\n\n    /**\n     * Register map click listener to calculate single isochrone.\n     */\n    registerMapClick() {\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      if (this.type === \"single\") {\n        this.mapClickListener = this.map.once(\"singleclick\", this.onMapClick);\n        this.startHelpTooltip(\n          this.$t(\"map.tooltips.clickForIsochroneCalculation\")\n        );\n      } else {\n        this.mapClickListener = this.map.on(\"singleclick\", this.onMapClick);\n      }\n\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n    },\n\n    /**\n     * Activate multi isochrone method.\n     */\n    activateMultiIsochrone(type) {\n      this.clear();\n      this.multiIsochroneMethod = type;\n      EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n      this.removeMultiIsochroneInteraction();\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"pointer\";\n      }\n      if (this.addKeyupListener) {\n        this.addKeyupListener();\n      }\n\n      if (this.multiIsochroneMethod === \"study_area\") {\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.studyAreaInfoLabel\"),\n          state: true,\n          timeout: 5000\n        });\n        //Study are method\n        this.pointerMoveKey = this.map.on(\n          \"pointermove\",\n          this.onMultiIsochronePointerMove\n        );\n        if (!this.subStudyAreaLayer) {\n          this.toggleSnackbar({\n            type: \"error\",\n            message: \"Study area layer not available\",\n            state: true,\n            timeout: 10000\n          });\n          this.stop();\n          return;\n        }\n\n        this.subStudyAreaLayer.setVisible(true);\n        this.registerMapClick();\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      } else if (this.multiIsochroneMethod === \"draw\") {\n        const drawPolygon = new DrawInteraction({\n          type: \"Polygon\"\n        });\n        drawPolygon.on(\"drawstart\", this.onMultiIsochroneDrawStart);\n        drawPolygon.on(\"drawend\", this.onMultiIsochroneDrawEnd);\n        this.map.addInteraction(drawPolygon);\n        this.drawPolygon = drawPolygon;\n        this.startHelpTooltip(\n          this.$t(\"map.tooltips.clickToStartDrawingPolygon\")\n        );\n        this.toggleSnackbar({\n          type: this.appColor.primary,\n          message: this.$t(\"isochrones.multiple.drawPolygonInfoLabel\"),\n          state: true,\n          timeout: 10000\n        });\n      }\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onMultiIsochroneDrawStart() {\n      this.toggleSnackbar({ state: false });\n      this.multiIsochronePoiCount = 0;\n      this.multiIsochroneSelectionLayer.getSource().clear();\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToContinueDrawing\"));\n    },\n\n    /**\n     * Draw interaction end event handler\n     */\n    onMultiIsochroneDrawEnd(evt) {\n      if (evt.feature) {\n        this.multiIsochroneSelectionLayer.getSource().addFeature(evt.feature);\n      } else {\n        return;\n      }\n      if (this.selectedPois.length === 0) {\n        this.toggleSnackbar({\n          type: \"error\",\n          message: this.$t(\"map.snackbarMessages.selectAmenities\"),\n          state: true,\n          timeout: 10000\n        });\n        return;\n      }\n      this.countPois();\n      this.toggleSnackbar({\n        type:\n          this.multiIsochronePoiCount > this.maxAmenities\n            ? \"error\"\n            : this.appColor.primary,\n        message:\n          this.$t(\"isochrones.multiple.amenityCount\") +\n          ` ${this.multiIsochronePoiCount} / ${this.maxAmenities}`,\n        state: true,\n        timeout: 0\n      });\n      this.startHelpTooltip(this.$t(\"map.tooltips.clickToStartDrawing\"));\n    },\n    /**\n     * Event for updating the edit help tooltip\n     */\n    onMultiIsochronePointerMove(evt) {\n      const coordinate = evt.coordinate;\n      if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(coordinate).length > 0\n      ) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToRemove\"));\n      } else if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(coordinate).length == 0\n      ) {\n        this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n      }\n    },\n    removeMultiIsochroneInteraction() {\n      // cleanup possible old select interaction\n      if (this.drawPolygon) {\n        this.map.removeInteraction(this.drawPolygon);\n      }\n      if (this.mapClickListenerKey) {\n        unByKey(this.mapClickListenerKey);\n      }\n      if (this.pointerMoveKey) {\n        unByKey(this.pointerMoveKey);\n      }\n      this.multiIsochronePoiCount = 0;\n    },\n    /**\n     * Count pois that intersect with study area or polygon\n     */\n    countPois() {\n      this.multiIsochronePoiCount = 0;\n      const region = [];\n      const multiIsochroneSelectionLayerFeatures = this.multiIsochroneSelectionLayer\n        .getSource()\n        .getFeatures();\n      if (multiIsochroneSelectionLayerFeatures.length === 0) {\n        this.toggleSnackbar({\n          type:\n            this.multiIsochronePoiCount > this.maxAmenities ||\n            this.multiIsochronePoiCount === 0\n              ? \"error\"\n              : this.appColor.primary,\n          message:\n            this.$t(\"isochrones.multiple.amenityCount\") +\n            ` ${this.multiIsochronePoiCount} (Limit: ${this.maxAmenities})`,\n          state: true,\n          timeout: 100000\n        });\n        return;\n      }\n      multiIsochroneSelectionLayerFeatures.forEach(feature => {\n        if (this.multiIsochroneMethod === \"study_area\") {\n          region.push(feature.get(\"id\"));\n        } else {\n          const geometry = feature\n            .getGeometry()\n            .clone()\n            .transform(\"EPSG:3857\", \"EPSG:4326\");\n          region.push(geometryToWKT(geometry));\n        }\n      });\n      ApiService.post(`/isochrones/multi/count-pois`, {\n        region_type: this.multiIsochroneMethod,\n        region,\n        scenario_id: 0, //TODO: Get scenario id\n        modus: this.calculationMode.active,\n        routing_profile: this.routing,\n        minutes: this.time,\n        speed: this.speed,\n        amenities: this.selectedPoisOnlyKeys\n      })\n        .then(response => {\n          if (response.data) {\n            const poisNumber = response.data;\n            this.multiIsochronePoiCount = poisNumber;\n            this.toggleSnackbar({\n              type:\n                this.multiIsochronePoiCount > this.maxAmenities ||\n                this.multiIsochronePoiCount === 0\n                  ? \"error\"\n                  : this.appColor.primary,\n              message:\n                this.$t(\"isochrones.multiple.amenityCount\") +\n                ` ${this.multiIsochronePoiCount} (Limit: ${this.maxAmenities})`,\n              state: true,\n              timeout: 100000\n            });\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    //=============================================================\n    /**\n     * Handler for 'singleclick' on the map.\n     * Collects data and passes it to corresponding objects.\n     * @param  {ol/MapBrowserEvent} evt The OL event of 'singleclick' on the map\n     */\n    onMapClick(evt) {\n      const projection = this.map\n        .getView()\n        .getProjection()\n        .getCode();\n      const coordinateWgs84 = transform(\n        evt.coordinate,\n        projection,\n        \"EPSG:4326\"\n      );\n      if (\n        this.multiIsochroneMethod === \"study_area\" &&\n        this.type === \"multiple\"\n      ) {\n        //Check if there is a feature already selected at clicked coordinate,\n        //and if so, delete it and return.\n        const featureAtCoord = this.multiIsochroneSelectionLayer\n          .getSource()\n          .getFeaturesAtCoordinate(evt.coordinate);\n        if (featureAtCoord.length > 0) {\n          this.multiIsochroneSelectionLayer\n            .getSource()\n            .removeFeature(featureAtCoord[0]);\n          this.startHelpTooltip(this.$t(\"map.tooltips.clickToSelectStudyArea\"));\n          this.countPois();\n          return;\n        }\n        const subStudyAreaAtCoord = this.subStudyAreaLayer\n          .getSource()\n          .getFeaturesAtCoordinate(evt.coordinate);\n        if (subStudyAreaAtCoord.length > 0) {\n          const feature = subStudyAreaAtCoord[0].clone();\n          this.multiIsochroneSelectionLayer.getSource().addFeature(feature);\n        }\n        this.countPois();\n      } else {\n        const payloadSingle = {\n          x: coordinateWgs84[0],\n          y: coordinateWgs84[1]\n        };\n        const calculationNumber = this.calculations.length + 1;\n        const isochroneMarkerFeature = new Feature({\n          geometry: new Point(evt.coordinate),\n          calculationNumber: calculationNumber\n        });\n        isochroneMarkerFeature.setId(\"isochrone_marker_\" + calculationNumber);\n        isochroneMarkerFeature.set(\"showLabel\", false);\n        this.isochroneLayer.getSource().addFeature(isochroneMarkerFeature);\n        this.calculateIsochrone(payloadSingle)\n          .then(() => {})\n          .catch(error => {\n            if (error && error.message === \"cancelled\") {\n              return;\n            }\n            this.toggleSnackbar({\n              type: \"error\", //success or error\n              message: this.$t(\"map.snackbarMessages.calculateIsochroneError\"),\n              state: true,\n              timeout: 2500\n            });\n          });\n        this.clear();\n      }\n    },\n    /**\n     * Calculate isochrone .\n     * Collects data and passes it to corresponding objects.\n     * @param  {Object} parameters The parameters for the isochrone calculation\n     * @param  {ol/Feature} isochroneMarkerFeature The starting point for the isochrone calculation (Optional)\n     */\n    calculateIsochrone(params) {\n      const type = this.type;\n      const time = this.time;\n      const speed = this.speed;\n      const routing = this.routing;\n      const steps = this.steps;\n      const modus = this.calculationMode.active;\n      const scenario_id = this.activeScenario ? this.activeScenario : 0;\n      const baseParams = {\n        minutes: time,\n        speed,\n        modus,\n        n: steps,\n        routing_profile: routing,\n        scenario_id\n      };\n      const payload = { ...baseParams, ...params };\n      this.isMapBusy = true;\n      this.isIsochroneBusy = true;\n      const axiosInstance = axios.create();\n      const CancelToken = axios.CancelToken;\n      return new Promise((resolve, reject) => {\n        let endpoint = \"\";\n        if (type === \"single\") {\n          endpoint = \"single\";\n        } else if (type === \"multiple\") {\n          endpoint = \"multi/pois\";\n        }\n        axiosInstance\n          .post(`/isochrones/${endpoint}`, payload, {\n            cancelToken: new CancelToken(c => {\n              // An executor function receives a cancel function as a parameter\n              this.cancelRequestToken = c;\n            })\n          })\n          .then(response => {\n            resolve(response);\n            if (response.data) {\n              const calculationData = [];\n              const calculationNumber = this.calculations.length + 1;\n              //Order features based on id\n              let olFeatures = geojsonToFeature(response.data, {\n                dataProjection: \"EPSG:4326\",\n                featureProjection: \"EPSG:3857\"\n              });\n\n              olFeatures.sort((a, b) => {\n                return a.get(\"step\") - b.get(\"step\");\n              });\n              olFeatures.forEach((feature, index) => {\n                const isochroneCalculationUid =\n                  feature.get(\"isochrone_calculation_id\") || calculationNumber;\n                feature.setId(\n                  \"isochrone_feature_\" + isochroneCalculationUid + \"_\" + index\n                );\n                let color = \"\";\n                let level = feature.get(\"step\");\n                let modus = feature.get(\"modus\") || modus;\n                if (modus === \"default\" || modus === \"comparison\") {\n                  color = IsochroneUtils.getInterpolatedColor(\n                    1,\n                    20,\n                    parseInt(level / 60),\n                    this.colors[this.defaultIsochroneColor]\n                  );\n                } else {\n                  color = IsochroneUtils.getInterpolatedColor(\n                    1,\n                    20,\n                    parseInt(level / 60),\n                    this.colors[this.scenarioIsochroneColor]\n                  );\n                }\n                let obj = {\n                  id: feature.getId(),\n                  type: feature.get(\"modus\")\n                    ? this.$t(\n                        `isochrones.mode.${feature.get(\"modus\").toLowerCase()}`\n                      )\n                    : this.$t(`isochrones.mode.${modus.toLowerCase()}`),\n                  isochrone_calculation_id: isochroneCalculationUid,\n                  modus: modus,\n                  range: Math.round(feature.get(\"step\") / 60) + \" min\",\n                  color: color,\n                  area: getPolygonArea(feature.getGeometry()),\n                  population:\n                    feature.get(\"reached_opportunities\").sum_pop ||\n                    feature.get(\"reached_opportunities\").reached_population,\n                  isVisible: true\n                };\n                feature.set(\"isVisible\", true);\n                feature.set(\"calculationNumber\", calculationNumber);\n                feature.set(\"color\", color);\n                feature.set(\"calculationType\", type);\n                feature.set(\"hoverColor\", \"\");\n                feature.set(\"showLabel\", false);\n                calculationData.push(obj);\n              });\n              let transformedData = {\n                id: calculationNumber,\n                calculationType: type.toLowerCase(),\n                calculationMode: baseParams.modus.replace(/'/g, \"\"), // remove extra apostrophe in multi-isochrone\n                time: baseParams.minutes + \" min\",\n                speed: baseParams.speed + \" km/h\",\n                routing_profile: routing,\n                scenario_id,\n                isExpanded: true,\n                isVisible: true,\n                data: calculationData,\n                additionalData: {}\n              };\n              // Add default calculation color palette.\n              if (transformedData.calculationMode === \"default\") {\n                transformedData[\n                  `defaultColorPalette`\n                ] = this.defaultIsochroneColor;\n              } else if (transformedData.calculationMode === \"scenario\") {\n                transformedData[\n                  `scenarioColorPalette`\n                ] = this.scenarioIsochroneColor;\n              } else if (transformedData.calculationMode === \"comparison\") {\n                transformedData[\n                  `defaultColorPalette`\n                ] = this.defaultIsochroneColor;\n                transformedData[\n                  `scenarioColorPalette`\n                ] = this.scenarioIsochroneColor;\n              }\n              if (type === \"single\") {\n                //TODO: Get start point from response\n                const markerFeature = this.isochroneLayer\n                  .getSource()\n                  .getFeatureById(\"isochrone_marker_\" + calculationNumber);\n                markerFeature.set(\"speed\", speed);\n                markerFeature.set(\"routing\", routing);\n                const startPointCoord = markerFeature\n                  .getGeometry()\n                  .getCoordinates();\n                const wgs84Coord = toLonLat(startPointCoord);\n                //Geocode\n\n                delete axiosInstance.defaults.headers.common[\"Authorization\"];\n                axiosInstance\n                  .get(\n                    `https://api.locationiq.com/v1/reverse.php?key=ca068d7840bca4&lat=${wgs84Coord[1]}&lon=${wgs84Coord[0]}&format=json`\n                  )\n                  .then(response => {\n                    if (response.status === 200 && response.data.display_name) {\n                      const address = response.data.display_name;\n                      transformedData.position = address;\n                    }\n                  })\n                  .catch(() => {\n                    transformedData.position = \"Unknown\";\n                  })\n                  .finally(() => {\n                    this.isMapBusy = false;\n                    this.isIsochroneBusy = false;\n                    this.calculations.forEach(calculation => {\n                      calculation.isExpanded = false;\n                    });\n                    this.calculations.unshift(transformedData);\n                    this.isochroneLayer.getSource().addFeatures(olFeatures);\n\n                    this.toggleIsochroneWindow(true, transformedData);\n                    this.isOptionsElVisible = false;\n                  });\n              } else {\n                transformedData.position = \"Multi Isochrone Calculation\";\n                this.calculations.forEach(calculation => {\n                  calculation.isExpanded = false;\n                });\n                transformedData.additionalData[\"features\"] = [];\n                this.multiIsochroneSelectionLayer\n                  .getSource()\n                  .getFeatures()\n                  .forEach(feature => {\n                    const clonedFeature = feature.clone();\n                    transformedData.additionalData[\"features\"].push(\n                      clonedFeature\n                    );\n                  });\n                this.isochroneOverlayLayer\n                  .getSource()\n                  .addFeatures(transformedData.additionalData[\"features\"]);\n                this.calculations.unshift(transformedData);\n                this.isochroneLayer.getSource().addFeatures(olFeatures);\n                this.toggleIsochroneWindow(true, transformedData);\n                this.isOptionsElVisible = false;\n                this.isMapBusy = false;\n                this.isIsochroneBusy = false;\n              }\n            }\n          })\n          .catch(error => {\n            reject(error);\n          })\n          .finally(() => {\n            this.multiIsochroneSelectionLayer.getSource().clear();\n            this.isMapBusy = false;\n            this.isIsochroneBusy = false;\n            this.clear();\n          });\n      });\n    },\n    calculateMultiIsochrone() {\n      const regionType = this.multiIsochroneMethod;\n      const payload = {\n        region_type: regionType\n      };\n      const features = this.multiIsochroneSelectionLayer\n        .getSource()\n        .getFeatures();\n      if (regionType === \"study_area\") {\n        // Get selected study areas ids\n        const region = [];\n        features.forEach(feature => {\n          region.push(feature.get(\"id\").toString());\n        });\n        payload.region = region;\n      } else {\n        // Get polygon geometry\n        const feature = features[0];\n        if (!feature) return;\n        const geometry = feature\n          .getGeometry()\n          .clone()\n          .transform(\"EPSG:3857\", \"EPSG:4326\");\n        const region = geometryToWKT(geometry);\n        payload.region = [region];\n      }\n      payload.amenities = this.selectedPoisOnlyKeys;\n      this.calculateIsochrone(payload);\n    },\n    isCalculationActive(calculation) {\n      if (!this.selectedThematicData) {\n        return false;\n      }\n      if (calculation.id === this.selectedThematicData.calculationId) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    groupedCalculationData(data) {\n      const groupedCalculations = groupBy(data, \"type\");\n      return groupedCalculations;\n    },\n    /**\n     * Configure right-click for isochrone.\n     */\n    setUpCtxMenu() {\n      if (this.contextmenu) {\n        this.contextmenu.on(\"beforeopen\", evt => {\n          const features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"isochrone_layer\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          let closestFeature;\n          let closestDistance;\n          const clickedCoord = toLonLat(evt.coordinate);\n\n          features.forEach(f => {\n            if (f.get(\"calculationType\") === \"single\") {\n              let startingPoint = wktToFeature(f.get(\"starting_point\"));\n              const distance = getDistance(\n                clickedCoord,\n                startingPoint.getGeometry().getCoordinates()\n              );\n              if (!closestDistance || closestDistance > distance) {\n                closestDistance = distance;\n                closestFeature = f;\n              }\n            }\n          });\n\n          if (!closestFeature) {\n            closestFeature = features[0];\n          }\n          if (features.length > 0) {\n            this.contextmenu.extend([\n              \"-\", // this is a separator\n              {\n                text: `<i class=\"fa fa-trash fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.deleteIsochrone\"\n                )}`,\n                label: \"deleteIsochrone\",\n                callback: () => {\n                  const calculation = this.calculations.filter(\n                    calculation =>\n                      calculation.id === closestFeature.get(\"calculationNumber\")\n                  );\n                  if (calculation[0]) {\n                    this.deleteCalculation(calculation[0]);\n                  }\n                }\n              }, // this is a separator\n              {\n                text: `<i class=\"fas fa-redo fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.redoCalculation\"\n                )}`,\n                label: \"redoCalculation\",\n                callback: () => {\n                  const calculation = this.calculations.filter(\n                    calculation =>\n                      calculation.id === closestFeature.get(\"calculationNumber\")\n                  );\n                  if (calculation[0]) {\n                    this.removeCalculation(calculation[0]);\n                    if (calculation[0].calculationType === \"single\") {\n                      this.updatePosition({\n                        coordinate: wktToFeature(\n                          closestFeature.get(\"starting_point\")\n                        )\n                          .getGeometry()\n                          .getCoordinates(),\n                        placeName: \"\"\n                      });\n                    }\n                    this.calculateIsochrone(calculation[0]);\n                  }\n                }\n              }\n            ]);\n          }\n        });\n      }\n    },\n    // ------------RESULTS----------\n    showIsochroneWindow(calculationId) {\n      const calculation = this.calculations.filter(\n        calculation => calculation.id === calculationId\n      );\n      if (calculation && calculation[0]) {\n        this.toggleIsochroneWindow(true, calculation[0]);\n      }\n    },\n    toggleIsochroneWindow(state, calculation) {\n      if (state === false) {\n        this.isochroneLayer\n          .getSource()\n          .getFeatures()\n          .forEach(f => {\n            f.set(\"highlightFeature\", false);\n          });\n        this.selectedThematicData = null;\n        return;\n      }\n      const features = IsochroneUtils.getCalculationFeatures(\n        calculation,\n        this.isochroneLayer\n      );\n\n      features.forEach(f => {\n        f.set(\"highlightFeature\", true);\n      });\n      const pois = IsochroneUtils.getCalculationPoisObject(features);\n      const payload = {\n        calculationId: calculation.id,\n        calculationType: calculation.calculationType,\n        pois: pois\n      };\n      if (calculation.calculationType === \"multiple\") {\n        const multiIsochroneTableData = IsochroneUtils.getMultiIsochroneTableData(\n          features\n        );\n        payload.multiIsochroneTableData = multiIsochroneTableData;\n      }\n      this.selectedThematicData = payload;\n    },\n    // eslint-disable-next-line no-unused-vars\n    toggleIsochroneVisibility(feature, calculation, data) {\n      this.toggleIsochroneFeatureVisibility(feature);\n    },\n    toggleIsochroneFeatureVisibility(feature) {\n      let featureId = feature.id;\n      feature.isVisible = !feature.isVisible;\n      if (featureId) {\n        let isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(featureId);\n        if (isochroneFeature) {\n          isochroneFeature.set(\"isVisible\", feature.isVisible);\n        }\n      }\n    },\n    toggleDownloadDialog(calculation) {\n      this.downloadDialogState = true;\n      this.selectedCalculation = calculation;\n    },\n    toggleCalculation(calculation, modus = null) {\n      let data = calculation.data;\n      if (modus) {\n        data = data.filter(calculation => calculation.modus === modus);\n      }\n      const isIndeterminateState = this.getToggleCalculationCheckboxIndeterminateState(\n        data\n      );\n      data.forEach(isochrone => {\n        let featureId = isochrone.id;\n        let isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(featureId);\n        if (isochroneFeature) {\n          // Edge case for comparision\n\n          if (modus && isochroneFeature.get(\"modus\") === modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n          if (!modus) {\n            if (isIndeterminateState) {\n              isochrone.isVisible = false;\n            } else {\n              isochrone.isVisible = !isochrone.isVisible;\n            }\n            isochroneFeature.set(\"isVisible\", isochrone.isVisible);\n          }\n        }\n      });\n      const visibleCount = data.filter(isochrone => isochrone.isVisible).length;\n      if (visibleCount === 0) {\n        calculation.isVisible = false;\n      } else {\n        calculation.isVisible = true;\n      }\n    },\n    toggleRoadNetwork(state, calculation, type) {\n      const roadNetworkSource = this.isochroneRoadNetworkLayer.getSource();\n      if (calculation.additionalData[type]) {\n        // Network is already fetched\n        const features = calculation.additionalData[type].features;\n        if (state === true) {\n          features.forEach(feature => {\n            roadNetworkSource.addFeature(feature);\n          });\n        } else {\n          features.forEach(feature => {\n            if (roadNetworkSource.hasFeature(feature)) {\n              roadNetworkSource.removeFeature(feature);\n            }\n          });\n        }\n      } else {\n        this.isMapBusy = true;\n        this.isIsochroneBusy = true;\n        // Network is not fetched yet\n        ApiService.get_(\n          `/isochrones/network/${calculation.data[0].isochrone_calculation_id}/${type}?return_type=geobuf`,\n          {\n            responseType: \"arraybuffer\",\n            headers: {\n              Accept: \"application/pdf\"\n            }\n          }\n        )\n          .then(response => {\n            if (response.data) {\n              const olFeatures = geobufToFeatures(response.data, {\n                dataProjection: \"EPSG:4326\",\n                featureProjection: \"EPSG:3857\"\n              });\n              calculation.additionalData[type] = {\n                features: olFeatures,\n                state: true\n              };\n              // Set isochrone calculation speed property for styling purpose\n              const speed = parseFloat(calculation.speed.split(\" \")[0]);\n              const lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n              const highestCostValue = 1200;\n              olFeatures.forEach(feature => {\n                feature.set(\"speed\", speed);\n                const cost = feature.get(\"cost\");\n                const modus = feature.get(\"modus\");\n                let color;\n                if (modus === \"default\") {\n                  color = this.colors[calculation.defaultColorPalette];\n                } else if (modus === \"scenario\") {\n                  color = this.colors[calculation.scenarioColorPalette];\n                }\n                const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n                  lowestCostValue,\n                  highestCostValue,\n                  cost,\n                  color\n                );\n                feature.set(\"color\", interpolatedColor);\n              });\n              roadNetworkSource.addFeatures(olFeatures);\n            }\n          })\n          .catch(error => {\n            console.log(error);\n          })\n          .finally(() => {\n            this.isMapBusy = false;\n            this.isIsochroneBusy = false;\n          });\n      }\n    },\n    toggleStudyArea(state, calculation) {\n      const features = calculation.additionalData[\"features\"];\n      features.forEach(feature => {\n        const hasFeature = this.isochroneOverlayLayer\n          .getSource()\n          .hasFeature(feature);\n        if (state === false && hasFeature) {\n          this.isochroneOverlayLayer.getSource().removeFeature(feature);\n        } else if (state === true && !hasFeature) {\n          this.isochroneOverlayLayer.getSource().addFeature(feature);\n        }\n      });\n    },\n    getPaletteColor(calculation, mode) {\n      const colorKey = `${mode}ColorPalette`;\n      return Object.values(this.colors[calculation[colorKey]]).toString();\n    },\n    toggleColorPickerDialog(calculation, mode) {\n      this.isochroneColorPickerState = true;\n      this.activeCalculation = calculation;\n      this.activeCalculationMode = mode;\n    },\n    getToggleCalculationCheckboxState(calculationData) {\n      const countVisibleFeatures = calculationData.filter(\n        o => o.isVisible === true\n      );\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n      return true;\n    },\n    getToggleCalculationCheckboxIndeterminateState(calculationData) {\n      const countVisibleFeatures = calculationData.filter(\n        o => o.isVisible === true\n      );\n      if (countVisibleFeatures.length === 0) {\n        return false;\n      }\n      if (countVisibleFeatures.length === calculationData.length) {\n        return false;\n      }\n      return true;\n    },\n    getStudyAreaToggleSwitchState(calculation) {\n      const features = calculation.additionalData[\"features\"];\n      let hasFeature = false;\n      features.forEach(feature => {\n        if (this.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n          hasFeature = true;\n        }\n      });\n      return hasFeature;\n    },\n\n    // ------------CLEAR----------\n    deleteAll() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"isochrones.deleteTitle\"),\n          this.$t(\"isochrones.deleteAllMessage\"),\n          { color: this.appColor.primary }\n        )\n        .then(confirm => {\n          if (confirm) {\n            this.calculations.forEach(calculation => {\n              this.removeCalculation(calculation);\n            });\n          }\n        });\n    },\n    removeCalculation(calculation) {\n      let id = calculation.id;\n      if (\n        this.selectedThematicData &&\n        this.selectedThematicData.calculationId === id\n      ) {\n        this.selectedThematicData = null;\n      } else if (this.selectedThematicData) {\n        this.selectedThematicData.calculationId =\n          this.selectedThematicData.calculationId - 1;\n      }\n\n      this.calculations = this.calculations.filter(\n        calculation => calculation.id != id\n      );\n      this.calculations = this.calculations.map(calculation => {\n        if (calculation.id > id) {\n          calculation.id = calculation.id - 1;\n        }\n        return calculation;\n      });\n      const isochroneSource = this.isochroneLayer.getSource();\n      isochroneSource.getFeatures().forEach(isochroneFeature => {\n        const isochroneCalculationNr = isochroneFeature.get(\n          \"calculationNumber\"\n        );\n        if (isochroneCalculationNr === id) {\n          isochroneSource.removeFeature(isochroneFeature);\n        }\n        if (isochroneCalculationNr > id) {\n          const updatedNr = isochroneCalculationNr - 1;\n          if (isochroneFeature.getGeometry().getType() === \"Point\") {\n            isochroneFeature.setId(\"isochrone_marker_\" + updatedNr);\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          } else {\n            isochroneFeature.set(\"calculationNumber\", updatedNr);\n          }\n        }\n      });\n      const isochroneRoadNetworkLayerSource = this.isochroneRoadNetworkLayer.getSource();\n      Object.keys(calculation.additionalData).forEach(type => {\n        const features = calculation.additionalData[type].features;\n        if (isochroneRoadNetworkLayerSource && features) {\n          features.forEach(feature => {\n            isochroneRoadNetworkLayerSource.removeFeature(feature);\n          });\n        }\n      });\n      // Remove isochrone overlay features\n      if (Array.isArray(calculation.additionalData.features)) {\n        calculation.additionalData.features.forEach(feature => {\n          if (this.isochroneOverlayLayer.getSource().hasFeature(feature)) {\n            this.isochroneOverlayLayer.getSource().removeFeature(feature);\n          }\n        });\n      }\n\n      this.isochroneOverlayLayer.changed();\n    },\n    /**\n     * Clears the map and ol interaction activity\n     */\n    stopIsochroneCalculation() {\n      this.clear();\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n      this.toggleSnackbar({\n        type: \"error\",\n        message: this.$t(\"map.snackbarMessages.calculationCancelled\"),\n        state: true,\n        timeout: 4000\n      });\n    },\n    clear() {\n      if (this.mapClickListener) {\n        unByKey(this.mapClickListener);\n        this.mapClickListener = null;\n      }\n      this.toggleSnackbar({ state: false });\n      this.removeMultiIsochroneInteraction();\n      this.multiIsochroneMethod = null;\n      this.multiIsochronePoiCount = 0;\n      this.stopHelpTooltip();\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.multiIsochroneSelectionLayer.getSource().clear();\n    },\n    stop() {\n      if (this.cancelRequestToken instanceof Function) {\n        this.cancelRequestToken(\"cancelled\");\n      }\n      this.clear();\n    }\n  },\n  watch: {\n    routing() {\n      this.appConfig.routing.forEach(routing => {\n        if (routing.type === this.routing) {\n          this.speed = routing.speed;\n        }\n      });\n    },\n    selectedPois() {\n      if (this.multiIsochroneMethod) {\n        this.countPois();\n      }\n    },\n    type(value) {\n      if (value === \"single\" && this.subStudyAreaLayer.getVisible()) {\n        this.subStudyAreaLayer.setVisible(false);\n      }\n    }\n  },\n  created() {\n    // Set default routing\n    const defaultRouting = this.appConfig.routing[0];\n    this.routing = defaultRouting.type;\n    this.speed = defaultRouting.speed;\n  }\n};\n</script>\n<style lang=\"css\">\n.result-icons {\n  color: \"#4A4A4A\";\n  cursor: pointer;\n}\n.result-icons:hover {\n  color: #30c2ff;\n}\n.delete-icon:hover {\n  color: #ff6060;\n}\n.v-data-table td,\n.v-data-table th {\n  padding: 0 5px;\n}\n.v-data-table th {\n  font-size: 14px;\n}\n.v-data-table td {\n  font-size: 13px;\n}\n.legend {\n  height: 20px;\n  border-radius: 4px;\n  width: 40px;\n}\n\n.colorPalettePicker {\n  height: 20px;\n  border-radius: 4px;\n  width: 50px;\n  cursor: pointer;\n}\n\n.activeIcon {\n  color: #30c2ff;\n}\n.v-input--selection-controls {\n  margin-top: 0px;\n  padding-top: 0px;\n}\n\n.subheader {\n  height: 25px;\n}\n\n.v-chip--label {\n  border-radius: 0px 8px 8px 0px !important;\n}\n\n.result-title {\n  display: inline-block;\n  width: 265px;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.chip-label-custom {\n  display: block;\n  width: 66px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n"]}]}