{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/InLegend.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/InLegend.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LegendRenderer from \"../../../../utils/LegendRenderer\";\nimport Legend from \"../controls/Legend\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../../EventBus\";\n\nexport default {\n  props: [\"layer\"],\n  mixins: [Legend],\n  data: () => ({\n    legendRerenderOnActiveMode: 0\n  }),\n  watch: {\n    //Rerendering the legend part when calculationModes value changes\n    \"calculationMode.active\": function() {\n      this.legendRerenderOnActiveMode += 1;\n    }\n  },\n  methods: {\n    isLayerAttributeVisible(layer, ith) {\n      //Checkbox will be checked or unchecked based on layer attribute visibility.\n      const name = layer.get(\"name\");\n      const attributeStyle = this.filterStylesOnActiveModeByLayerName(name)\n        .rules[ith].filter[0];\n      if (!attributeStyle) {\n        return false;\n      }\n      return true;\n    },\n    attributeLevelRendering(filter, layer, ith) {\n      //Display or hide layer on attribute level.\n      const name = layer.get(\"name\");\n      const styleFilter = this.filterStylesOnActiveModeByLayerName(name).rules[\n        ith\n      ];\n      if (styleFilter.filter[0]) {\n        styleFilter.filter[0] = \"\";\n      } else {\n        styleFilter.filter[0] = filter;\n      }\n      layer.getSource().changed();\n      layer.set(\n        \"attributeDisplayStatusKey\",\n        layer.get(\"attributeDisplayStatusKey\") + 1\n      );\n    },\n    renderLegend(layer, index) {\n      //Render individual legend on attribue level.\n      setTimeout(() => {\n        const name = layer.get(\"name\");\n        const styleObj = this.vectorTileStyles;\n        let styleTranslation = this.vectorTileStyles[name].translation;\n        const currentLocale = this.$i18n.locale;\n        if (styleObj[name] && styleObj[name].format === \"geostyler\") {\n          let el = this.$refs[`legend-vector-${name + index}`];\n          el = el ? el : [];\n          if (el.length) {\n            if (Array.isArray(el) && el.length > 0) {\n              el = el[0];\n            }\n            // Remove existing svg elements on update (Workaround)\n            if (el && el.childNodes.length > 0) {\n              el.removeChild(el.childNodes[0]);\n            }\n            const style = this.filterStylesOnActiveModeByLayerName(name);\n            let iStyle = style.rules[index];\n            const renderer = new LegendRenderer({\n              maxColumnWidth: 260,\n              overflow: \"auto\",\n              styles: [\n                {\n                  name: style.name,\n                  rules: [iStyle]\n                }\n              ],\n              size: [260, 300],\n              translation: { styleTranslation, currentLocale }\n            });\n\n            renderer.render(el);\n          }\n        }\n      }, 100);\n    },\n    getWMSLayerNames(layer) {\n      const layerUrl = layer.getSource().getUrl();\n      const layerKeyNames = new URL(layerUrl).searchParams.get(\"LAYERS\");\n      return layerKeyNames || \"\";\n    }\n  },\n  created() {\n    EventBus.$on(\"ol-interaction-activated\", type => {\n      if (type === \"languageChange\") {\n        this.legendRerenderOnActiveMode += 1;\n      }\n    });\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    })\n  }\n};\n",{"version":3,"sources":["InLegend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"InLegend.vue","sourceRoot":"src/components/viewer/ol/controls","sourcesContent":["<template>\n  <div>\n    <div\n      v-if=\"\n        layer.get('legendGraphicUrls') &&\n          Array.isArray(layer.get('legendGraphicUrls'))\n      \"\n    >\n      <template\n        v-for=\"(legendUrl, indexLegendUrls) in layer.get('legendGraphicUrls')\"\n      >\n        <div :key=\"indexLegendUrls\">\n          <img\n            crossorigin=\"anonymous\"\n            style=\"max-width:100%; padding-left:50px;\"\n            :src=\"legendUrl\"\n            class=\"white--text mt-0 pt-0\"\n          />\n        </div>\n      </template>\n    </div>\n    <div v-else>\n      <div :key=\"legendRerenderOnActiveMode\">\n        <div\n          v-if=\"\n            vectorTileStyles[layer.get('name')] &&\n              ['VECTOR', 'GEOBUF', 'MVT'].includes(\n                layer.get('type').toUpperCase()\n              )\n          \"\n          style=\"text-align: center; padding: 20px;\"\n          :key=\"layer.get('layerTreeKey')\"\n        >\n          <div v-if=\"vectorTileStyles[layer.get('name')]\">\n            <v-layout\n              v-for=\"(rule, ith) in filterStylesOnActiveModeByLayerName(\n                layer.get('name')\n              ).rules\"\n              :key=\"ith\"\n              class=\"pl-2\"\n              row\n              wrap\n              align-center\n            >\n              <v-flex xs1>\n                <v-simple-checkbox\n                  style=\"width: 27px;height: 38px;\"\n                  :ripple=\"false\"\n                  v-if=\"\n                    filterStylesOnActiveModeByLayerName(layer.get('name')).rules\n                      .length > 1\n                  \"\n                  :key=\"layer.get('attributeDisplayStatusKey')\"\n                  :color=\"appColor.secondary\"\n                  :value=\"isLayerAttributeVisible(layer, ith)\"\n                  @input=\"\n                    attributeLevelRendering(\n                      vectorTileStylesCopy[layer.get('name')].style.rules[ith]\n                        .filter[0],\n                      layer,\n                      ith\n                    )\n                  \"\n                >\n                </v-simple-checkbox>\n              </v-flex>\n              <v-flex xs11>\n                <span\n                  class=\"justify-start\"\n                  style=\"padding-right: 50px\"\n                  :ref=\"`legend-vector-${layer.get('name') + ith}`\"\n                  v-html=\"renderLegend(layer, ith)\"\n                >\n                </span>\n              </v-flex>\n            </v-layout>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LegendRenderer from \"../../../../utils/LegendRenderer\";\nimport Legend from \"../controls/Legend\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../../EventBus\";\n\nexport default {\n  props: [\"layer\"],\n  mixins: [Legend],\n  data: () => ({\n    legendRerenderOnActiveMode: 0\n  }),\n  watch: {\n    //Rerendering the legend part when calculationModes value changes\n    \"calculationMode.active\": function() {\n      this.legendRerenderOnActiveMode += 1;\n    }\n  },\n  methods: {\n    isLayerAttributeVisible(layer, ith) {\n      //Checkbox will be checked or unchecked based on layer attribute visibility.\n      const name = layer.get(\"name\");\n      const attributeStyle = this.filterStylesOnActiveModeByLayerName(name)\n        .rules[ith].filter[0];\n      if (!attributeStyle) {\n        return false;\n      }\n      return true;\n    },\n    attributeLevelRendering(filter, layer, ith) {\n      //Display or hide layer on attribute level.\n      const name = layer.get(\"name\");\n      const styleFilter = this.filterStylesOnActiveModeByLayerName(name).rules[\n        ith\n      ];\n      if (styleFilter.filter[0]) {\n        styleFilter.filter[0] = \"\";\n      } else {\n        styleFilter.filter[0] = filter;\n      }\n      layer.getSource().changed();\n      layer.set(\n        \"attributeDisplayStatusKey\",\n        layer.get(\"attributeDisplayStatusKey\") + 1\n      );\n    },\n    renderLegend(layer, index) {\n      //Render individual legend on attribue level.\n      setTimeout(() => {\n        const name = layer.get(\"name\");\n        const styleObj = this.vectorTileStyles;\n        let styleTranslation = this.vectorTileStyles[name].translation;\n        const currentLocale = this.$i18n.locale;\n        if (styleObj[name] && styleObj[name].format === \"geostyler\") {\n          let el = this.$refs[`legend-vector-${name + index}`];\n          el = el ? el : [];\n          if (el.length) {\n            if (Array.isArray(el) && el.length > 0) {\n              el = el[0];\n            }\n            // Remove existing svg elements on update (Workaround)\n            if (el && el.childNodes.length > 0) {\n              el.removeChild(el.childNodes[0]);\n            }\n            const style = this.filterStylesOnActiveModeByLayerName(name);\n            let iStyle = style.rules[index];\n            const renderer = new LegendRenderer({\n              maxColumnWidth: 260,\n              overflow: \"auto\",\n              styles: [\n                {\n                  name: style.name,\n                  rules: [iStyle]\n                }\n              ],\n              size: [260, 300],\n              translation: { styleTranslation, currentLocale }\n            });\n\n            renderer.render(el);\n          }\n        }\n      }, 100);\n    },\n    getWMSLayerNames(layer) {\n      const layerUrl = layer.getSource().getUrl();\n      const layerKeyNames = new URL(layerUrl).searchParams.get(\"LAYERS\");\n      return layerKeyNames || \"\";\n    }\n  },\n  created() {\n    EventBus.$on(\"ol-interaction-activated\", type => {\n      if (type === \"languageChange\") {\n        this.legendRerenderOnActiveMode += 1;\n      }\n    });\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    })\n  }\n};\n</script>\n"]}]}