{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/changeStyle/FillVectorStyle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/changeStyle/FillVectorStyle.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\nimport { debounce } from \"../../../utils/Helpers\";\n\nexport default {\n  props: [\"item\", \"ruleIndex\"],\n  mixins: [Legend],\n  data: () => ({\n    isExpanded: true,\n    tab: null,\n    hexa: \"hexa\",\n    fillColor: null,\n    outLineColor: null,\n    outLineWidth: null,\n    dialogue: false\n  }),\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    }),\n    style() {\n      return this.filterStylesOnActiveModeByLayerName(this.item.get(\"name\"))\n        .rules[this.ruleIndex];\n    }\n  },\n  created() {\n    if (this.dialogue == true) {\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    }\n    this.dialogue = !this.dialogue;\n    this.fillColor = this.style.symbolizers[0].color;\n    this.outLineWidth = this.style.symbolizers[0].outlineWidth;\n    if (this.outLineWidth == 0) {\n      this.style.symbolizers[0].outlineWidth = 0.001;\n      this.item.getSource().changed();\n    }\n    this.outLineColor = this.style.symbolizers[0].outlineColor;\n  },\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.dialogue = false;\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    },\n    resetStyle() {\n      /*\n        Function to reset the style of layer at attribute level\n      */\n\n      //Get original style for layer attribute\n      let sourceStyle = this.vectorTileStylesCopy[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Get present style for layer attribute\n      let targetStyle = this.vectorTileStyles[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Assign original style to present style to reset\n      targetStyle.symbolizers[0].color = sourceStyle.symbolizers[0].color;\n      targetStyle.symbolizers[0].outlineWidth =\n        sourceStyle.symbolizers[0].outlineWidth;\n\n      targetStyle.symbolizers[0].outlineColor =\n        sourceStyle.symbolizers[0].outlineColor;\n\n      this.fillColor = targetStyle.symbolizers[0].color;\n      this.outLineWidth = targetStyle.symbolizers[0].outlineWidth;\n      if (this.outLineWidth == 0) {\n        targetStyle.symbolizers[0].outlineWidth = 0.001;\n      }\n      this.outLineColor = targetStyle.symbolizers[0].outlineColor;\n\n      this.item.getSource().changed();\n    },\n    updateLegendRow: debounce(function() {\n      this.item.set(\n        \"attributeDisplayStatusKey\",\n        this.item.get(\"attributeDisplayStatusKey\") + 1\n      );\n    }, 60),\n    onFillColorChange(value) {\n      //Change color of polygon fill on inpu change\n      this.style.symbolizers[0].color = value.slice(0, 7);\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n\n    onOutLineColorChange(value) {\n      //Change color of polygon boundary on input change\n      this.style.symbolizers[0].outlineColor = value;\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onOutLineWidthChange() {\n      //Change width of Polygon boundary on input change\n      if (this.outLineWidth == 0) {\n        this.style.symbolizers[0].outlineWidth = 0.001;\n      } else {\n        this.style.symbolizers[0].outlineWidth = this.outLineWidth;\n      }\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    }\n  }\n};\n",{"version":3,"sources":["FillVectorStyle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"FillVectorStyle.vue","sourceRoot":"src/components/layers/changeStyle","sourcesContent":["<template>\n  <vue-scroll>\n    <v-tabs grow v-model=\"tab\" style=\"width: 400px; margin:auto;\">\n      <v-tab :key=\"1\">\n        <v-badge>\n          <b>{{ $t(\"appBar.stylePanel.fillColor\") }}</b>\n        </v-badge>\n      </v-tab>\n      <v-tab :key=\"2\">\n        <v-badge>\n          <b>{{ $t(\"appBar.stylePanel.outlineColorAndWidth\") }}</b>\n        </v-badge>\n      </v-tab>\n    </v-tabs>\n    <v-tabs-items v-model=\"tab\">\n      <v-tab-item :key=\"1\">\n        <v-color-picker\n          class=\"elevation-0\"\n          canvas-height=\"100\"\n          width=\"400\"\n          style=\"margin:auto; margin-bottom: 20px;\"\n          :mode.sync=\"hexa\"\n          v-model=\"fillColor\"\n          @input=\"onFillColorChange($event)\"\n        >\n        </v-color-picker>\n      </v-tab-item>\n      <v-tab-item :key=\"2\">\n        <span\n          class=\"d-flex mb-6\"\n          style=\"width:400px;margin:10px auto 0px auto;\"\n        >\n          <v-text-field\n            type=\"number\"\n            :min=\"0\"\n            :max=\"10\"\n            outlined\n            tile\n            v-model=\"outLineWidth\"\n            :step=\"1\"\n            label=\"Outline Width\"\n            style=\"height:50px;\"\n            @input=\"onOutLineWidthChange()\"\n          ></v-text-field>\n        </span>\n        <v-color-picker\n          class=\"elevation-0\"\n          canvas-height=\"100\"\n          width=\"400\"\n          style=\"margin:auto; margin-bottom: 20px;\"\n          :mode.sync=\"hexa\"\n          v-model=\"outLineColor\"\n          @input=\"onOutLineColorChange($event)\"\n        >\n        </v-color-picker>\n      </v-tab-item>\n    </v-tabs-items>\n    <v-btn\n      color=\"warning\"\n      dark\n      @click=\"resetStyle\"\n      style=\"width:100%;background-color: #2bb381 !important;\"\n    >\n      Reset Style\n    </v-btn>\n  </vue-scroll>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\nimport { debounce } from \"../../../utils/Helpers\";\n\nexport default {\n  props: [\"item\", \"ruleIndex\"],\n  mixins: [Legend],\n  data: () => ({\n    isExpanded: true,\n    tab: null,\n    hexa: \"hexa\",\n    fillColor: null,\n    outLineColor: null,\n    outLineWidth: null,\n    dialogue: false\n  }),\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    }),\n    style() {\n      return this.filterStylesOnActiveModeByLayerName(this.item.get(\"name\"))\n        .rules[this.ruleIndex];\n    }\n  },\n  created() {\n    if (this.dialogue == true) {\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    }\n    this.dialogue = !this.dialogue;\n    this.fillColor = this.style.symbolizers[0].color;\n    this.outLineWidth = this.style.symbolizers[0].outlineWidth;\n    if (this.outLineWidth == 0) {\n      this.style.symbolizers[0].outlineWidth = 0.001;\n      this.item.getSource().changed();\n    }\n    this.outLineColor = this.style.symbolizers[0].outlineColor;\n  },\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.dialogue = false;\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    },\n    resetStyle() {\n      /*\n        Function to reset the style of layer at attribute level\n      */\n\n      //Get original style for layer attribute\n      let sourceStyle = this.vectorTileStylesCopy[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Get present style for layer attribute\n      let targetStyle = this.vectorTileStyles[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Assign original style to present style to reset\n      targetStyle.symbolizers[0].color = sourceStyle.symbolizers[0].color;\n      targetStyle.symbolizers[0].outlineWidth =\n        sourceStyle.symbolizers[0].outlineWidth;\n\n      targetStyle.symbolizers[0].outlineColor =\n        sourceStyle.symbolizers[0].outlineColor;\n\n      this.fillColor = targetStyle.symbolizers[0].color;\n      this.outLineWidth = targetStyle.symbolizers[0].outlineWidth;\n      if (this.outLineWidth == 0) {\n        targetStyle.symbolizers[0].outlineWidth = 0.001;\n      }\n      this.outLineColor = targetStyle.symbolizers[0].outlineColor;\n\n      this.item.getSource().changed();\n    },\n    updateLegendRow: debounce(function() {\n      this.item.set(\n        \"attributeDisplayStatusKey\",\n        this.item.get(\"attributeDisplayStatusKey\") + 1\n      );\n    }, 60),\n    onFillColorChange(value) {\n      //Change color of polygon fill on inpu change\n      this.style.symbolizers[0].color = value.slice(0, 7);\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n\n    onOutLineColorChange(value) {\n      //Change color of polygon boundary on input change\n      this.style.symbolizers[0].outlineColor = value;\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onOutLineWidthChange() {\n      //Change width of Polygon boundary on input change\n      if (this.outLineWidth == 0) {\n        this.style.symbolizers[0].outlineWidth = 0.001;\n      } else {\n        this.style.symbolizers[0].outlineWidth = this.outLineWidth;\n      }\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    }\n  }\n};\n</script>\n<style>\n.v-dialog {\n  box-shadow: none;\n}\n</style>\n"]}]}