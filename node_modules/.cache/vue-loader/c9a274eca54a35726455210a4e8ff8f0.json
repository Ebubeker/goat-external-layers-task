{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochroneColorPicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochroneColorPicker.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\n\nexport default {\n  props: {\n    selectedMode: { type: String, required: false },\n    calculation: { type: Object, required: false },\n    visible: { type: Boolean, required: true }\n  },\n  data: () => ({}),\n  methods: {\n    getPaletteColor(color) {\n      return Object.values(color).toString();\n    },\n    colorChanged() {\n      const color = this.colors[\n        this.calculation[`${this.selectedMode}ColorPalette`]\n      ];\n\n      // Update isochrone color\n      this.calculation.data.forEach(obj => {\n        const isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(obj.id);\n        if (this.selectedMode == isochroneFeature.get(\"modus\")) {\n          console.log(this.selectedMode);\n          const step = isochroneFeature.get(\"step\");\n          const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n            1,\n            20,\n            parseInt(step / 60),\n            color\n          );\n          isochroneFeature.set(\"color\", interpolatedColor);\n          // legend el color\n          obj.color = interpolatedColor;\n        }\n      });\n\n      // Update network color\n      if (!this.calculation.additionalData[this.selectedMode]) return;\n      this.calculation.additionalData[this.selectedMode].features.forEach(\n        feature => {\n          const cost = feature.get(\"cost\");\n          const lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n          const highestCostValue = 1200;\n          const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n            lowestCostValue,\n            highestCostValue,\n            cost,\n            color\n          );\n          feature.set(\"color\", interpolatedColor);\n        }\n      );\n    }\n  },\n  watch: {},\n  computed: {\n    show: {\n      get() {\n        return this.visible;\n      },\n      set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    },\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\",\n      colors: \"colors\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n",{"version":3,"sources":["IsochroneColorPicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"IsochroneColorPicker.vue","sourceRoot":"src/components/isochrones","sourcesContent":["<template>\n  <v-dialog v-model=\"show\" scrollable max-width=\"330\" v-if=\"calculation\">\n    <v-card>\n      <v-app-bar :color=\"appColor.primary\" dark>\n        <v-app-bar-nav-icon><v-icon>fas fa-palette</v-icon></v-app-bar-nav-icon>\n        <v-toolbar-title>{{\n          $t(\"isochrones.pickColor.title\")\n        }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-app-bar-nav-icon @click.stop=\"show = false\"\n          ><v-icon>close</v-icon></v-app-bar-nav-icon\n        >\n      </v-app-bar>\n      <vue-scroll>\n        <v-container class=\"pb-0\">\n          <v-alert\n            border=\"left\"\n            colored-border\n            class=\"mb-0 mt-2 mx-1 elevation-2\"\n            icon=\"info\"\n            :color=\"appColor.primary\"\n            dense\n          >\n            <span v-html=\"$t('isochrones.results.colorMessage')\"></span>\n          </v-alert>\n          <v-radio-group\n            @change=\"colorChanged\"\n            class=\"ml-3 mt-3  mb-0\"\n            v-model=\"calculation[`${selectedMode}ColorPalette`]\"\n          >\n            <v-layout\n              row\n              wrap\n              align-center\n              class=\"mb-3\"\n              v-for=\"(color, key, index) in colors\"\n              :key=\"index\"\n            >\n              <v-radio :value=\"key\">\n                <template v-slot:label>\n                  <div\n                    class=\"colorPalettePicker\"\n                    :style=\"{\n                      backgroundImage: `linear-gradient(to right, ${getPaletteColor(\n                        color\n                      )})`\n                    }\"\n                  ></div>\n                </template>\n              </v-radio>\n            </v-layout>\n          </v-radio-group>\n        </v-container>\n      </vue-scroll>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\n\nexport default {\n  props: {\n    selectedMode: { type: String, required: false },\n    calculation: { type: Object, required: false },\n    visible: { type: Boolean, required: true }\n  },\n  data: () => ({}),\n  methods: {\n    getPaletteColor(color) {\n      return Object.values(color).toString();\n    },\n    colorChanged() {\n      const color = this.colors[\n        this.calculation[`${this.selectedMode}ColorPalette`]\n      ];\n\n      // Update isochrone color\n      this.calculation.data.forEach(obj => {\n        const isochroneFeature = this.isochroneLayer\n          .getSource()\n          .getFeatureById(obj.id);\n        if (this.selectedMode == isochroneFeature.get(\"modus\")) {\n          console.log(this.selectedMode);\n          const step = isochroneFeature.get(\"step\");\n          const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n            1,\n            20,\n            parseInt(step / 60),\n            color\n          );\n          isochroneFeature.set(\"color\", interpolatedColor);\n          // legend el color\n          obj.color = interpolatedColor;\n        }\n      });\n\n      // Update network color\n      if (!this.calculation.additionalData[this.selectedMode]) return;\n      this.calculation.additionalData[this.selectedMode].features.forEach(\n        feature => {\n          const cost = feature.get(\"cost\");\n          const lowestCostValue = 0; // TODO: Find lowest and highest based on response data\n          const highestCostValue = 1200;\n          const interpolatedColor = IsochroneUtils.getInterpolatedColor(\n            lowestCostValue,\n            highestCostValue,\n            cost,\n            color\n          );\n          feature.set(\"color\", interpolatedColor);\n        }\n      );\n    }\n  },\n  watch: {},\n  computed: {\n    show: {\n      get() {\n        return this.visible;\n      },\n      set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    },\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\",\n      colors: \"colors\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.colorPalettePicker {\n  height: 20px;\n  border-radius: 5px;\n  width: 265px;\n}\n</style>\n"]}]}