{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerTree/LayerTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/layerTree/LayerTree.vue","mtime":1658127411980},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../EventBus\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport LayerOrder from \"../layerOrder/LayerOrder\";\nimport StyleDialog from \"../changeStyle/StyleDialog\";\nimport ImportExternalLayers from \"../importLayers/ImportExternalLayers.vue\";\nimport TileLayer from \"ol/layer/Tile\";\nimport TileWMS from \"ol/source/TileWMS\";\n// import ImageWMS from \"ol/source/ImageWMS\";\n\nexport default {\n  mixins: [Mapable],\n  data() {\n    return {\n      layerGroupsArr: [],\n      currentItem: null,\n      styleDialogKey: 0,\n      styleDialogStatus: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appConfig: \"appConfig\",\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"app\", {\n      layerTabIndex: \"layerTabIndex\"\n    })\n  },\n  components: { LayerOrder, InLegend, StyleDialog, ImportExternalLayers },\n  methods: {\n    // Layer Import feature\n    layerInfoSubmited(data) {\n      let resultsfromThis = this.appConfig.layer_groups.map(lay => {\n        return Object.keys(lay)[0];\n      });\n      if (!resultsfromThis.includes(\"external_imports\")) {\n        let currentAppConfig = this.appConfig;\n        let imports = {\n          external_imports: {\n            children: [],\n            icon: \"fas fa-upload\"\n          }\n        };\n        currentAppConfig.layer_groups.push(imports);\n        this.$store.commit(\"app/setAppConfig\", currentAppConfig);\n      }\n\n      let newLayer = new TileLayer({\n        source: new TileWMS({\n          url: data.url,\n          params: {\n            layers: data.name\n          },\n          attribution: data.title\n        }),\n        group: \"external_imports\",\n        name: data.title,\n        visible: true,\n        opacity: 1,\n        type: \"wmts\"\n      });\n\n      this.map.addLayer(newLayer);\n\n      this.layerGroupsArr = [];\n\n      this.updateLayerGroups();\n    },\n\n    // XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n    updateLayerGroups() {\n      const layerGroups = this.appConfig.layer_groups;\n      layerGroups.forEach(lg => {\n        const layerGroupName = Object.keys(lg)[0];\n        if (layerGroupName !== \"heatmap\") {\n          let newObject = {\n            name: layerGroupName,\n            children: []\n          };\n          this.layerGroupsArr.push(newObject);\n        }\n      });\n\n      this.map\n        .getLayers()\n        .getArray()\n        .forEach(layer => {\n          if (layer.get(\"group\") && layer.get(\"group\") !== \"heatmap\") {\n            this.layerGroupsArr.forEach((lay, idx) => {\n              if (lay.name === layer.get(\"group\")) {\n                this.layerGroupsArr[idx].children.push(layer);\n              }\n            });\n          }\n        });\n    },\n    onMapBound() {\n      this.updateLayerGroups();\n    },\n    getLayerGroupIcon(group) {\n      const layerGroupConf = this.appConfig.layer_groups.filter(g => g[group]);\n      return layerGroupConf[0][group].icon || \"fas fa-layer-group\";\n      // return \"fas fa-layer-group\";\n    },\n    translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      const canTranslate = this.$te(`map.${type}.${key}`);\n      if (canTranslate) {\n        return this.$t(`map.${type}.${key}`);\n      } else {\n        return key;\n      }\n    },\n    toggleLayerVisibility(layer, group) {\n      const currentState = layer.getVisible();\n      //Turn off other layers if layer group is background layers.\n      if (layer.get(\"group\") === \"basemap\") {\n        group.forEach(layer => {\n          layer.setVisible(false);\n        });\n      }\n      layer.setVisible(!currentState);\n      if (layer.getVisible() === false) {\n        layer.set(\"showOptions\", false);\n      } else {\n        layer.set(\"showOptions\", true);\n      }\n      EventBus.$emit(\"toggleLayerVisiblity\", layer);\n    },\n    toggleLayerOptions(layer) {\n      layer.set(\"showOptions\", !layer.get(\"showOptions\"));\n    },\n    openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.styleDialogKey += 1;\n      }\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"layerTreeKey\") >= 0 &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.currentItem.set(\n          \"layerTreeKey\",\n          this.currentItem.get(\"layerTreeKey\") + 1\n        );\n      }\n      this.currentItem = item;\n    },\n    changeLayerOpacity(value, layer) {\n      layer.setOpacity(value);\n    }\n  }\n};\n",{"version":3,"sources":["LayerTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"LayerTree.vue","sourceRoot":"src/components/layers/layerTree","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-divider></v-divider>\n    <vue-scroll>\n      <v-tabs-items v-model=\"layerTabIndex\">\n        <v-tab-item :eager=\"true\">\n          <v-expansion-panels accordion multiple>\n            <v-expansion-panel\n              v-for=\"(layerGroup, i) in layerGroupsArr\"\n              :key=\"i\"\n              expand\n            >\n              <v-expansion-panel-header\n                class=\"elevation-2\"\n                expand-icon=\"\"\n                v-slot=\"{ open }\"\n              >\n                <v-layout row wrap align-center>\n                  <v-flex xs1>\n                    <v-icon small>{{\n                      getLayerGroupIcon(layerGroup.name)\n                    }}</v-icon>\n                  </v-flex>\n                  <v-flex xs10 class=\"light-text\" style=\"font-size:medium;\">\n                    <div>\n                      <b>{{ translate(\"layerGroup\", layerGroup.name) }}</b>\n                    </div>\n                  </v-flex>\n                  <v-flex xs1>\n                    <v-icon v-html=\"open ? 'remove' : 'add'\"></v-icon>\n                  </v-flex>\n                </v-layout>\n              </v-expansion-panel-header>\n              <v-expansion-panel-content>\n                <!-- LAYERS -->\n                <v-expansion-panels readonly>\n                  <v-expansion-panel\n                    v-for=\"(layer, i) in layerGroup.children\"\n                    :key=\"i\"\n                    class=\"layer-row\"\n                    :class=\"{\n                      'expansion-panel__container--active':\n                        layer.get('showOptions') === true\n                    }\"\n                  >\n                    <v-expansion-panel-header expand-icon=\"\" v-slot=\"{}\">\n                      <v-layout row class=\"pl-1\" wrap align-center>\n                        <v-flex class=\"checkbox\" xs1>\n                          <v-simple-checkbox\n                            :color=\"appColor.secondary\"\n                            :value=\"layer.getVisible()\"\n                            @input=\"\n                              toggleLayerVisibility(layer, layerGroup.children)\n                            \"\n                          ></v-simple-checkbox>\n                        </v-flex>\n                        <v-flex xs10 class=\"light-text\">\n                          <h4 class=\"pl-2\">\n                            {{ translate(\"layerName\", layer.get(\"name\")) }}\n                          </h4>\n                        </v-flex>\n                        <v-flex xs1>\n                          <v-icon\n                            v-show=\"\n                              layer.getVisible() &&\n                                layer.get('name') !== 'study_area'\n                            \"\n                            small\n                            style=\"width: 30px; height: 30px;\"\n                            v-html=\"\n                              layer.get('showOptions')\n                                ? 'fas fa-chevron-down'\n                                : 'fas fa-chevron-up'\n                            \"\n                            :class=\"{\n                              'expansion-panel__container--active': layer.get(\n                                'showOptions'\n                              )\n                            }\"\n                            @click.stop=\"toggleLayerOptions(layer)\"\n                          ></v-icon>\n                        </v-flex>\n                      </v-layout>\n                    </v-expansion-panel-header>\n                    <v-card\n                      class=\"pt-2\"\n                      v-show=\"\n                        layer.getVisible() &&\n                          layer.get('showOptions') === true &&\n                          layer.get('name') !== 'study_area'\n                      \"\n                      style=\"background-color: white;\"\n                      transition=\"slide-y-reverse-transition\"\n                    >\n                      <InLegend :layer=\"layer\"></InLegend>\n                      <v-layout row style=\"width:100%;padding-left: 10px;\">\n                        <v-flex\n                          class=\"xs2\"\n                          style=\"text-align:center;\"\n                          v-if=\"\n                            [\n                              'VECTORTILE',\n                              'VECTOR',\n                              'MVT',\n                              'GEOBUF',\n                              'WMTS',\n                              'WMS'\n                            ].includes(layer.get('type').toUpperCase())\n                          \"\n                        >\n                          <v-icon\n                            v-ripple\n                            style=\"color:#B0B0B0;margin-top:3px;cursor:pointer\"\n                            dark\n                            @click=\"openStyleDialog(layer)\"\n                          >\n                            fas fa-cog\n                          </v-icon>\n                        </v-flex>\n                        <v-flex\n                          :class=\"{\n                            xs10:\n                              [\n                                'VECTORTILE',\n                                'VECTOR',\n                                'MVT',\n                                'GEOBUF',\n                                'WMTS',\n                                'WMS'\n                              ].includes(layer.get('type').toUpperCase()) ==\n                              true,\n                            xs12: false\n                          }\"\n                        >\n                          <v-slider\n                            :value=\"layer.getOpacity()\"\n                            class=\"mx-5\"\n                            step=\"0.05\"\n                            min=\"0\"\n                            max=\"1\"\n                            @input=\"changeLayerOpacity($event, layer)\"\n                            :label=\"$t('layerTree.settings.transparency')\"\n                            :color=\"appColor.secondary\"\n                          ></v-slider>\n                        </v-flex>\n                      </v-layout>\n                    </v-card>\n                  </v-expansion-panel>\n                </v-expansion-panels>\n                <!-- ---- -->\n              </v-expansion-panel-content>\n            </v-expansion-panel>\n          </v-expansion-panels>\n          <v-layout class=\"mt-5\" column align-center>\n            <ImportExternalLayers @getLayerInfo=\"layerInfoSubmited\" />\n          </v-layout>\n        </v-tab-item>\n        <v-tab-item :eager=\"true\">\n          <layer-order\n            :map=\"map\"\n            :translate=\"translate\"\n            :toggleLayerOptions=\"toggleLayerOptions\"\n            :changeLayerOpacity=\"changeLayerOpacity\"\n          ></layer-order>\n        </v-tab-item>\n      </v-tabs-items>\n    </vue-scroll>\n    <span v-if=\"styleDialogStatus\">\n      <style-dialog\n        :item=\"currentItem\"\n        :translate=\"translate\"\n        :key=\"styleDialogKey\"\n        :styleDialogStatus=\"styleDialogStatus\"\n      >\n      </style-dialog>\n    </span>\n  </v-flex>\n</template>\n\n<script>\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { EventBus } from \"../../../EventBus\";\nimport InLegend from \"../../viewer/ol/controls/InLegend\";\nimport LayerOrder from \"../layerOrder/LayerOrder\";\nimport StyleDialog from \"../changeStyle/StyleDialog\";\nimport ImportExternalLayers from \"../importLayers/ImportExternalLayers.vue\";\nimport TileLayer from \"ol/layer/Tile\";\nimport TileWMS from \"ol/source/TileWMS\";\n// import ImageWMS from \"ol/source/ImageWMS\";\n\nexport default {\n  mixins: [Mapable],\n  data() {\n    return {\n      layerGroupsArr: [],\n      currentItem: null,\n      styleDialogKey: 0,\n      styleDialogStatus: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appConfig: \"appConfig\",\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"app\", {\n      layerTabIndex: \"layerTabIndex\"\n    })\n  },\n  components: { LayerOrder, InLegend, StyleDialog, ImportExternalLayers },\n  methods: {\n    // Layer Import feature\n    layerInfoSubmited(data) {\n      let resultsfromThis = this.appConfig.layer_groups.map(lay => {\n        return Object.keys(lay)[0];\n      });\n      if (!resultsfromThis.includes(\"external_imports\")) {\n        let currentAppConfig = this.appConfig;\n        let imports = {\n          external_imports: {\n            children: [],\n            icon: \"fas fa-upload\"\n          }\n        };\n        currentAppConfig.layer_groups.push(imports);\n        this.$store.commit(\"app/setAppConfig\", currentAppConfig);\n      }\n\n      let newLayer = new TileLayer({\n        source: new TileWMS({\n          url: data.url,\n          params: {\n            layers: data.name\n          },\n          attribution: data.title\n        }),\n        group: \"external_imports\",\n        name: data.title,\n        visible: true,\n        opacity: 1,\n        type: \"wmts\"\n      });\n\n      this.map.addLayer(newLayer);\n\n      this.layerGroupsArr = [];\n\n      this.updateLayerGroups();\n    },\n\n    // XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n    updateLayerGroups() {\n      const layerGroups = this.appConfig.layer_groups;\n      layerGroups.forEach(lg => {\n        const layerGroupName = Object.keys(lg)[0];\n        if (layerGroupName !== \"heatmap\") {\n          let newObject = {\n            name: layerGroupName,\n            children: []\n          };\n          this.layerGroupsArr.push(newObject);\n        }\n      });\n\n      this.map\n        .getLayers()\n        .getArray()\n        .forEach(layer => {\n          if (layer.get(\"group\") && layer.get(\"group\") !== \"heatmap\") {\n            this.layerGroupsArr.forEach((lay, idx) => {\n              if (lay.name === layer.get(\"group\")) {\n                this.layerGroupsArr[idx].children.push(layer);\n              }\n            });\n          }\n        });\n    },\n    onMapBound() {\n      this.updateLayerGroups();\n    },\n    getLayerGroupIcon(group) {\n      const layerGroupConf = this.appConfig.layer_groups.filter(g => g[group]);\n      return layerGroupConf[0][group].icon || \"fas fa-layer-group\";\n      // return \"fas fa-layer-group\";\n    },\n    translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      const canTranslate = this.$te(`map.${type}.${key}`);\n      if (canTranslate) {\n        return this.$t(`map.${type}.${key}`);\n      } else {\n        return key;\n      }\n    },\n    toggleLayerVisibility(layer, group) {\n      const currentState = layer.getVisible();\n      //Turn off other layers if layer group is background layers.\n      if (layer.get(\"group\") === \"basemap\") {\n        group.forEach(layer => {\n          layer.setVisible(false);\n        });\n      }\n      layer.setVisible(!currentState);\n      if (layer.getVisible() === false) {\n        layer.set(\"showOptions\", false);\n      } else {\n        layer.set(\"showOptions\", true);\n      }\n      EventBus.$emit(\"toggleLayerVisiblity\", layer);\n    },\n    toggleLayerOptions(layer) {\n      layer.set(\"showOptions\", !layer.get(\"showOptions\"));\n    },\n    openStyleDialog(item) {\n      //This function is used for opening Style Setting dialog component for a layer\n      EventBus.$emit(\"updateStyleDialogStatusForLayerOrder\", false);\n      this.styleDialogStatus = true;\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.styleDialogKey += 1;\n      }\n      if (\n        this.currentItem &&\n        this.currentItem.get(\"layerTreeKey\") >= 0 &&\n        this.currentItem.get(\"name\") !== item.get(\"name\")\n      ) {\n        this.currentItem.set(\n          \"layerTreeKey\",\n          this.currentItem.get(\"layerTreeKey\") + 1\n        );\n      }\n      this.currentItem = item;\n    },\n    changeLayerOpacity(value, layer) {\n      layer.setOpacity(value);\n    }\n  }\n};\n</script>\n\n<style lang=\"css\" scoped>\n.v-expansion-panel__header {\n  cursor: default;\n}\n.active-icon {\n  color: #30c2ff;\n}\n\n.expansion-panel__container--active {\n  background-color: white !important;\n}\n\n.checkbox >>> .v-input__control {\n  height: 25px;\n}\n\n.v-expansion-panel-content >>> .v-expansion-panel-content__wrap {\n  padding: 0px;\n}\n\n.v-expansion-panel-content >>> .v-input__slot {\n  margin-bottom: 0px;\n}\n\n.layer-row >>> .v-expansion-panel-header {\n  cursor: auto;\n}\n</style>\n"]}]}