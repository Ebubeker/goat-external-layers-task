{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/other/dynamicForms/components/Property.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/other/dynamicForms/components/Property.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/css-loader/index.js","mtime":1657636580953},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657636583241},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/postcss-loader/src/index.js","mtime":1657636582109},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.vjsf-property .array-card .v-card__text {\n  padding: 6px 16px 0 16px;\n}\n.vjsf-property .array-card .v-card__actions {\n  padding: 0 16px 6px 16px;\n}\n\n.vjsf-property .v-input--selection-controls {\n  margin-top: 0;\n}\n\n.vjsf-tooltip p:last-child {\n  margin-bottom: 0;\n}\n\n.vjsf-property .color-picker-trigger {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  cursor: pointer;\n  display: inline-block;\n  border: 2px solid #ccc;\n}\n\n.vjsf-property .color-picker-trigger-empty {\n  background: linear-gradient(\n    to top right,\n    transparent 0,\n    transparent calc(50% - 2.4px),\n    #de080a 50%,\n    transparent calc(50% + 2.4px),\n    transparent\n  );\n}\n",{"version":3,"sources":["Property.vue"],"names":[],"mappingssCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Property.vue","sourceRoot":"src/components/other/dynamicForms/components","sourcesContent":["<template>\n  <!-- Hide const ? Or make a readonly field -->\n  <v-flex\n    v-if=\"\n      fullSchema &&\n        fullSchema.const === undefined &&\n        fullSchema['x-display'] !== 'hidden'\n    \"\n    :class=\"propertyClass\"\n    :style=\"fullSchema['x-style'] || ''\"\n  >\n    <slot\n      :name=\"`prepend-${slotName}`\"\n      :fullKey=\"fullKey\"\n      :fullSchema=\"fullSchema\"\n      :modelWrapper=\"modelWrapper\"\n      :modelKey=\"modelKey\"\n      :model=\"modelWrapper[modelKey]\"\n      :required=\"required\"\n      :disabled=\"disabled\"\n      :rule=\"rules\"\n      :htmlDescription=\"htmlDescription\"\n    />\n    <slot\n      :name=\"slotName\"\n      :fullKey=\"fullKey\"\n      :fullSchema=\"fullSchema\"\n      :modelWrapper=\"modelWrapper\"\n      :modelKey=\"modelKey\"\n      :model=\"modelWrapper[modelKey]\"\n      :required=\"required\"\n      :disabled=\"disabled\"\n      :rule=\"rules\"\n      :htmlDescription=\"htmlDescription\"\n    >\n      <!-- Date picker -->\n      <v-menu\n        v-if=\"\n          fullSchema.type === 'string' &&\n            ['date', 'date-time'].includes(fullSchema.format)\n        \"\n        ref=\"menu\"\n        v-model=\"menu\"\n        :close-on-content-click=\"false\"\n        :nudge-right=\"40\"\n        :return-value.sync=\"modelWrapper[modelKey]\"\n        :disabled=\"disabled\"\n        transition=\"scale-transition\"\n        offset-y\n        full-width\n        min-width=\"290px\"\n      >\n        <template v-slot:activator=\"{ on }\">\n          <v-text-field\n            v-model=\"modelWrapper[modelKey]\"\n            :label=\"translateField(label)\"\n            :name=\"fullKey\"\n            :required=\"required\"\n            :rules=\"rules\"\n            :clearable=\"!required\"\n            :prepend-icon=\"options.icons.calendar\"\n            v-on=\"on\"\n          >\n            <tooltip\n              slot=\"append-outer\"\n              :options=\"options\"\n              :html-description=\"htmlDescription\"\n            />\n          </v-text-field>\n        </template>\n        <v-date-picker\n          v-model=\"modelWrapper[modelKey]\"\n          scrollable\n          landscape\n          :locale=\"options.locale\"\n        >\n          <v-spacer />\n          <v-btn\n            text\n            class=\"v-btn--flat\"\n            :style=\"oldFlat\"\n            @click=\"menu = false\"\n          >\n            Cancel\n          </v-btn>\n          <v-btn\n            text\n            class=\"v-btn--flat primary--text\"\n            @click=\"\n              $refs.menu.save(modelWrapper[modelKey]);\n              change();\n              input();\n            \"\n          >\n            OK\n          </v-btn>\n        </v-date-picker>\n      </v-menu>\n\n      <!-- Time picker -->\n      <v-menu\n        v-else-if=\"fullSchema.type === 'string' && fullSchema.format === 'time'\"\n        ref=\"menu\"\n        v-model=\"menu\"\n        :close-on-content-click=\"false\"\n        :nudge-right=\"40\"\n        :return-value.sync=\"modelWrapper[modelKey]\"\n        :disabled=\"disabled\"\n        transition=\"scale-transition\"\n        offset-y\n        full-width\n        min-width=\"290px\"\n      >\n        <template v-slot:activator=\"{ on }\">\n          <v-text-field\n            v-model=\"modelWrapper[modelKey]\"\n            :label=\"translateField(label)\"\n            :name=\"fullKey\"\n            :required=\"required\"\n            :rules=\"rules\"\n            :clearable=\"!required\"\n            :prepend-icon=\"options.icons.clock\"\n            readonly\n            v-on=\"on\"\n          >\n            <tooltip\n              slot=\"append-outer\"\n              :options=\"options\"\n              :html-description=\"htmlDescription\"\n            />\n          </v-text-field>\n        </template>\n        <v-time-picker v-model=\"modelWrapper[modelKey]\">\n          <v-spacer />\n          <v-btn\n            text\n            class=\"v-btn--flat\"\n            :style=\"oldFlat\"\n            @click=\"menu = false\"\n          >\n            Cancel\n          </v-btn>\n          <v-btn\n            text\n            class=\"v-btn--flat primary--text\"\n            @click=\"\n              $refs.menu.save(modelWrapper[modelKey]);\n              change();\n              input();\n            \"\n          >\n            OK\n          </v-btn>\n        </v-time-picker>\n      </v-menu>\n\n      <!-- Color picking -->\n      <template v-else-if=\"fullSchema.format === 'hexcolor'\">\n        <template v-if=\"fullSchema['x-display'] === 'color-picker'\">\n          <v-input\n            :name=\"fullKey\"\n            :label=\"translateField(label)\"\n            :required=\"required\"\n            :rules=\"rules\"\n            :disabled=\"disabled\"\n          >\n            <tooltip\n              slot=\"append\"\n              :options=\"options\"\n              :html-description=\"htmlDescription\"\n            />\n            &nbsp;&nbsp;\n            <v-menu\n              :close-on-content-click=\"false\"\n              :close-on-click=\"true\"\n              direction=\"bottom\"\n              offset-y\n            >\n              <template v-slot:activator=\"{ on }\">\n                <div\n                  :style=\"`background-color: ${modelWrapper[modelKey]};`\"\n                  :class=\"\n                    modelWrapper[modelKey]\n                      ? 'color-picker-trigger'\n                      : 'color-picker-trigger color-picker-trigger-empty'\n                  \"\n                  v-on=\"on\"\n                />\n              </template>\n              <color-picker\n                :value=\"modelWrapper[modelKey]\"\n                :preset-colors=\"options.colors.swatches\"\n                @input=\"\n                  val => {\n                    modelWrapper[modelKey] = val.hex;\n                    input();\n                    change();\n                  }\n                \"\n              />\n            </v-menu>\n          </v-input>\n        </template>\n        <v-input\n          v-else\n          :name=\"fullKey\"\n          :label=\"translateField(label)\"\n          :required=\"required\"\n          :rules=\"rules\"\n          :disabled=\"disabled\"\n        >\n          <tooltip\n            slot=\"append\"\n            :options=\"options\"\n            :html-description=\"htmlDescription\"\n          />\n          &nbsp;&nbsp;\n          <swatches\n            v-model=\"modelWrapper[modelKey]\"\n            :disabled=\"disabled\"\n            :colors=\"options.colors\"\n            :trigger-style=\"{ width: '36px', height: '36px' }\"\n            shapes=\"circles\"\n            @input=\"\n              input();\n              change();\n            \"\n          />\n        </v-input>\n      </template>\n\n      <!-- auto-complete field on an ajax response with query -->\n      <v-autocomplete\n        v-else-if=\"fullSchema.isAutocomplete === true\"\n        v-model=\"modelWrapper[modelKey]\"\n        :items=\"translatedItems\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :no-data-text=\"options.noDataMessage\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        :clearable=\"!required\"\n        @change=\"change\"\n        @input=\"input\"\n        item-text=\"text\"\n        item-value=\"value\"\n        autocomplete=\"off\"\n      >\n      </v-autocomplete>\n\n      <!-- Select field of objects based on an enum (array or not) -->\n      <template\n        v-else-if=\"\n          (fullSchema.type === 'array' &&\n            fullSchema.items.enum &&\n            fullSchema.items.type === 'object') ||\n            (fullSchema.enum && fullSchema.type === 'object')\n        \"\n      >\n        <v-select\n          v-model=\"modelWrapper[modelKey]\"\n          :items=\"selectItems\"\n          :name=\"fullKey\"\n          :label=\"translateField(label)\"\n          :item-text=\"translateListValues\"\n          :required=\"required\"\n          :rules=\"rules\"\n          :disabled=\"disabled\"\n          :clearable=\"!required\"\n          :multiple=\"fullSchema.type === 'array'\"\n          :item-value=\"itemKey\"\n          :return-object=\"true\"\n          @change=\"change\"\n          @input=\"input\"\n          autocomplete=\"off\"\n        >\n        </v-select>\n      </template>\n\n      <!-- Select field of simple types based on an enum (array or simple value) -->\n      <template\n        v-else-if=\"\n          (fullSchema.type === 'array' && fullSchema.items.enum) ||\n            fullSchema.enum\n        \"\n      >\n        <v-select\n          v-model=\"modelWrapper[modelKey]\"\n          :items=\"selectItems\"\n          :name=\"fullKey\"\n          :label=\"translateField(label)\"\n          :required=\"required\"\n          :rules=\"rules\"\n          :disabled=\"disabled\"\n          :clearable=\"!required\"\n          :multiple=\"fullSchema.type === 'array'\"\n          :item-text=\"translateListValues\"\n          @change=\"change\"\n          @input=\"input\"\n          autocomplete=\"off\"\n        >\n        </v-select>\n      </template>\n\n      <!-- Long text field in a textarea -->\n      <v-textarea\n        v-else-if=\"\n          fullSchema.type === 'string' &&\n            fullSchema.maxLength &&\n            fullSchema.maxLength > 1000 &&\n            fullSchema['x-display'] !== 'single-line'\n        \"\n        v-model=\"modelWrapper[modelKey]\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        filled\n        class=\"v-text-field--box v-text-field--enclosed\"\n        @change=\"change\"\n        @input=\"input\"\n      >\n        <tooltip\n          slot=\"append-outer\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-textarea>\n\n      <!-- text field displayed as password -->\n      <v-text-field\n        v-else-if=\"\n          fullSchema.type === 'string' && fullSchema['x-display'] === 'password'\n        \"\n        v-model=\"modelWrapper[modelKey]\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        type=\"password\"\n        @change=\"change\"\n        @input=\"input\"\n      >\n        <tooltip\n          slot=\"append-outer\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-text-field>\n\n      <!-- Simple text field -->\n      <v-text-field\n        autocomplete=\"off\"\n        v-else-if=\"\n          fullSchema.type === 'string' && fullSchema.key !== 'opening_hours'\n        \"\n        v-model=\"modelWrapper[modelKey]\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        @change=\"change\"\n        @input=\"input\"\n      >\n        <tooltip\n          slot=\"append-outer\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-text-field>\n\n      <!-- Opening Hours-->\n      <v-text-field\n        v-else-if=\"fullSchema.key === 'opening_hours'\"\n        v-model=\"modelWrapper[modelKey]\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        @change=\"change\"\n        @input=\"input\"\n        @click=\"openDialog('open_dialog')\"\n        prepend-icon=\"query_builder\"\n      >\n        <tooltip\n          slot=\"append-outer\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-text-field>\n      <!-- Number fields displayed in slider -->\n      <v-slider\n        v-else-if=\"\n          fullSchema['x-display'] === 'slider' &&\n            (fullSchema.type === 'number' || fullSchema.type === 'integer')\n        \"\n        v-model.number=\"modelWrapper[modelKey]\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :min=\"fullSchema.minimum\"\n        :max=\"fullSchema.maximum\"\n        :step=\"\n          fullSchema['x-step'] || (fullSchema.type === 'integer' ? 1 : 0.01)\n        \"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        thumb-label\n        @change=\"change\"\n        @input=\"input\"\n      >\n        <tooltip\n          slot=\"append\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-slider>\n      <!-- Simple number fields -->\n      <v-text-field\n        v-else-if=\"\n          fullSchema.type === 'number' || fullSchema.type === 'integer'\n        \"\n        v-model.number=\"modelWrapper[modelKey]\"\n        :name=\"fullKey\"\n        :label=\"translateField(label)\"\n        :min=\"fullSchema.minimum\"\n        :max=\"fullSchema.maximum\"\n        :step=\"\n          fullSchema['x-step'] || (fullSchema.type === 'integer' ? 1 : 0.01)\n        \"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        type=\"number\"\n        @change=\"change\"\n        @input=\"input\"\n        autocomplete=\"off\"\n      >\n        <tooltip\n          slot=\"append-outer\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-text-field>\n\n      <!-- Simple boolean field -->\n      <v-checkbox\n        v-else-if=\"fullSchema.type === 'boolean'\"\n        v-model=\"modelWrapper[modelKey]\"\n        :label=\"translateField(label)\"\n        :name=\"fullKey\"\n        :disabled=\"disabled\"\n        :required=\"required\"\n        :rules=\"rules\"\n        @change=\"change\"\n        @input=\"input\"\n      >\n        <tooltip\n          slot=\"append\"\n          :options=\"options\"\n          :html-description=\"htmlDescription\"\n        />\n      </v-checkbox>\n\n      <!-- Simple strings array -->\n      <template\n        v-else-if=\"\n          fullSchema.type === 'array' && fullSchema.items.type === 'string'\n        \"\n      >\n        <v-combobox\n          v-model=\"modelWrapper[modelKey]\"\n          :name=\"fullKey\"\n          :label=\"translateField(label)\"\n          :required=\"required\"\n          :rules=\"rules\"\n          :disabled=\"disabled\"\n          chips\n          multiple\n          append-icon=\"\"\n          @change=\"change\"\n          @input=\"input\"\n        >\n          <tooltip\n            slot=\"append-outer\"\n            :options=\"options\"\n            :html-description=\"htmlDescription\"\n          />\n          <template slot=\"selection\" slot-scope=\"data\">\n            <!-- @input is for vuetify1 and @click:close is for vuetify 2 -->\n            <v-chip\n              close\n              @input=\"\n                modelWrapper[modelKey].splice(data.index, 1);\n                change();\n                input();\n              \"\n              @click:close=\"\n                modelWrapper[modelKey].splice(data.index, 1);\n                change();\n                input();\n              \"\n            >\n              {{ data.item }}\n            </v-chip>\n          </template>\n        </v-combobox>\n      </template>\n\n      <!-- Object sub container with properties that may include a select based on a oneOf and subparts base on a allOf -->\n      <div v-else-if=\"fullSchema.type === 'object'\">\n        <v-subheader\n          v-if=\"fullSchema.title\"\n          :style=\"foldable ? 'cursor:pointer;' : ''\"\n          class=\"mt-2\"\n          @click=\"folded = !folded\"\n        >\n          {{ fullSchema.title }}\n          &nbsp;\n          <v-icon v-if=\"foldable && folded\">\n            {{ options.icons.dropdown }}\n          </v-icon>\n          <v-icon v-if=\"foldable && !folded\">\n            {{ options.icons.dropup }}\n          </v-icon>\n        </v-subheader>\n\n        <v-slide-y-transition>\n          <v-layout v-show=\"!foldable || !folded\" row wrap class=\"ma-0\">\n            <p v-if=\"fullSchema.description\" v-html=\"htmlDescription\" />\n            <property\n              v-for=\"childProp in fullSchema.properties\"\n              :key=\"childProp.key\"\n              :schema=\"childProp\"\n              :model-wrapper=\"modelWrapper[modelKey]\"\n              :model-root=\"modelRoot\"\n              :model-key=\"childProp.key\"\n              :parent-key=\"fullKey + '.'\"\n              :required=\"\n                !!(\n                  fullSchema.required &&\n                  fullSchema.required.includes(childProp.key)\n                )\n              \"\n              :options=\"options\"\n              @error=\"e => $emit('error', e)\"\n              @change=\"e => $emit('change', e)\"\n              @input=\"e => $emit('input', e)\"\n            >\n              <!-- propagate slots to children, see https://gist.github.com/Loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n              <slot v-for=\"(_, name) in $slots\" :slot=\"name\" :name=\"name\" />\n              <template\n                v-for=\"(_, name) in $scopedSlots\"\n                :slot=\"name\"\n                slot-scope=\"slotData\"\n              >\n                <slot :name=\"name\" v-bind=\"slotData\" />\n              </template>\n            </property>\n          </v-layout>\n        </v-slide-y-transition>\n      </div>\n\n      <!-- Tuples array sub container -->\n      <div\n        v-else-if=\"\n          fullSchema.type === 'array' && Array.isArray(fullSchema.items)\n        \"\n      >\n        <v-subheader\n          v-if=\"fullSchema.title\"\n          :style=\"foldable ? 'cursor:pointer;' : ''\"\n          class=\"mt-2\"\n          @click=\"folded = !folded\"\n        >\n          {{ fullSchema.title }}\n          &nbsp;\n          <v-icon v-if=\"foldable && folded\">\n            {{ options.icons.dropdown }}\n          </v-icon>\n          <v-icon v-if=\"foldable && !folded\">\n            {{ options.icons.dropup }}\n          </v-icon>\n        </v-subheader>\n        <v-slide-y-transition>\n          <div v-show=\"!foldable || !folded\">\n            <p v-if=\"fullSchema.description\" v-html=\"htmlDescription\" />\n            <property\n              v-for=\"(child, i) in fullSchema.items\"\n              :key=\"i\"\n              :schema=\"child\"\n              :model-wrapper=\"modelWrapper[modelKey]\"\n              :model-root=\"modelRoot\"\n              :model-key=\"i\"\n              :parent-key=\"fullKey + '.'\"\n              :options=\"options\"\n              @error=\"e => $emit('error', e)\"\n              @change=\"e => $emit('change', e)\"\n              @input=\"e => $emit('input', e)\"\n            >\n              <!-- propagate slots to children, see https://gist.github.com/Loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n              <slot v-for=\"(_, name) in $slots\" :slot=\"name\" :name=\"name\" />\n              <template\n                v-for=\"(_, name) in $scopedSlots\"\n                :slot=\"name\"\n                slot-scope=\"slotData\"\n              >\n                <slot :name=\"name\" v-bind=\"slotData\" />\n              </template>\n            </property>\n          </div>\n        </v-slide-y-transition>\n      </div>\n\n      <!-- Dynamic size array of complex types sub container -->\n      <div v-else-if=\"fullSchema.type === 'array'\">\n        <v-layout row class=\"mt-2 mb-1 pr-1\">\n          <v-subheader>{{ label }}</v-subheader>\n          <v-btn\n            v-if=\"!disabled && !(fromUrl || fullSchema.fromData)\"\n            fab\n            small\n            color=\"primary\"\n            @click=\"\n              modelWrapper[modelKey].push(\n                fullSchema.items.default || defaultValue(fullSchema.items)\n              );\n              change();\n              input();\n            \"\n          >\n            <v-icon>{{ options.icons.add }}</v-icon>\n          </v-btn>\n          <v-spacer />\n          <tooltip :options=\"options\" :html-description=\"htmlDescription\" />\n        </v-layout>\n\n        <v-container\n          v-if=\"modelWrapper[modelKey] && modelWrapper[modelKey].length\"\n          grid-list-md\n          class=\"pt-0 px-2\"\n        >\n          <v-layout row wrap class=\"ma-0\">\n            <draggable\n              v-model=\"modelWrapper[modelKey]\"\n              handle=\".handle\"\n              style=\"width: 100%;\"\n            >\n              <v-flex\n                v-for=\"(itemModel, i) in modelWrapper[modelKey]\"\n                :key=\"i\"\n                xs12\n              >\n                <v-card class=\"array-card\">\n                  <v-card-title primary-title class=\"pa-0\">\n                    <v-btn\n                      v-if=\"!disabled && fullSchema['x-sortable'] !== false\"\n                      icon\n                      class=\"handle\"\n                    >\n                      <v-icon>{{ options.icons.reorder }}</v-icon>\n                    </v-btn>\n                    <span v-if=\"itemTitle && modelWrapper[modelKey][i]\">{{\n                      modelWrapper[modelKey][i][itemTitle]\n                    }}</span>\n                    <v-spacer />\n                    <v-btn\n                      v-if=\"!disabled && !(fromUrl || fullSchema.fromData)\"\n                      icon\n                      color=\"warning\"\n                      @click=\"\n                        modelWrapper[modelKey].splice(i, 1);\n                        change();\n                        input();\n                      \"\n                    >\n                      <v-icon>{{ options.icons.delete }}</v-icon>\n                    </v-btn>\n                  </v-card-title>\n                  <v-card-text>\n                    <property\n                      :schema=\"fullSchema.items\"\n                      :model-wrapper=\"modelWrapper[modelKey]\"\n                      :model-root=\"modelRoot\"\n                      :model-key=\"i\"\n                      :parent-key=\"`${fullKey}.`\"\n                      :options=\"options\"\n                      @error=\"e => $emit('error', e)\"\n                      @change=\"e => $emit('change', e)\"\n                      @input=\"e => $emit('input', e)\"\n                    >\n                      <!-- propagate slots to children, see https://gist.github.com/Loilo/73c55ed04917ecf5d682ec70a2a1b8e2 -->\n                      <slot\n                        v-for=\"(_, name) in $slots\"\n                        :slot=\"name\"\n                        :name=\"name\"\n                      />\n                      <template\n                        v-for=\"(_, name) in $scopedSlots\"\n                        :slot=\"name\"\n                        slot-scope=\"slotData\"\n                      >\n                        <slot :name=\"name\" v-bind=\"slotData\" />\n                      </template>\n                    </property>\n                  </v-card-text>\n                </v-card>\n              </v-flex>\n            </draggable>\n          </v-layout>\n        </v-container>\n      </div>\n\n      <p v-else-if=\"options.debug\">\n        Unsupported type \"{{ fullSchema.type }}\" - {{ fullSchema }}\n      </p>\n    </slot>\n    <slot\n      :name=\"`append-${slotName}`\"\n      :fullKey=\"fullKey\"\n      :fullSchema=\"fullSchema\"\n      :modelWrapper=\"modelWrapper\"\n      :modelKey=\"modelKey\"\n      :model=\"modelWrapper[modelKey]\"\n      :required=\"required\"\n      :disabled=\"disabled\"\n      :rule=\"rules\"\n      :htmlDescription=\"htmlDescription\"\n    />\n  </v-flex>\n</template>\n\n<script>\nimport Tooltip from \"./Tooltip.vue\";\nimport schemaUtils from \"../utils/schema\";\nimport selectUtils from \"../utils/select\";\n\nexport default {\n  name: \"Property\",\n  components: { Tooltip },\n  props: [\n    \"schema\",\n    \"modelWrapper\",\n    \"modelRoot\",\n    \"modelKey\",\n    \"parentKey\",\n    \"required\",\n    \"options\"\n  ],\n  data() {\n    return {\n      ready: false,\n      menu: false,\n      rawSelectItems: null,\n      selectItems: null,\n      q: \"\",\n      currentOneOf: null,\n      showCurrentOneOf: true,\n      fromUrlParams: {},\n      loading: false,\n      folded: true,\n      showColorPicker: false,\n      subModels: {}, // a container for objects from root oneOfs and allOfs\n      // maintain vuetify1 compatibility without triggering warning on flat attribute for vuetify 2\n      oldFlat: `\n        background-color: none !important;\n        border-color: none !important;\n        `\n    };\n  },\n  computed: {\n    fullSchema() {\n      return schemaUtils.prepareFullSchema(\n        this.schema,\n        this.modelWrapper,\n        this.modelKey\n      );\n    },\n    htmlDescription() {\n      return null;\n    },\n    fullKey() {\n      return (this.parentKey + this.modelKey).replace(\"root.\", \"\");\n    },\n    label() {\n      return (\n        this.fullSchema.title ||\n        (typeof this.modelKey === \"string\" ? this.modelKey : \"\")\n      );\n    },\n    rules() {\n      return schemaUtils.getRules(\n        this.fullSchema,\n        this.required,\n        this.options,\n        this.modelWrapper\n      );\n    },\n    fromUrl() {\n      return !!(\n        this.fullSchema[\"x-fromUrl\"] &&\n        this.fullSchema[\"x-fromUrl\"].indexOf(\"{q}\") === -1\n      );\n    },\n    fromUrlWithQuery() {\n      return !!(\n        this.fullSchema[\"x-fromUrl\"] &&\n        this.fullSchema[\"x-fromUrl\"].indexOf(\"{q}\") !== -1\n      );\n    },\n    fromUrlKeys() {\n      // Look for variable parts in the URL used to fetch data\n      return null;\n    },\n    itemKey() {\n      return this.fullSchema[\"x-itemKey\"] || \"key\";\n    },\n    itemTitle() {\n      return this.fullSchema[\"x-itemTitle\"] || \"title\";\n    },\n    itemIcon() {\n      return (\n        this.fullSchema[\"x-itemIcon\"] ||\n        (this.fullSchema[\"x-display\"] === \"icon\" ? this.itemKey : null)\n      );\n    },\n    disabled() {\n      return this.options.disableAll;\n    },\n    foldable() {\n      return (\n        this.options.autoFoldObjects && this.parentKey && this.fullSchema.title\n      );\n    },\n    oneOfConstProp() {\n      if (!this.fullSchema.oneOf) return;\n      const props = this.fullSchema.oneOf[0].properties;\n      const key = Object.keys(props).find(p => !!props[p].const);\n      if (!key) return;\n      return {\n        ...props[key],\n        key,\n        htmlDescription: \"\"\n      };\n    },\n    oneOfRequired() {\n      return !!(\n        this.oneOfConstProp &&\n        this.fullSchema &&\n        this.fullSchema.required &&\n        this.fullSchema.required.find(r => r === this.oneOfConstProp.key)\n      );\n    },\n    oneOfRules() {\n      const rules = [];\n      if (this.oneOfRequired)\n        rules.push(\n          val =>\n            (val !== undefined && val !== null && val !== \"\") ||\n            this.options.requiredMessage\n        );\n      return rules;\n    },\n    oneOfSelect() {\n      return schemaUtils.isOneOfSelect(this.fullSchema);\n    },\n    slotName() {\n      return this.fullSchema[\"x-display\"] &&\n        this.fullSchema[\"x-display\"].startsWith(\"custom-\")\n        ? this.fullSchema[\"x-display\"]\n        : this.fullKey;\n    },\n    propertyClass() {\n      const cleanKey = this.fullKey.replace(/\\./g, \"-\").replace(/[0-9]/g, \"\");\n      return `vjsf-property vjsf-property-${cleanKey} xs12 ${this.fullSchema[\n        \"x-class\"\n      ] || \"\"}`;\n    },\n    translatedItems() {\n      const translatedItems = [];\n      if (Array.isArray(this.selectItems) && this.selectItems.length > 0) {\n        this.selectItems.forEach(item => {\n          translatedItems.push({\n            value: item,\n            text: this.translateListValues(item)\n          });\n        });\n      }\n      return translatedItems;\n    }\n  },\n  watch: {\n    q() {\n      // This line prevents reloading the list just after selecting an item in an auto-complete\n      if (\n        this.modelWrapper[this.modelKey] &&\n        this.modelWrapper[this.modelKey][this.itemTitle] === this.q\n      )\n        return;\n      this.fetchSelectItems();\n    },\n    fullSchema: {\n      handler() {\n        if (\n          this.fullSchema &&\n          JSON.stringify(this.fullSchema) !== this.lastFullSchema\n        ) {\n          this.lastFullSchema = JSON.stringify(this.fullSchema);\n          this.initFromSchema();\n          this.cleanUpExtraProperties();\n          this.applySubModels();\n          this.ready = true;\n        }\n      },\n      immediate: true\n    },\n    currentOneOf() {\n      // use this boolean to force removing then re-creating the object property\n      // base on the currentOneOf sub schema. If we don't the component is reused and reactivity creates some difficult bugs.\n      this.showCurrentOneOf = false;\n      this.$nextTick(() => {\n        this.showCurrentOneOf = true;\n        if (!this.currentOneOf) this.$set(this.subModels, \"currentOneOf\", {});\n        this.cleanUpExtraProperties();\n      });\n    },\n    subModels: {\n      handler() {\n        this.cleanUpExtraProperties();\n        this.applySubModels();\n      },\n      deep: true\n    },\n    rawSelectItems: {\n      handler() {\n        this.updateSelectItems();\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    openDialog(e) {\n      this.$emit(\"input\", e);\n    },\n    translateField(field) {\n      const layerName = this.schema.layerName;\n      const canTranslate = this.$te(\n        `dynamicFields.attributes.${layerName}.${field}`\n      );\n      if (canTranslate) {\n        return this.$t(`dynamicFields.attributes.${layerName}.${field}`);\n      } else {\n        return field;\n      }\n    },\n    translateListValues(value) {\n      let layerName = this.schema.layerName;\n      let path = `dynamicFields.listValues.`;\n      if (layerName === \"poi\") {\n        layerName = \"pois\";\n        path = ``;\n      }\n      const canTranslate = this.$te(`${path}${layerName}.${value}`);\n      if (canTranslate) {\n        return this.$t(`${path}${layerName}.${value}`);\n      } else {\n        return value;\n      }\n    },\n    updateSelectItems() {\n      const selectItems = selectUtils.getSelectItems(\n        this.rawSelectItems,\n        this.fullSchema,\n        this.modelWrapper,\n        this.modelKey,\n        this.itemKey\n      );\n      if (this.fullSchema[\"x-display\"] === \"list\") {\n        selectUtils.fillList(\n          this.fullSchema,\n          this.modelWrapper,\n          this.modelKey,\n          selectItems,\n          this.itemKey\n        );\n      } else {\n        selectUtils.fillSelectItems(\n          this.fullSchema,\n          this.modelWrapper,\n          this.modelKey,\n          selectItems,\n          this.itemKey\n        );\n      }\n\n      // we check for actual differences in order to prevent infinite loops\n      if (JSON.stringify(selectItems) !== JSON.stringify(this.selectItems)) {\n        this.selectItems = selectItems;\n      }\n    },\n    change() {\n      this.updateSelectItems();\n      this.$emit(\"change\", {\n        key: this.fullKey.replace(/allOf-([0-9]+)\\./g, \"\"),\n        model: this.modelWrapper[this.modelKey]\n      });\n    },\n    input() {\n      this.$emit(\"input\", {\n        key: this.fullKey.replace(/allOf-([0-9]+)\\./g, \"\"),\n        model: this.modelWrapper[this.modelKey]\n      });\n    },\n    defaultValue(schema) {\n      if (\n        schema.type === \"object\" &&\n        !schema[\"x-fromUrl\"] &&\n        !schema[\"x-fromData\"] &&\n        !schema.enum\n      )\n        return {};\n      if (schema.type === \"array\") return [];\n      return null;\n    },\n    fetchSelectItems() {\n      if (!this.options.httpLib)\n        return this.$emit(\"error\", \"No http lib found to perform ajax request\");\n      let url = this.fullSchema[\"x-fromUrl\"].replace(\"{q}\", this.q || \"\");\n      for (const key of this.fromUrlKeys) {\n        // URL parameters are incomplete\n        if (this.fromUrlParams[key] === undefined) return;\n        else url = url.replace(`{${key}}`, this.fromUrlParams[key]);\n      }\n      this.loading = true;\n      this.options.httpLib\n        .get(url)\n        .then(res => {\n          const body = res.data || res.body;\n          const items = this.fullSchema[\"x-itemsProp\"]\n            ? body[this.fullSchema[\"x-itemsProp\"]]\n            : body;\n          if (!Array.isArray(items))\n            throw new Error(`Result of http fetch ${url} is not an array`);\n          this.rawSelectItems = items;\n          this.loading = false;\n        })\n        .catch(err => {\n          this.$emit(\"error\", err.message);\n          this.loading = false;\n        });\n    },\n    cleanUpExtraProperties() {\n      // cleanup extra properties\n      if (\n        this.fullSchema.type === \"object\" &&\n        this.fullSchema.properties &&\n        Object.keys(this.fullSchema.properties).length &&\n        this.modelWrapper[this.modelKey]\n      ) {\n        Object.keys(this.modelWrapper[this.modelKey]).forEach(key => {\n          if (!this.fullSchema.properties.find(p => p.key === key)) {\n            delete this.modelWrapper[this.modelKey][key];\n          }\n        });\n      }\n    },\n    applySubModels() {\n      Object.keys(this.subModels).forEach(subModel => {\n        Object.keys(this.subModels[subModel]).forEach(key => {\n          if (\n            this.modelWrapper[this.modelKey][key] !==\n            this.subModels[subModel][key]\n          ) {\n            this.$set(\n              this.modelWrapper[this.modelKey],\n              key,\n              this.subModels[subModel][key]\n            );\n          }\n        });\n      });\n    },\n    initFromSchema() {\n      let model = this.modelWrapper[this.modelKey];\n\n      // Manage default values\n      if (model === undefined) {\n        model = this.defaultValue(this.fullSchema);\n        if (this.fullSchema.default !== undefined)\n          model = JSON.parse(JSON.stringify(this.fullSchema.default));\n      }\n      // const always wins\n      if (this.fullSchema.const !== undefined) model = this.fullSchema.const;\n\n      // color pickers do not like null values\n      if (\n        this.fullSchema.type === \"string\" &&\n        this.fullSchema.format === \"hexcolor\"\n      )\n        model = model || \"\";\n\n      // Case of a select based on ajax query\n      if (this.fromUrl) this.fetchSelectItems();\n      // Case of select based on an enum\n      if (\n        (this.fullSchema.type === \"array\" && this.fullSchema.items.enum) ||\n        this.fullSchema.enum\n      ) {\n        this.rawSelectItems =\n          this.fullSchema.type === \"array\"\n            ? this.fullSchema.items.enum\n            : this.fullSchema.enum;\n      }\n      // Case of select based on a oneof on simple types\n      if (this.oneOfSelect) {\n        this.rawSelectItems = (this.fullSchema.type === \"array\"\n          ? this.fullSchema.items\n          : this.fullSchema\n        ).oneOf.map(item => ({\n          ...item,\n          [this.itemKey]: item.const || (item.enum && item.enum[0]),\n          [this.itemTitle]: item.title\n        }));\n      }\n      // Case of an auto-complete field already defined\n      if (\n        this.fromUrlWithQuery &&\n        model &&\n        model[this.itemTitle] !== undefined\n      ) {\n        this.q = model[this.itemTitle];\n      }\n      // Case of a select based on an array somewhere in the data\n      if (this.fullSchema[\"x-fromData\"]) {\n        this.$watch(\n          \"modelRoot.\" + this.fullSchema[\"x-fromData\"],\n          val => {\n            this.rawSelectItems = val;\n          },\n          { immediate: true }\n        );\n      }\n      // Watch the dynamic parts of the URL used to fill the select field\n      if (this.fromUrlKeys) {\n        this.fromUrlKeys.forEach(key => {\n          if (key.startsWith(\"context.\")) {\n            this.$watch(\n              \"options.\" + key,\n              val => {\n                this.fromUrlParams[key] = val;\n                this.fetchSelectItems();\n              },\n              { immediate: true }\n            );\n          } else {\n            this.$watch(\n              \"modelRoot.\" + key,\n              val => {\n                this.fromUrlParams[key] = val;\n                this.fetchSelectItems();\n              },\n              { immediate: true }\n            );\n          }\n        });\n      }\n\n      // Init subModels for allOf subschemas\n      if (this.fullSchema.type === \"object\" && this.fullSchema.allOf) {\n        this.fullSchema.allOf.forEach((allOf, i) => {\n          this.$set(\n            this.subModels,\n            \"allOf-\" + i,\n            JSON.parse(JSON.stringify(model))\n          );\n        });\n      }\n\n      // Case of a sub type selection based on a oneOf\n      this.currentOneOf = null;\n      if (\n        this.fullSchema.type === \"object\" &&\n        this.fullSchema.oneOf &&\n        !this.currentOneOf &&\n        this.oneOfConstProp\n      ) {\n        if (model && model[this.oneOfConstProp.key]) {\n          this.currentOneOf = this.fullSchema.oneOf.find(\n            item =>\n              item.properties[this.oneOfConstProp.key].const ===\n              model[this.oneOfConstProp.key]\n          );\n        } else if (this.fullSchema.default) {\n          this.currentOneOf = this.fullSchema.oneOf.find(\n            item =>\n              item.properties[this.oneOfConstProp.key].const ===\n              this.fullSchema.default[this.oneOfConstProp.key]\n          );\n        }\n      }\n\n      // Init subModel for current oneOf\n      if (this.currentOneOf) {\n        this.$set(\n          this.subModels,\n          \"currentOneOf\",\n          JSON.parse(JSON.stringify(model))\n        );\n      } else {\n        this.$set(this.subModels, \"currentOneOf\", {});\n      }\n\n      // Cleanup arrays of empty items\n      if (this.fullSchema.type === \"array\") {\n        model = model.filter(item => ![undefined, null].includes(item));\n      }\n\n      this.$set(this.modelWrapper, this.modelKey, model);\n    }\n  }\n};\n</script>\n\n<style lang=\"css\">\n.vjsf-property .array-card .v-card__text {\n  padding: 6px 16px 0 16px;\n}\n.vjsf-property .array-card .v-card__actions {\n  padding: 0 16px 6px 16px;\n}\n\n.vjsf-property .v-input--selection-controls {\n  margin-top: 0;\n}\n\n.vjsf-tooltip p:last-child {\n  margin-bottom: 0;\n}\n\n.vjsf-property .color-picker-trigger {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  cursor: pointer;\n  display: inline-block;\n  border: 2px solid #ccc;\n}\n\n.vjsf-property .color-picker-trigger-empty {\n  background: linear-gradient(\n    to top right,\n    transparent 0,\n    transparent calc(50% - 2.4px),\n    #de080a 50%,\n    transparent calc(50% + 2.4px),\n    transparent\n  );\n}\n</style>\n"]}]}