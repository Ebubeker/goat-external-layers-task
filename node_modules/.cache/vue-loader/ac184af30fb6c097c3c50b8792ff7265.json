{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochronesDownload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochronesDownload.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { saveAs } from \"file-saver\";\nimport ApiService from \"../../services/api.service\";\n\nexport default {\n  props: {\n    calculation: { type: Object, required: false },\n    visible: { type: Boolean, required: true }\n  },\n  data: () => ({\n    name: \"isochrones-export\",\n    selected: \"GeoJson\",\n    items: [\"GeoJson\", \"Shapefile\", \"XLSX\"],\n    isDownloading: false\n  }),\n  methods: {\n    download() {\n      let me = this;\n      let exportName = me.name;\n      if (me.name.length === 0) {\n        exportName = \"export\";\n      }\n      this.isDownloading = true;\n      const isochrone_calculation_id =\n        me.calculation.data[0].isochrone_calculation_id;\n      ApiService.get_(\n        `/isochrones/export/${isochrone_calculation_id}?return_type=${me.selected}`,\n        { responseType: \"blob\" }\n      )\n        .then(response => {\n          saveAs(response.data, `${exportName}.zip`);\n        })\n        .finally(() => {\n          this.isDownloading = false;\n          me.show = false;\n        });\n    }\n  },\n  computed: {\n    ...mapGetters(\"isochrones\", { isochroneLayer: \"isochroneLayer\" }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      openapiConfig: \"openapiConfig\"\n    }),\n    show: {\n      get() {\n        return this.visible;\n      },\n      set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    }\n  },\n  created() {\n    this.items = this.openapiConfig.components.schemas.IsochroneExportType.enum;\n    this.selected = this.items[0];\n  }\n};\n",{"version":3,"sources":["IsochronesDownload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"IsochronesDownload.vue","sourceRoot":"src/components/isochrones","sourcesContent":["<template>\n  <v-dialog v-model=\"show\" scrollable max-width=\"350px\">\n    <v-card>\n      <v-app-bar :color=\"appColor.primary\" dark>\n        <v-app-bar-nav-icon\n          ><v-icon>fa-solid fa-download</v-icon></v-app-bar-nav-icon\n        >\n        <v-toolbar-title>{{ $t(\"isochrones.download.title\") }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-app-bar-nav-icon @click.stop=\"show = false\"\n          ><v-icon>close</v-icon></v-app-bar-nav-icon\n        >\n      </v-app-bar>\n      <vue-scroll>\n        <v-card-title primary-title>\n          <v-flex xs12>\n            <v-text-field\n              :label=\"$t(`isochrones.download.fileName`)\"\n              v-model=\"name\"\n              type=\"text\"\n            ></v-text-field>\n            <v-select\n              :items=\"items\"\n              v-model=\"selected\"\n              :label=\"$t(`isochrones.download.outputFormat`)\"\n            ></v-select>\n          </v-flex>\n        </v-card-title>\n      </vue-scroll>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn\n          class=\"white--text\"\n          @click=\"download()\"\n          :loading=\"isDownloading\"\n          :color=\"appColor.primary\"\n          ><v-icon left>fas fa-download</v-icon\n          >{{ $t(\"isochrones.download.download\") }}</v-btn\n        >\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport { saveAs } from \"file-saver\";\nimport ApiService from \"../../services/api.service\";\n\nexport default {\n  props: {\n    calculation: { type: Object, required: false },\n    visible: { type: Boolean, required: true }\n  },\n  data: () => ({\n    name: \"isochrones-export\",\n    selected: \"GeoJson\",\n    items: [\"GeoJson\", \"Shapefile\", \"XLSX\"],\n    isDownloading: false\n  }),\n  methods: {\n    download() {\n      let me = this;\n      let exportName = me.name;\n      if (me.name.length === 0) {\n        exportName = \"export\";\n      }\n      this.isDownloading = true;\n      const isochrone_calculation_id =\n        me.calculation.data[0].isochrone_calculation_id;\n      ApiService.get_(\n        `/isochrones/export/${isochrone_calculation_id}?return_type=${me.selected}`,\n        { responseType: \"blob\" }\n      )\n        .then(response => {\n          saveAs(response.data, `${exportName}.zip`);\n        })\n        .finally(() => {\n          this.isDownloading = false;\n          me.show = false;\n        });\n    }\n  },\n  computed: {\n    ...mapGetters(\"isochrones\", { isochroneLayer: \"isochroneLayer\" }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      openapiConfig: \"openapiConfig\"\n    }),\n    show: {\n      get() {\n        return this.visible;\n      },\n      set(value) {\n        if (!value) {\n          this.$emit(\"close\");\n        }\n      }\n    }\n  },\n  created() {\n    this.items = this.openapiConfig.components.schemas.IsochroneExportType.enum;\n    this.selected = this.items[0];\n  }\n};\n</script>\n"]}]}