{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/changeStyle/IconVectorStyle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/changeStyle/IconVectorStyle.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { debounce } from \"../../../utils/Helpers\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\n\nexport default {\n  props: [\"item\", \"ruleIndex\"],\n  mixins: [Legend],\n  data: () => ({\n    isExpanded: true,\n    tab: null,\n    dialogue: false,\n    iconSize: null,\n    urlIcon: null,\n    localIcon: null\n  }),\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    }),\n    style() {\n      return this.filterStylesOnActiveModeByLayerName(this.item.get(\"name\"))\n        .rules[this.ruleIndex];\n    }\n  },\n  created() {\n    this.dialogue = !this.dialogue;\n    this.iconSize = this.style.symbolizers[0].size;\n  },\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.dialogue = false;\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    },\n    updateLegendRow: debounce(function() {\n      this.item.set(\n        \"attributeDisplayStatusKey\",\n        this.item.get(\"attributeDisplayStatusKey\") + 1\n      );\n    }, 60),\n    resetStyle() {\n      /*\n        Function to reset the style of layer at attribute level\n      */\n\n      this.urlIcon = null;\n      this.localIcon = null;\n\n      //Get original style for layer attribute\n      let sourceStyle = this.vectorTileStylesCopy[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Get present stylefor layer attribute\n      let targetStyle = this.vectorTileStyles[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Assign original style to present style to reset\n      targetStyle.symbolizers[0].size = sourceStyle.symbolizers[0].size;\n      targetStyle.symbolizers[0].image = sourceStyle.symbolizers[0].image;\n      this.iconSize = sourceStyle.symbolizers[0].size;\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onIconSizeChange() {\n      //Change icon size on input change event\n      if (this.iconSize == 0) {\n        this.style.symbolizers[0].size = 0.001;\n      } else {\n        this.style.symbolizers[0].size = Number(this.iconSize);\n      }\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    localUpload(value) {\n      //Upload new icon from local\n      this.urlIcon = null;\n      if (value) {\n        const reader = new FileReader();\n        reader.readAsDataURL(value);\n        reader.onload = e => {\n          let icon = e.target.result;\n          this.style.symbolizers[0].image = icon;\n          this.item.getSource().changed();\n          this.updateLegendRow();\n        };\n      }\n    },\n    urlUpload(value) {\n      //Upload new icon from URL\n      if (value) {\n        this.style.symbolizers[0].image = value;\n        this.item.getSource().changed();\n        this.updateLegendRow();\n      }\n    }\n  }\n};\n",{"version":3,"sources":["IconVectorStyle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"IconVectorStyle.vue","sourceRoot":"src/components/layers/changeStyle","sourcesContent":["<template>\n  <vue-scroll>\n    <v-tabs grow v-model=\"tab\" style=\"width: 400px; margin:auto;\">\n      <v-tab :key=\"1\">\n        <v-badge>\n          <b>Change Icon Size</b>\n        </v-badge>\n      </v-tab>\n      <v-tab :key=\"2\">\n        <v-badge>\n          <b>Change Icon</b>\n        </v-badge>\n      </v-tab>\n    </v-tabs>\n    <v-tabs-items v-model=\"tab\">\n      <v-tab-item :key=\"1\">\n        <span\n          class=\"d-flex mb-6\"\n          style=\"width:400px;margin:10px auto 0px auto;\"\n        >\n          <v-text-field\n            type=\"number\"\n            :min=\"0\"\n            :step=\"0.1\"\n            outlined\n            tile\n            v-model=\"iconSize\"\n            label=\"Icon Size\"\n            style=\"height:50px;\"\n            @input=\"onIconSizeChange()\"\n          ></v-text-field>\n        </span>\n      </v-tab-item>\n      <v-tab-item :key=\"2\" style=\"padding-top:10px;\">\n        <v-file-input\n          append-outer-icon\n          outlined\n          tile\n          v-model=\"localIcon\"\n          label=\"Local Upload\"\n          @change=\"localUpload($event)\"\n          style=\"width:300px;margin-left:50px;\"\n        ></v-file-input>\n        <span class=\"d-flex mb-6\" style=\"width:350px;\">\n          <v-icon style=\"padding-left:53px;padding-bottom:30px;font-size:20px;\">\n            fas fa-link\n          </v-icon>\n          <v-text-field\n            outlined\n            tile\n            v-model=\"urlIcon\"\n            label=\"Url Upload\"\n            style=\"padding-left: 12px;\"\n            @input=\"urlUpload($event)\"\n          ></v-text-field>\n        </span>\n      </v-tab-item>\n    </v-tabs-items>\n    <v-btn\n      color=\"warning\"\n      dark\n      @click=\"resetStyle\"\n      style=\"width:100%;background-color: #2bb381 !important;\"\n    >\n      Reset Style\n    </v-btn>\n  </vue-scroll>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { debounce } from \"../../../utils/Helpers\";\nimport Legend from \"../../viewer/ol/controls/Legend\";\n\nexport default {\n  props: [\"item\", \"ruleIndex\"],\n  mixins: [Legend],\n  data: () => ({\n    isExpanded: true,\n    tab: null,\n    dialogue: false,\n    iconSize: null,\n    urlIcon: null,\n    localIcon: null\n  }),\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      vectorTileStyles: \"vectorTileStyles\",\n      vectorTileStylesCopy: \"vectorTileStylesCopy\"\n    }),\n    style() {\n      return this.filterStylesOnActiveModeByLayerName(this.item.get(\"name\"))\n        .rules[this.ruleIndex];\n    }\n  },\n  created() {\n    this.dialogue = !this.dialogue;\n    this.iconSize = this.style.symbolizers[0].size;\n  },\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.dialogue = false;\n      //Refresh the legend\n      this.item.set(\"layerTreeKey\", this.item.get(\"layerTreeKey\") + 1);\n    },\n    updateLegendRow: debounce(function() {\n      this.item.set(\n        \"attributeDisplayStatusKey\",\n        this.item.get(\"attributeDisplayStatusKey\") + 1\n      );\n    }, 60),\n    resetStyle() {\n      /*\n        Function to reset the style of layer at attribute level\n      */\n\n      this.urlIcon = null;\n      this.localIcon = null;\n\n      //Get original style for layer attribute\n      let sourceStyle = this.vectorTileStylesCopy[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Get present stylefor layer attribute\n      let targetStyle = this.vectorTileStyles[this.item.get(\"name\")].style\n        .rules[this.ruleIndex];\n\n      //Assign original style to present style to reset\n      targetStyle.symbolizers[0].size = sourceStyle.symbolizers[0].size;\n      targetStyle.symbolizers[0].image = sourceStyle.symbolizers[0].image;\n      this.iconSize = sourceStyle.symbolizers[0].size;\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    onIconSizeChange() {\n      //Change icon size on input change event\n      if (this.iconSize == 0) {\n        this.style.symbolizers[0].size = 0.001;\n      } else {\n        this.style.symbolizers[0].size = Number(this.iconSize);\n      }\n      this.item.getSource().changed();\n      this.updateLegendRow();\n    },\n    localUpload(value) {\n      //Upload new icon from local\n      this.urlIcon = null;\n      if (value) {\n        const reader = new FileReader();\n        reader.readAsDataURL(value);\n        reader.onload = e => {\n          let icon = e.target.result;\n          this.style.symbolizers[0].image = icon;\n          this.item.getSource().changed();\n          this.updateLegendRow();\n        };\n      }\n    },\n    urlUpload(value) {\n      //Upload new icon from URL\n      if (value) {\n        this.style.symbolizers[0].image = value;\n        this.item.getSource().changed();\n        this.updateLegendRow();\n      }\n    }\n  }\n};\n</script>\n<style>\n.v-dialog {\n  box-shadow: none;\n}\n</style>\n"]}]}