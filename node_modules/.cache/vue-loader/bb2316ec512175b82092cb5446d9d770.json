{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js??ref--19-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/other/dynamicForms/components/Property.vue?vue&type=template&id=4ef2c19e&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/other/dynamicForms/components/Property.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1657636583285},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.fullSchema &&\n    _vm.fullSchema.const === undefined &&\n    _vm.fullSchema[\"x-display\"] !== \"hidden\"\n    ? _c(\n        \"v-flex\",\n        { class: _vm.propertyClass, style: _vm.fullSchema[\"x-style\"] || \"\" },\n        [\n          _vm._t(\"prepend-\" + _vm.slotName, null, {\n            fullKey: _vm.fullKey,\n            fullSchema: _vm.fullSchema,\n            modelWrapper: _vm.modelWrapper,\n            modelKey: _vm.modelKey,\n            model: _vm.modelWrapper[_vm.modelKey],\n            required: _vm.required,\n            disabled: _vm.disabled,\n            rule: _vm.rules,\n            htmlDescription: _vm.htmlDescription\n          }),\n          _vm._t(\n            _vm.slotName,\n            [\n              _vm.fullSchema.type === \"string\" &&\n              [\"date\", \"date-time\"].includes(_vm.fullSchema.format)\n                ? _c(\n                    \"v-menu\",\n                    {\n                      ref: \"menu\",\n                      attrs: {\n                        \"close-on-content-click\": false,\n                        \"nudge-right\": 40,\n                        \"return-value\": _vm.modelWrapper[_vm.modelKey],\n                        disabled: _vm.disabled,\n                        transition: \"scale-transition\",\n                        \"offset-y\": \"\",\n                        \"full-width\": \"\",\n                        \"min-width\": \"290px\"\n                      },\n                      on: {\n                        \"update:returnValue\": function($event) {\n                          return _vm.$set(\n                            _vm.modelWrapper,\n                            _vm.modelKey,\n                            $event\n                          )\n                        },\n                        \"update:return-value\": function($event) {\n                          return _vm.$set(\n                            _vm.modelWrapper,\n                            _vm.modelKey,\n                            $event\n                          )\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"activator\",\n                            fn: function(ref) {\n                              var on = ref.on\n                              return [\n                                _c(\n                                  \"v-text-field\",\n                                  _vm._g(\n                                    {\n                                      attrs: {\n                                        label: _vm.translateField(_vm.label),\n                                        name: _vm.fullKey,\n                                        required: _vm.required,\n                                        rules: _vm.rules,\n                                        clearable: !_vm.required,\n                                        \"prepend-icon\":\n                                          _vm.options.icons.calendar\n                                      },\n                                      model: {\n                                        value: _vm.modelWrapper[_vm.modelKey],\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.modelWrapper,\n                                            _vm.modelKey,\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"modelWrapper[modelKey]\"\n                                      }\n                                    },\n                                    on\n                                  ),\n                                  [\n                                    _c(\"tooltip\", {\n                                      attrs: {\n                                        slot: \"append-outer\",\n                                        options: _vm.options,\n                                        \"html-description\": _vm.htmlDescription\n                                      },\n                                      slot: \"append-outer\"\n                                    })\n                                  ],\n                                  1\n                                )\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        false,\n                        681697062\n                      ),\n                      model: {\n                        value: _vm.menu,\n                        callback: function($$v) {\n                          _vm.menu = $$v\n                        },\n                        expression: \"menu\"\n                      }\n                    },\n                    [\n                      _c(\n                        \"v-date-picker\",\n                        {\n                          attrs: {\n                            scrollable: \"\",\n                            landscape: \"\",\n                            locale: _vm.options.locale\n                          },\n                          model: {\n                            value: _vm.modelWrapper[_vm.modelKey],\n                            callback: function($$v) {\n                              _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                            },\n                            expression: \"modelWrapper[modelKey]\"\n                          }\n                        },\n                        [\n                          _c(\"v-spacer\"),\n                          _c(\n                            \"v-btn\",\n                            {\n                              staticClass: \"v-btn--flat\",\n                              style: _vm.oldFlat,\n                              attrs: { text: \"\" },\n                              on: {\n                                click: function($event) {\n                                  _vm.menu = false\n                                }\n                              }\n                            },\n                            [_vm._v(\"\\n          Cancel\\n        \")]\n                          ),\n                          _c(\n                            \"v-btn\",\n                            {\n                              staticClass: \"v-btn--flat primary--text\",\n                              attrs: { text: \"\" },\n                              on: {\n                                click: function($event) {\n                                  _vm.$refs.menu.save(\n                                    _vm.modelWrapper[_vm.modelKey]\n                                  )\n                                  _vm.change()\n                                  _vm.input()\n                                }\n                              }\n                            },\n                            [_vm._v(\"\\n          OK\\n        \")]\n                          )\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"string\" &&\n                  _vm.fullSchema.format === \"time\"\n                ? _c(\n                    \"v-menu\",\n                    {\n                      ref: \"menu\",\n                      attrs: {\n                        \"close-on-content-click\": false,\n                        \"nudge-right\": 40,\n                        \"return-value\": _vm.modelWrapper[_vm.modelKey],\n                        disabled: _vm.disabled,\n                        transition: \"scale-transition\",\n                        \"offset-y\": \"\",\n                        \"full-width\": \"\",\n                        \"min-width\": \"290px\"\n                      },\n                      on: {\n                        \"update:returnValue\": function($event) {\n                          return _vm.$set(\n                            _vm.modelWrapper,\n                            _vm.modelKey,\n                            $event\n                          )\n                        },\n                        \"update:return-value\": function($event) {\n                          return _vm.$set(\n                            _vm.modelWrapper,\n                            _vm.modelKey,\n                            $event\n                          )\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"activator\",\n                            fn: function(ref) {\n                              var on = ref.on\n                              return [\n                                _c(\n                                  \"v-text-field\",\n                                  _vm._g(\n                                    {\n                                      attrs: {\n                                        label: _vm.translateField(_vm.label),\n                                        name: _vm.fullKey,\n                                        required: _vm.required,\n                                        rules: _vm.rules,\n                                        clearable: !_vm.required,\n                                        \"prepend-icon\": _vm.options.icons.clock,\n                                        readonly: \"\"\n                                      },\n                                      model: {\n                                        value: _vm.modelWrapper[_vm.modelKey],\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.modelWrapper,\n                                            _vm.modelKey,\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"modelWrapper[modelKey]\"\n                                      }\n                                    },\n                                    on\n                                  ),\n                                  [\n                                    _c(\"tooltip\", {\n                                      attrs: {\n                                        slot: \"append-outer\",\n                                        options: _vm.options,\n                                        \"html-description\": _vm.htmlDescription\n                                      },\n                                      slot: \"append-outer\"\n                                    })\n                                  ],\n                                  1\n                                )\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        false,\n                        2713352396\n                      ),\n                      model: {\n                        value: _vm.menu,\n                        callback: function($$v) {\n                          _vm.menu = $$v\n                        },\n                        expression: \"menu\"\n                      }\n                    },\n                    [\n                      _c(\n                        \"v-time-picker\",\n                        {\n                          model: {\n                            value: _vm.modelWrapper[_vm.modelKey],\n                            callback: function($$v) {\n                              _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                            },\n                            expression: \"modelWrapper[modelKey]\"\n                          }\n                        },\n                        [\n                          _c(\"v-spacer\"),\n                          _c(\n                            \"v-btn\",\n                            {\n                              staticClass: \"v-btn--flat\",\n                              style: _vm.oldFlat,\n                              attrs: { text: \"\" },\n                              on: {\n                                click: function($event) {\n                                  _vm.menu = false\n                                }\n                              }\n                            },\n                            [_vm._v(\"\\n          Cancel\\n        \")]\n                          ),\n                          _c(\n                            \"v-btn\",\n                            {\n                              staticClass: \"v-btn--flat primary--text\",\n                              attrs: { text: \"\" },\n                              on: {\n                                click: function($event) {\n                                  _vm.$refs.menu.save(\n                                    _vm.modelWrapper[_vm.modelKey]\n                                  )\n                                  _vm.change()\n                                  _vm.input()\n                                }\n                              }\n                            },\n                            [_vm._v(\"\\n          OK\\n        \")]\n                          )\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.format === \"hexcolor\"\n                ? [\n                    _vm.fullSchema[\"x-display\"] === \"color-picker\"\n                      ? [\n                          _c(\n                            \"v-input\",\n                            {\n                              attrs: {\n                                name: _vm.fullKey,\n                                label: _vm.translateField(_vm.label),\n                                required: _vm.required,\n                                rules: _vm.rules,\n                                disabled: _vm.disabled\n                              }\n                            },\n                            [\n                              _c(\"tooltip\", {\n                                attrs: {\n                                  slot: \"append\",\n                                  options: _vm.options,\n                                  \"html-description\": _vm.htmlDescription\n                                },\n                                slot: \"append\"\n                              }),\n                              _vm._v(\"\\n            \\n          \"),\n                              _c(\n                                \"v-menu\",\n                                {\n                                  attrs: {\n                                    \"close-on-content-click\": false,\n                                    \"close-on-click\": true,\n                                    direction: \"bottom\",\n                                    \"offset-y\": \"\"\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"activator\",\n                                        fn: function(ref) {\n                                          var on = ref.on\n                                          return [\n                                            _c(\n                                              \"div\",\n                                              _vm._g(\n                                                {\n                                                  class: _vm.modelWrapper[\n                                                    _vm.modelKey\n                                                  ]\n                                                    ? \"color-picker-trigger\"\n                                                    : \"color-picker-trigger color-picker-trigger-empty\",\n                                                  style:\n                                                    \"background-color: \" +\n                                                    _vm.modelWrapper[\n                                                      _vm.modelKey\n                                                    ] +\n                                                    \";\"\n                                                },\n                                                on\n                                              )\n                                            )\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    false,\n                                    1876225008\n                                  )\n                                },\n                                [\n                                  _c(\"color-picker\", {\n                                    attrs: {\n                                      value: _vm.modelWrapper[_vm.modelKey],\n                                      \"preset-colors\":\n                                        _vm.options.colors.swatches\n                                    },\n                                    on: {\n                                      input: function(val) {\n                                        _vm.modelWrapper[_vm.modelKey] = val.hex\n                                        _vm.input()\n                                        _vm.change()\n                                      }\n                                    }\n                                  })\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        ]\n                      : _c(\n                          \"v-input\",\n                          {\n                            attrs: {\n                              name: _vm.fullKey,\n                              label: _vm.translateField(_vm.label),\n                              required: _vm.required,\n                              rules: _vm.rules,\n                              disabled: _vm.disabled\n                            }\n                          },\n                          [\n                            _c(\"tooltip\", {\n                              attrs: {\n                                slot: \"append\",\n                                options: _vm.options,\n                                \"html-description\": _vm.htmlDescription\n                              },\n                              slot: \"append\"\n                            }),\n                            _vm._v(\"\\n          \\n        \"),\n                            _c(\"swatches\", {\n                              attrs: {\n                                disabled: _vm.disabled,\n                                colors: _vm.options.colors,\n                                \"trigger-style\": {\n                                  width: \"36px\",\n                                  height: \"36px\"\n                                },\n                                shapes: \"circles\"\n                              },\n                              on: {\n                                input: function($event) {\n                                  _vm.input()\n                                  _vm.change()\n                                }\n                              },\n                              model: {\n                                value: _vm.modelWrapper[_vm.modelKey],\n                                callback: function($$v) {\n                                  _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                                },\n                                expression: \"modelWrapper[modelKey]\"\n                              }\n                            })\n                          ],\n                          1\n                        )\n                  ]\n                : _vm.fullSchema.isAutocomplete === true\n                ? _c(\"v-autocomplete\", {\n                    attrs: {\n                      items: _vm.translatedItems,\n                      name: _vm.fullKey,\n                      label: _vm.translateField(_vm.label),\n                      \"no-data-text\": _vm.options.noDataMessage,\n                      disabled: _vm.disabled,\n                      required: _vm.required,\n                      rules: _vm.rules,\n                      clearable: !_vm.required,\n                      \"item-text\": \"text\",\n                      \"item-value\": \"value\",\n                      autocomplete: \"off\"\n                    },\n                    on: { change: _vm.change, input: _vm.input },\n                    model: {\n                      value: _vm.modelWrapper[_vm.modelKey],\n                      callback: function($$v) {\n                        _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                      },\n                      expression: \"modelWrapper[modelKey]\"\n                    }\n                  })\n                : (_vm.fullSchema.type === \"array\" &&\n                    _vm.fullSchema.items.enum &&\n                    _vm.fullSchema.items.type === \"object\") ||\n                  (_vm.fullSchema.enum && _vm.fullSchema.type === \"object\")\n                ? [\n                    _c(\"v-select\", {\n                      attrs: {\n                        items: _vm.selectItems,\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        \"item-text\": _vm.translateListValues,\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        disabled: _vm.disabled,\n                        clearable: !_vm.required,\n                        multiple: _vm.fullSchema.type === \"array\",\n                        \"item-value\": _vm.itemKey,\n                        \"return-object\": true,\n                        autocomplete: \"off\"\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    })\n                  ]\n                : (_vm.fullSchema.type === \"array\" &&\n                    _vm.fullSchema.items.enum) ||\n                  _vm.fullSchema.enum\n                ? [\n                    _c(\"v-select\", {\n                      attrs: {\n                        items: _vm.selectItems,\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        disabled: _vm.disabled,\n                        clearable: !_vm.required,\n                        multiple: _vm.fullSchema.type === \"array\",\n                        \"item-text\": _vm.translateListValues,\n                        autocomplete: \"off\"\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    })\n                  ]\n                : _vm.fullSchema.type === \"string\" &&\n                  _vm.fullSchema.maxLength &&\n                  _vm.fullSchema.maxLength > 1000 &&\n                  _vm.fullSchema[\"x-display\"] !== \"single-line\"\n                ? _c(\n                    \"v-textarea\",\n                    {\n                      staticClass: \"v-text-field--box v-text-field--enclosed\",\n                      attrs: {\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        filled: \"\"\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append-outer\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append-outer\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"string\" &&\n                  _vm.fullSchema[\"x-display\"] === \"password\"\n                ? _c(\n                    \"v-text-field\",\n                    {\n                      attrs: {\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        type: \"password\"\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append-outer\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append-outer\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"string\" &&\n                  _vm.fullSchema.key !== \"opening_hours\"\n                ? _c(\n                    \"v-text-field\",\n                    {\n                      attrs: {\n                        autocomplete: \"off\",\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append-outer\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append-outer\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.key === \"opening_hours\"\n                ? _c(\n                    \"v-text-field\",\n                    {\n                      attrs: {\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        \"prepend-icon\": \"query_builder\"\n                      },\n                      on: {\n                        change: _vm.change,\n                        input: _vm.input,\n                        click: function($event) {\n                          return _vm.openDialog(\"open_dialog\")\n                        }\n                      },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append-outer\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append-outer\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema[\"x-display\"] === \"slider\" &&\n                  (_vm.fullSchema.type === \"number\" ||\n                    _vm.fullSchema.type === \"integer\")\n                ? _c(\n                    \"v-slider\",\n                    {\n                      attrs: {\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        min: _vm.fullSchema.minimum,\n                        max: _vm.fullSchema.maximum,\n                        step:\n                          _vm.fullSchema[\"x-step\"] ||\n                          (_vm.fullSchema.type === \"integer\" ? 1 : 0.01),\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        \"thumb-label\": \"\"\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, _vm._n($$v))\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"number\" ||\n                  _vm.fullSchema.type === \"integer\"\n                ? _c(\n                    \"v-text-field\",\n                    {\n                      attrs: {\n                        name: _vm.fullKey,\n                        label: _vm.translateField(_vm.label),\n                        min: _vm.fullSchema.minimum,\n                        max: _vm.fullSchema.maximum,\n                        step:\n                          _vm.fullSchema[\"x-step\"] ||\n                          (_vm.fullSchema.type === \"integer\" ? 1 : 0.01),\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules,\n                        type: \"number\",\n                        autocomplete: \"off\"\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, _vm._n($$v))\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append-outer\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append-outer\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"boolean\"\n                ? _c(\n                    \"v-checkbox\",\n                    {\n                      attrs: {\n                        label: _vm.translateField(_vm.label),\n                        name: _vm.fullKey,\n                        disabled: _vm.disabled,\n                        required: _vm.required,\n                        rules: _vm.rules\n                      },\n                      on: { change: _vm.change, input: _vm.input },\n                      model: {\n                        value: _vm.modelWrapper[_vm.modelKey],\n                        callback: function($$v) {\n                          _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                        },\n                        expression: \"modelWrapper[modelKey]\"\n                      }\n                    },\n                    [\n                      _c(\"tooltip\", {\n                        attrs: {\n                          slot: \"append\",\n                          options: _vm.options,\n                          \"html-description\": _vm.htmlDescription\n                        },\n                        slot: \"append\"\n                      })\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"array\" &&\n                  _vm.fullSchema.items.type === \"string\"\n                ? [\n                    _c(\n                      \"v-combobox\",\n                      {\n                        attrs: {\n                          name: _vm.fullKey,\n                          label: _vm.translateField(_vm.label),\n                          required: _vm.required,\n                          rules: _vm.rules,\n                          disabled: _vm.disabled,\n                          chips: \"\",\n                          multiple: \"\",\n                          \"append-icon\": \"\"\n                        },\n                        on: { change: _vm.change, input: _vm.input },\n                        scopedSlots: _vm._u(\n                          [\n                            {\n                              key: \"selection\",\n                              fn: function(data) {\n                                return [\n                                  _c(\n                                    \"v-chip\",\n                                    {\n                                      attrs: { close: \"\" },\n                                      on: {\n                                        input: function($event) {\n                                          _vm.modelWrapper[_vm.modelKey].splice(\n                                            data.index,\n                                            1\n                                          )\n                                          _vm.change()\n                                          _vm.input()\n                                        },\n                                        \"click:close\": function($event) {\n                                          _vm.modelWrapper[_vm.modelKey].splice(\n                                            data.index,\n                                            1\n                                          )\n                                          _vm.change()\n                                          _vm.input()\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n            \" +\n                                          _vm._s(data.item) +\n                                          \"\\n          \"\n                                      )\n                                    ]\n                                  )\n                                ]\n                              }\n                            }\n                          ],\n                          null,\n                          false,\n                          3827761994\n                        ),\n                        model: {\n                          value: _vm.modelWrapper[_vm.modelKey],\n                          callback: function($$v) {\n                            _vm.$set(_vm.modelWrapper, _vm.modelKey, $$v)\n                          },\n                          expression: \"modelWrapper[modelKey]\"\n                        }\n                      },\n                      [\n                        _c(\"tooltip\", {\n                          attrs: {\n                            slot: \"append-outer\",\n                            options: _vm.options,\n                            \"html-description\": _vm.htmlDescription\n                          },\n                          slot: \"append-outer\"\n                        })\n                      ],\n                      1\n                    )\n                  ]\n                : _vm.fullSchema.type === \"object\"\n                ? _c(\n                    \"div\",\n                    [\n                      _vm.fullSchema.title\n                        ? _c(\n                            \"v-subheader\",\n                            {\n                              staticClass: \"mt-2\",\n                              style: _vm.foldable ? \"cursor:pointer;\" : \"\",\n                              on: {\n                                click: function($event) {\n                                  _vm.folded = !_vm.folded\n                                }\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n        \" +\n                                  _vm._s(_vm.fullSchema.title) +\n                                  \"\\n         \\n        \"\n                              ),\n                              _vm.foldable && _vm.folded\n                                ? _c(\"v-icon\", [\n                                    _vm._v(\n                                      \"\\n          \" +\n                                        _vm._s(_vm.options.icons.dropdown) +\n                                        \"\\n        \"\n                                    )\n                                  ])\n                                : _vm._e(),\n                              _vm.foldable && !_vm.folded\n                                ? _c(\"v-icon\", [\n                                    _vm._v(\n                                      \"\\n          \" +\n                                        _vm._s(_vm.options.icons.dropup) +\n                                        \"\\n        \"\n                                    )\n                                  ])\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        : _vm._e(),\n                      _c(\n                        \"v-slide-y-transition\",\n                        [\n                          _c(\n                            \"v-layout\",\n                            {\n                              directives: [\n                                {\n                                  name: \"show\",\n                                  rawName: \"v-show\",\n                                  value: !_vm.foldable || !_vm.folded,\n                                  expression: \"!foldable || !folded\"\n                                }\n                              ],\n                              staticClass: \"ma-0\",\n                              attrs: { row: \"\", wrap: \"\" }\n                            },\n                            [\n                              _vm.fullSchema.description\n                                ? _c(\"p\", {\n                                    domProps: {\n                                      innerHTML: _vm._s(_vm.htmlDescription)\n                                    }\n                                  })\n                                : _vm._e(),\n                              _vm._l(_vm.fullSchema.properties, function(\n                                childProp\n                              ) {\n                                return _c(\n                                  \"property\",\n                                  {\n                                    key: childProp.key,\n                                    attrs: {\n                                      schema: childProp,\n                                      \"model-wrapper\":\n                                        _vm.modelWrapper[_vm.modelKey],\n                                      \"model-root\": _vm.modelRoot,\n                                      \"model-key\": childProp.key,\n                                      \"parent-key\": _vm.fullKey + \".\",\n                                      required: !!(\n                                        _vm.fullSchema.required &&\n                                        _vm.fullSchema.required.includes(\n                                          childProp.key\n                                        )\n                                      ),\n                                      options: _vm.options\n                                    },\n                                    on: {\n                                      error: function(e) {\n                                        return _vm.$emit(\"error\", e)\n                                      },\n                                      change: function(e) {\n                                        return _vm.$emit(\"change\", e)\n                                      },\n                                      input: function(e) {\n                                        return _vm.$emit(\"input\", e)\n                                      }\n                                    },\n                                    scopedSlots: _vm._u(\n                                      [\n                                        _vm._l(_vm.$scopedSlots, function(\n                                          _,\n                                          name\n                                        ) {\n                                          return {\n                                            key: name,\n                                            fn: function(slotData) {\n                                              return [\n                                                _vm._t(\n                                                  name,\n                                                  null,\n                                                  null,\n                                                  slotData\n                                                )\n                                              ]\n                                            }\n                                          }\n                                        })\n                                      ],\n                                      null,\n                                      true\n                                    )\n                                  },\n                                  [\n                                    _vm._l(_vm.$slots, function(_, name) {\n                                      return _vm._t(name, null, { slot: name })\n                                    })\n                                  ],\n                                  2\n                                )\n                              })\n                            ],\n                            2\n                          )\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"array\" &&\n                  Array.isArray(_vm.fullSchema.items)\n                ? _c(\n                    \"div\",\n                    [\n                      _vm.fullSchema.title\n                        ? _c(\n                            \"v-subheader\",\n                            {\n                              staticClass: \"mt-2\",\n                              style: _vm.foldable ? \"cursor:pointer;\" : \"\",\n                              on: {\n                                click: function($event) {\n                                  _vm.folded = !_vm.folded\n                                }\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n        \" +\n                                  _vm._s(_vm.fullSchema.title) +\n                                  \"\\n         \\n        \"\n                              ),\n                              _vm.foldable && _vm.folded\n                                ? _c(\"v-icon\", [\n                                    _vm._v(\n                                      \"\\n          \" +\n                                        _vm._s(_vm.options.icons.dropdown) +\n                                        \"\\n        \"\n                                    )\n                                  ])\n                                : _vm._e(),\n                              _vm.foldable && !_vm.folded\n                                ? _c(\"v-icon\", [\n                                    _vm._v(\n                                      \"\\n          \" +\n                                        _vm._s(_vm.options.icons.dropup) +\n                                        \"\\n        \"\n                                    )\n                                  ])\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        : _vm._e(),\n                      _c(\"v-slide-y-transition\", [\n                        _c(\n                          \"div\",\n                          {\n                            directives: [\n                              {\n                                name: \"show\",\n                                rawName: \"v-show\",\n                                value: !_vm.foldable || !_vm.folded,\n                                expression: \"!foldable || !folded\"\n                              }\n                            ]\n                          },\n                          [\n                            _vm.fullSchema.description\n                              ? _c(\"p\", {\n                                  domProps: {\n                                    innerHTML: _vm._s(_vm.htmlDescription)\n                                  }\n                                })\n                              : _vm._e(),\n                            _vm._l(_vm.fullSchema.items, function(child, i) {\n                              return _c(\n                                \"property\",\n                                {\n                                  key: i,\n                                  attrs: {\n                                    schema: child,\n                                    \"model-wrapper\":\n                                      _vm.modelWrapper[_vm.modelKey],\n                                    \"model-root\": _vm.modelRoot,\n                                    \"model-key\": i,\n                                    \"parent-key\": _vm.fullKey + \".\",\n                                    options: _vm.options\n                                  },\n                                  on: {\n                                    error: function(e) {\n                                      return _vm.$emit(\"error\", e)\n                                    },\n                                    change: function(e) {\n                                      return _vm.$emit(\"change\", e)\n                                    },\n                                    input: function(e) {\n                                      return _vm.$emit(\"input\", e)\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      _vm._l(_vm.$scopedSlots, function(\n                                        _,\n                                        name\n                                      ) {\n                                        return {\n                                          key: name,\n                                          fn: function(slotData) {\n                                            return [\n                                              _vm._t(name, null, null, slotData)\n                                            ]\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                },\n                                [\n                                  _vm._l(_vm.$slots, function(_, name) {\n                                    return _vm._t(name, null, { slot: name })\n                                  })\n                                ],\n                                2\n                              )\n                            })\n                          ],\n                          2\n                        )\n                      ])\n                    ],\n                    1\n                  )\n                : _vm.fullSchema.type === \"array\"\n                ? _c(\n                    \"div\",\n                    [\n                      _c(\n                        \"v-layout\",\n                        { staticClass: \"mt-2 mb-1 pr-1\", attrs: { row: \"\" } },\n                        [\n                          _c(\"v-subheader\", [_vm._v(_vm._s(_vm.label))]),\n                          !_vm.disabled &&\n                          !(_vm.fromUrl || _vm.fullSchema.fromData)\n                            ? _c(\n                                \"v-btn\",\n                                {\n                                  attrs: {\n                                    fab: \"\",\n                                    small: \"\",\n                                    color: \"primary\"\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      _vm.modelWrapper[_vm.modelKey].push(\n                                        _vm.fullSchema.items.default ||\n                                          _vm.defaultValue(_vm.fullSchema.items)\n                                      )\n                                      _vm.change()\n                                      _vm.input()\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"v-icon\", [\n                                    _vm._v(_vm._s(_vm.options.icons.add))\n                                  ])\n                                ],\n                                1\n                              )\n                            : _vm._e(),\n                          _c(\"v-spacer\"),\n                          _c(\"tooltip\", {\n                            attrs: {\n                              options: _vm.options,\n                              \"html-description\": _vm.htmlDescription\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm.modelWrapper[_vm.modelKey] &&\n                      _vm.modelWrapper[_vm.modelKey].length\n                        ? _c(\n                            \"v-container\",\n                            {\n                              staticClass: \"pt-0 px-2\",\n                              attrs: { \"grid-list-md\": \"\" }\n                            },\n                            [\n                              _c(\n                                \"v-layout\",\n                                {\n                                  staticClass: \"ma-0\",\n                                  attrs: { row: \"\", wrap: \"\" }\n                                },\n                                [\n                                  _c(\n                                    \"draggable\",\n                                    {\n                                      staticStyle: { width: \"100%\" },\n                                      attrs: { handle: \".handle\" },\n                                      model: {\n                                        value: _vm.modelWrapper[_vm.modelKey],\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.modelWrapper,\n                                            _vm.modelKey,\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"modelWrapper[modelKey]\"\n                                      }\n                                    },\n                                    _vm._l(\n                                      _vm.modelWrapper[_vm.modelKey],\n                                      function(itemModel, i) {\n                                        return _c(\n                                          \"v-flex\",\n                                          { key: i, attrs: { xs12: \"\" } },\n                                          [\n                                            _c(\n                                              \"v-card\",\n                                              { staticClass: \"array-card\" },\n                                              [\n                                                _c(\n                                                  \"v-card-title\",\n                                                  {\n                                                    staticClass: \"pa-0\",\n                                                    attrs: {\n                                                      \"primary-title\": \"\"\n                                                    }\n                                                  },\n                                                  [\n                                                    !_vm.disabled &&\n                                                    _vm.fullSchema[\n                                                      \"x-sortable\"\n                                                    ] !== false\n                                                      ? _c(\n                                                          \"v-btn\",\n                                                          {\n                                                            staticClass:\n                                                              \"handle\",\n                                                            attrs: { icon: \"\" }\n                                                          },\n                                                          [\n                                                            _c(\"v-icon\", [\n                                                              _vm._v(\n                                                                _vm._s(\n                                                                  _vm.options\n                                                                    .icons\n                                                                    .reorder\n                                                                )\n                                                              )\n                                                            ])\n                                                          ],\n                                                          1\n                                                        )\n                                                      : _vm._e(),\n                                                    _vm.itemTitle &&\n                                                    _vm.modelWrapper[\n                                                      _vm.modelKey\n                                                    ][i]\n                                                      ? _c(\"span\", [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.modelWrapper[\n                                                                _vm.modelKey\n                                                              ][i][\n                                                                _vm.itemTitle\n                                                              ]\n                                                            )\n                                                          )\n                                                        ])\n                                                      : _vm._e(),\n                                                    _c(\"v-spacer\"),\n                                                    !_vm.disabled &&\n                                                    !(\n                                                      _vm.fromUrl ||\n                                                      _vm.fullSchema.fromData\n                                                    )\n                                                      ? _c(\n                                                          \"v-btn\",\n                                                          {\n                                                            attrs: {\n                                                              icon: \"\",\n                                                              color: \"warning\"\n                                                            },\n                                                            on: {\n                                                              click: function(\n                                                                $event\n                                                              ) {\n                                                                _vm.modelWrapper[\n                                                                  _vm.modelKey\n                                                                ].splice(i, 1)\n                                                                _vm.change()\n                                                                _vm.input()\n                                                              }\n                                                            }\n                                                          },\n                                                          [\n                                                            _c(\"v-icon\", [\n                                                              _vm._v(\n                                                                _vm._s(\n                                                                  _vm.options\n                                                                    .icons\n                                                                    .delete\n                                                                )\n                                                              )\n                                                            ])\n                                                          ],\n                                                          1\n                                                        )\n                                                      : _vm._e()\n                                                  ],\n                                                  1\n                                                ),\n                                                _c(\n                                                  \"v-card-text\",\n                                                  [\n                                                    _c(\n                                                      \"property\",\n                                                      {\n                                                        attrs: {\n                                                          schema:\n                                                            _vm.fullSchema\n                                                              .items,\n                                                          \"model-wrapper\":\n                                                            _vm.modelWrapper[\n                                                              _vm.modelKey\n                                                            ],\n                                                          \"model-root\":\n                                                            _vm.modelRoot,\n                                                          \"model-key\": i,\n                                                          \"parent-key\":\n                                                            _vm.fullKey + \".\",\n                                                          options: _vm.options\n                                                        },\n                                                        on: {\n                                                          error: function(e) {\n                                                            return _vm.$emit(\n                                                              \"error\",\n                                                              e\n                                                            )\n                                                          },\n                                                          change: function(e) {\n                                                            return _vm.$emit(\n                                                              \"change\",\n                                                              e\n                                                            )\n                                                          },\n                                                          input: function(e) {\n                                                            return _vm.$emit(\n                                                              \"input\",\n                                                              e\n                                                            )\n                                                          }\n                                                        },\n                                                        scopedSlots: _vm._u(\n                                                          [\n                                                            _vm._l(\n                                                              _vm.$scopedSlots,\n                                                              function(\n                                                                _,\n                                                                name\n                                                              ) {\n                                                                return {\n                                                                  key: name,\n                                                                  fn: function(\n                                                                    slotData\n                                                                  ) {\n                                                                    return [\n                                                                      _vm._t(\n                                                                        name,\n                                                                        null,\n                                                                        null,\n                                                                        slotData\n                                                                      )\n                                                                    ]\n                                                                  }\n                                                                }\n                                                              }\n                                                            )\n                                                          ],\n                                                          null,\n                                                          true\n                                                        )\n                                                      },\n                                                      [\n                                                        _vm._l(\n                                                          _vm.$slots,\n                                                          function(_, name) {\n                                                            return _vm._t(\n                                                              name,\n                                                              null,\n                                                              { slot: name }\n                                                            )\n                                                          }\n                                                        )\n                                                      ],\n                                                      2\n                                                    )\n                                                  ],\n                                                  1\n                                                )\n                                              ],\n                                              1\n                                            )\n                                          ],\n                                          1\n                                        )\n                                      }\n                                    ),\n                                    1\n                                  )\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        : _vm._e()\n                    ],\n                    1\n                  )\n                : _vm.options.debug\n                ? _c(\"p\", [\n                    _vm._v(\n                      '\\n      Unsupported type \"' +\n                        _vm._s(_vm.fullSchema.type) +\n                        '\" - ' +\n                        _vm._s(_vm.fullSchema) +\n                        \"\\n    \"\n                    )\n                  ])\n                : _vm._e()\n            ],\n            {\n              fullKey: _vm.fullKey,\n              fullSchema: _vm.fullSchema,\n              modelWrapper: _vm.modelWrapper,\n              modelKey: _vm.modelKey,\n              model: _vm.modelWrapper[_vm.modelKey],\n              required: _vm.required,\n              disabled: _vm.disabled,\n              rule: _vm.rules,\n              htmlDescription: _vm.htmlDescription\n            }\n          ),\n          _vm._t(\"append-\" + _vm.slotName, null, {\n            fullKey: _vm.fullKey,\n            fullSchema: _vm.fullSchema,\n            modelWrapper: _vm.modelWrapper,\n            modelKey: _vm.modelKey,\n            model: _vm.modelWrapper[_vm.modelKey],\n            required: _vm.required,\n            disabled: _vm.disabled,\n            rule: _vm.rules,\n            htmlDescription: _vm.htmlDescription\n          })\n        ],\n        2\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}