{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/Map.vue","mtime":1657784243494},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/css-loader/index.js","mtime":1657636580953},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657636583241},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/postcss-loader/src/index.js","mtime":1657636582109},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndiv.ol-attribution {\n  bottom: 4px;\n  border-radius: 40px;\n}\n\ndiv.ol-control {\n  padding: 0px;\n  border-radius: 40px;\n}\n\ndiv.ol-control button {\n  margin: 0px !important;\n}\n\n/* Hover tooltip */\n.wg-hover-tooltiptext {\n  width: 120px;\n  background-color: rgba(211, 211, 211, 0.9);\n  color: #222;\n  text-align: center;\n  padding: 5px;\n  border-radius: 6px;\n\n  /* Position the hover tooltip */\n  position: absolute;\n  z-index: 1;\n}\n\n.ol-attribution ul {\n  margin: 0;\n  padding: 0 0.5em;\n  font-size: 0.7rem;\n  line-height: 1.375em;\n  color: #000;\n  text-shadow: 0 0 2px #fff;\n}\n",{"version":3,"sources":["Map.vue"],"names":[],"mappingsfile":"Map.vue","sourceRoot":"src/components/viewer/ol","sourcesContent":["<template>\n  <div id=\"ol-map-container\">\n    <!-- Map Controls -->\n    <div style=\"position:absolute;left:20px;top:10px;\">\n      <search-map\n        :viewbox=\"\n          transformExtent(studyArea[0].get('bounds'), 'EPSG:3857', 'EPSG:4326')\n        \"\n        class=\"mb-2\"\n        :map=\"map\"\n        v-show=\"!miniViewOlMap\"\n        :color=\"appColor.primary\"\n      />\n      <full-screen\n        class=\"mb-2\"\n        v-show=\"!miniViewOlMap\"\n        :color=\"appColor.primary\"\n      />\n      <measure class=\"mb-2\" v-show=\"!miniViewOlMap\" :color=\"appColor.primary\" />\n      <!-- toggle-streetview -->\n      <v-tooltip right>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn\n            style=\"z-index: 1;\"\n            fab\n            dark\n            x-small\n            v-show=\"!miniViewOlMap\"\n            :color=\"appColor.primary\"\n            @click=\"showMiniViewer\"\n            :loading=\"isMapillaryBtnDisabled\"\n            v-on=\"on\"\n          >\n            <v-icon dark>streetview</v-icon>\n          </v-btn>\n        </template>\n        <span>{{ $t(`map.tooltips.toggleStreetView`) }}</span>\n      </v-tooltip>\n    </div>\n\n    <progress-status />\n    <background-switcher v-show=\"!miniViewOlMap\" />\n    <!-- Popup overlay  -->\n    <overlay-popup\n      :color=\"appColor.primary\"\n      :title=\"getPopupTitle()\"\n      v-show=\"popup.isVisible && miniViewOlMap === false\"\n      ref=\"popup\"\n    >\n      <v-btn icon>\n        <v-icon>close</v-icon>\n      </v-btn>\n      <template v-slot:close>\n        <template v-if=\"getInfoResult.length > 1\">\n          <span\n            >({{ popup.currentLayerIndex + 1 }} of\n            {{ getInfoResult.length }})</span\n          >\n          <v-icon\n            :disabled=\"popup.currentLayerIndex === 0\"\n            style=\"cursor:pointer;\"\n            @click=\"previousGetInfoLayer()\"\n            >chevron_left</v-icon\n          >\n          <v-icon\n            :disabled=\"popup.currentLayerIndex === getInfoResult.length - 1\"\n            style=\"cursor:pointer;\"\n            @click=\"nextGetInfoLayer()\"\n            >chevron_right</v-icon\n          >\n        </template>\n        <v-btn @click=\"closePopup()\" icon>\n          <v-icon>close</v-icon>\n        </v-btn>\n      </template>\n      <template v-slot:body>\n        <a\n          v-if=\"currentInfoFeature && currentInfoFeature.get('osm_id')\"\n          style=\"text-decoration:none;\"\n          :href=\"getOsmHrefLink()\"\n          target=\"_blank\"\n          title=\"\"\n        >\n          <i class=\"fa fa-edit\"></i> {{ $t(\"map.popup.editWithOsm\") }}</a\n        >\n\n        <div\n          style=\"max-height:800px;overflow:hidden;\"\n          v-if=\"getInfoResult[popup.currentLayerIndex]\"\n        >\n          <vue-scroll>\n            <v-simple-table\n              v-if=\"\n                getInfoResult[popup.currentLayerIndex].get('layerName') !==\n                  'footpath_visualization'\n              \"\n              dense\n              class=\"pr-2\"\n            >\n              <template v-slot:default>\n                <tbody>\n                  <tr v-for=\"item in currentInfo\" :key=\"item.property\">\n                    <td>{{ item.property }}</td>\n                    <td>{{ item.value }}</td>\n                  </tr>\n                </tbody>\n              </template>\n            </v-simple-table>\n            <div v-else>\n              <indicators-chart\n                class=\"mr-4\"\n                :feature=\"getInfoResult[popup.currentLayerIndex]\"\n              ></indicators-chart>\n            </div>\n          </vue-scroll>\n        </div>\n      </template>\n    </overlay-popup>\n    <!-- Info Snackbar for not visible layers. -->\n    <v-snackbar\n      :color=\"appColor.primary\"\n      top\n      :timeout=\"visibilityLayerSnackbar.timeout\"\n      v-model=\"visibilityLayerSnackbar.state\"\n    >\n      <v-icon color=\"white\" class=\"mr-3\">\n        info\n      </v-icon>\n      <span v-html=\"visibilityLayerSnackbar.message\"></span>\n      <v-btn text @click=\"visibilityLayerSnackbar.state = false\">\n        <v-icon>close</v-icon>\n      </v-btn>\n    </v-snackbar>\n\n    <!-- Info snackbar when editing a layer -->\n    <v-snackbar\n      :color=\"selectedEditLayer ? scenarioLayerEditModeColor : appColor.primary\"\n      v-if=\"activeScenario\"\n      :timeout=\"0\"\n      style=\"font-size:16px;\"\n      :value=\"activeScenario ? true : false\"\n    >\n      <v-select\n        :style=\"\n          selectedEditLayer\n            ? `border-right: 1px solid grey;width: 200px;`\n            : 'width: 150px;'\n        \"\n        dark\n        hide-details\n        :class=\"{\n          'mx-3 mt-0 pt-0': true,\n          'pr-4': !!selectedEditLayer\n        }\"\n        :items=\"calculationMode.values\"\n        v-model=\"calculationMode.active\"\n      >\n        <template slot=\"selection\" slot-scope=\"{ item }\">\n          {{\n            $te(`isochrones.options.${item}`)\n              ? $t(`isochrones.options.${item}`).toUpperCase()\n              : item.toUpperCase()\n          }}\n        </template>\n        <template slot=\"item\" slot-scope=\"{ item }\">\n          {{\n            $te(`isochrones.options.${item}`)\n              ? $t(`isochrones.options.${item}`).toUpperCase()\n              : item.toUpperCase()\n          }}\n        </template>\n      </v-select>\n      <span v-if=\"selectedEditLayer\" class=\"h2\"\n        >{{\n          $te(`map.snackbarMessages.scenarioEditMode`)\n            ? $t(`map.snackbarMessages.scenarioEditMode`).toUpperCase()\n            : \"EDIT MODE\"\n        }}\n      </span>\n      <v-btn\n        v-if=\"selectedEditLayer\"\n        color=\"error\"\n        text\n        @click=\"selectedEditLayer = null\"\n      >\n        {{ $te(`buttonLabels.exit`) ? $t(`buttonLabels.exit`) : \"Exit\" }}\n      </v-btn>\n    </v-snackbar>\n    <v-snackbar\n      :color=\"appColor.primary\"\n      v-if=\"isRecomputingHeatmap\"\n      :timeout=\"0\"\n      top\n      center\n      style=\"font-size:14px;\"\n      :value=\"isRecomputingHeatmap\"\n    >\n      <span\n        >{{\n          $te(`heatmap.recomputingHeatmaps`)\n            ? $t(`heatmap.recomputingHeatmaps`)\n            : \"Recomputing Heatmaps... \"\n        }}\n      </span>\n      <v-progress-circular indeterminate color=\"white\"></v-progress-circular>\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\n\n// ol imports\nimport Overlay from \"ol/Overlay\";\nimport Feature from \"ol/Feature\";\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport LineString from \"ol/geom/LineString\";\nimport { transformExtent } from \"ol/proj\";\n\n// style imports\nimport {\n  getInfoStyle,\n  studyAreaStyle,\n  poisAoisStyle\n} from \"../../../style/OlStyleDefs\";\n// import the app-wide EventBus\nimport { EventBus } from \"../../../EventBus\";\n\n// utils imports\nimport { LayerFactory } from \"../../../factory/layer.js\";\nimport { humanize, isCssColor } from \"../../../utils/Helpers\";\nimport { getAllChildLayers } from \"../../../utils/Layer\";\nimport { geojsonToFeature } from \"../../../utils/MapUtils\";\nimport axios from \"axios\";\n\n//Store imports\nimport { mapMutations, mapGetters } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\n\n//Map Controls\nimport OverlayPopup from \"./controls/Overlay\";\nimport MapLoadingProgressStatus from \"./controls/MapLoadingProgressStatus\";\nimport BackgroundSwitcher from \"./controls/BackgroundSwitcher\";\nimport FullScreen from \"./controls/Fullscreen\";\nimport Measure from \"./controls/Measure\";\nimport Search from \"./controls/Search.vue\";\nimport DoubleClickZoom from \"ol/interaction/DoubleClickZoom\";\n\nimport { defaults as defaultControls, Attribution } from \"ol/control\";\nimport { defaults as defaultInteractions } from \"ol/interaction\";\n\nimport { debounce } from \"../../../utils/Helpers\";\n// Context menu\nimport ContextMenu from \"ol-contextmenu/dist/ol-contextmenu\";\nimport \"ol-contextmenu/dist/ol-contextmenu.min.css\";\n\n// Indicators Chart\nimport IndicatorsChart from \"../../other/IndicatorsChart\";\nimport { GET_POIS_AOIS } from \"../../../store/actions.type\";\n\nexport default {\n  components: {\n    \"overlay-popup\": OverlayPopup,\n    \"progress-status\": MapLoadingProgressStatus,\n    \"background-switcher\": BackgroundSwitcher,\n    \"full-screen\": FullScreen,\n    \"indicators-chart\": IndicatorsChart,\n    \"search-map\": Search,\n    measure: Measure\n  },\n  name: \"app-ol-map\",\n  props: {\n    miniViewOlMap: { type: Boolean, required: true, default: false }\n  },\n  data() {\n    return {\n      queryableLayers: [],\n      activeInteractions: [],\n      popup: {\n        rawHtml: null,\n        title: \"info\",\n        isVisible: false,\n        currentLayerIndex: 0\n      },\n      getInfoResult: [],\n      limitedVisibilityLayers: [],\n      visibilityLayerSnackbar: {\n        state: false,\n        message: \"\",\n        timeout: 8000\n      }\n    };\n  },\n  mounted() {\n    var me = this;\n    // Make the OL map accessible for Mapable mixin even 'ol-map-mounted' has\n    // already been fired. Don not use directly in cmps, use Mapable instead.\n    Vue.prototype.$map = me.map;\n    // Send the event 'ol-map-mounted' with the OL map as payload\n    EventBus.$emit(\"ol-map-mounted\", me.map);\n    //Add map to the vuex store.\n    // resize the map, so it fits to parent\n    window.setTimeout(() => {\n      me.map.setTarget(document.getElementById(\"ol-map-container\"));\n      me.map.updateSize();\n      // adjust the bg color of the OL buttons (like zoom, rotate north, ...)\n      me.setOlButtonColor();\n      me.setupMapHover();\n      //Get Info\n      me.setupMapClick();\n      me.setupMapPointerMove();\n      me.createPopupOverlay();\n      EventBus.$on(\"toggleLayerVisiblity\", this.showNonVisibleLayersInfo);\n    }, 200);\n  },\n  created() {\n    var me = this;\n    // Make map rotateable according to property\n    const attribution = new Attribution({\n      collapsible: true,\n      collapsed: false\n    });\n\n    //Need to reference as we should deactive double click zoom when there\n    //are active interaction like draw/modify\n    this.dblClickZoomInteraction = new DoubleClickZoom();\n    me.map = new Map({\n      layers: [],\n      interactions: defaultInteractions({\n        doubleClickZoom: false,\n        mouseWheelZoom: true\n      }).extend([this.dblClickZoomInteraction]),\n      controls: defaultControls({\n        attribution: false,\n        zoom: false\n      }).extend([attribution]),\n      view: new View({\n        extent: me.studyArea[0].get(\"bounds\"),\n        center: me.appConfig.map.center || [0, 0],\n        zoom: me.appConfig.map.zoom,\n        minZoom: me.appConfig.map.minZoom,\n        maxZoom: me.appConfig.map.maxZoom || 19\n      })\n    });\n    // Get study area\n    me.createStudyAreaLayer();\n    // Create poisaoisLayer\n    me.createPoisAoisLayer();\n    // Create layers from config and add them to map\n    const layers = me.createLayers();\n    me.map.getLayers().extend(layers);\n    me.createGetInfoLayer();\n\n    // Setup context menu (right-click)\n    me.setupContentMenu();\n    // Event bus setup for managing interactions\n    EventBus.$on(\"ol-interaction-activated\", startedInteraction => {\n      me.activeInteractions.push(startedInteraction);\n    });\n    EventBus.$on(\"ol-interaction-stoped\", stopedInteraction => {\n      me.activeInteractions = Array.from(new Set(me.activeInteractions));\n      me.activeInteractions = me.activeInteractions.filter(interaction => {\n        return interaction !== stopedInteraction;\n      });\n    });\n  },\n\n  methods: {\n    /**\n     * Creates the OL layers due to the map \"layers\" array in app config.\n     * @return {ol.layer.Base[]} Array of OL layer instances\n     */\n    createLayers() {\n      let layers = [];\n      this.appConfig.layer_groups.forEach(group => {\n        const groupName = Object.keys(group)[0];\n        group[groupName].children.forEach(lConf => {\n          const layerName = Object.keys(lConf)[0];\n          lConf = lConf[layerName];\n          lConf.name = layerName;\n          if (lConf.type) {\n            try {\n              const olLayer = LayerFactory.getInstance({\n                group: groupName,\n                ...lConf\n              });\n              if (olLayer.get(\"name\") === \"sub_study_area\") {\n                this.subStudyAreaLayer = olLayer;\n              }\n              if (olLayer) {\n                if (\n                  ![Infinity, undefined, null].includes(\n                    olLayer.getMaxResolution()\n                  )\n                ) {\n                  this.limitedVisibilityLayers.push(olLayer);\n                }\n                layers.push(olLayer);\n              }\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        });\n      });\n      return layers;\n    },\n    /**\n     * Creates the study area layer.\n     */\n    createStudyAreaLayer() {\n      const source = new VectorSource({\n        wrapX: false\n      });\n      const vector = new VectorImageLayer({\n        name: \"study_area\",\n        displayInLayerList: true,\n        type: \"VECTOR\",\n        group: \"buildings_landuse\",\n        zIndex: 100,\n        source: source,\n        style: studyAreaStyle\n      });\n      this.getInfoLayerSource = source;\n      source.addFeature(this.studyArea[0]);\n      this.map.addLayer(vector);\n      this.map.getView().fit(source.getExtent());\n    },\n    /**\n     * Creates pois aois layer\n     */\n    createPoisAoisLayer() {\n      const vector = new VectorLayer({\n        name: \"pois_aois_layer\",\n        type: \"VECTOR\",\n        displayInLayerList: false,\n        queryable: true,\n        zIndex: 99,\n        source: new VectorSource(),\n        style: poisAoisStyle\n      });\n      this.map.addLayer(vector);\n      this.poisAoisLayer = vector;\n      this.$store.dispatch(`poisaois/${GET_POIS_AOIS}`);\n    },\n\n    /**\n     * Creates a layer to visualize selected GetInfo features.\n     */\n    createGetInfoLayer() {\n      const source = new VectorSource({\n        wrapX: false\n      });\n      const vector = new VectorLayer({\n        name: \"get_info\",\n        displayInLayerList: false,\n        zIndex: 100,\n        source: source,\n        style: getInfoStyle()\n      });\n      this.getInfoLayerSource = source;\n      this.map.addLayer(vector);\n    },\n\n    /**\n     * Map hover used for helper tooltips.\n     */\n    setupMapHover() {\n      const me = this;\n      const map = me.map;\n\n      //Adds map helptooltip overlay\n      let helptooltipOverlayEl = document.createElement(\"div\");\n      let helptooltipCurrentMessage = me.helpTooltip.currentMessage;\n      helptooltipOverlayEl.className = \"tooltip tooltip-help\";\n      let helptooltipOverlay = new Overlay({\n        element: helptooltipOverlayEl,\n        offset: [15, 15],\n        positioning: \"top-left\"\n      });\n      helptooltipOverlay.setPosition(undefined);\n      helptooltipOverlayEl.innerHTML = helptooltipCurrentMessage;\n      map.addOverlay(helptooltipOverlay);\n\n      //Init map hover event\n\n      map.on(\"pointermove\", function(event) {\n        //Check helptooltip status\n        if (me.helpTooltip.isActive) {\n          helptooltipOverlay.setPosition(event.coordinate);\n          if (me.helpTooltip.currentMessage !== helptooltipCurrentMessage) {\n            helptooltipOverlayEl.innerHTML = me.helpTooltip.currentMessage;\n            helptooltipCurrentMessage = me.helpTooltip.currentMessage;\n          }\n        } else {\n          if (helptooltipOverlay.getPosition() !== undefined) {\n            helptooltipOverlay.setPosition(undefined);\n          }\n        }\n      });\n      // Show snackbar info when layers aren't visible in the current resolution\n      map.getView().on(\"change:resolution\", this.showNonVisibleLayersInfo);\n    },\n\n    /**\n     * Sets the background color of the OL buttons to the color property.\n     */\n    setOlButtonColor() {\n      var me = this;\n\n      if (isCssColor(me.appColor.primary)) {\n        // directly apply the given CSS color\n        const rotateEl = document.querySelector(\".ol-rotate\");\n        if (rotateEl) {\n          rotateEl.className += \" elevation-5\";\n          rotateEl.borderRadius = \"40px\";\n          const rotateElStyle = document.querySelector(\n            \".ol-rotate .ol-rotate-reset\"\n          ).style;\n          rotateElStyle.backgroundColor = me.appColor.primary;\n          rotateElStyle.borderRadius = \"40px\";\n        }\n        const attrEl = document.querySelector(\".ol-attribution\");\n        if (attrEl) {\n          attrEl.className += \" elevation-5\";\n          const elStyle = document.querySelector(\n            \".ol-attribution button[type='button']\"\n          ).style;\n          elStyle.backgroundColor = me.appColor.primary;\n          elStyle.borderRadius = \"40px\";\n        }\n      } else {\n        // apply vuetify color by transforming the color to the corresponding\n        // CSS class (see https://vuetifyjs.com/en/framework/colors)\n        const [colorName, colorModifier] = me.appColor.primary\n          .toString()\n          .trim()\n          .split(\" \", 2);\n\n        if (document.querySelector(\".ol-rotate\")) {\n          document\n            .querySelector(\".ol-rotate .ol-rotate-reset\")\n            .classList.add(colorName);\n          document\n            .querySelector(\".ol-rotate .ol-rotate-reset\")\n            .classList.add(colorModifier);\n        }\n      }\n    },\n\n    /**\n     * Show popup for the get info module.\n     */\n    createPopupOverlay() {\n      const me = this;\n      me.popupOverlay = new Overlay({\n        element: me.$refs.popup.$el,\n        autoPan: false,\n        autoPanMargin: 40,\n        positioning: \"bottom-left\",\n        autoPanAnimation: {\n          duration: 250\n        }\n      });\n      me.map.addOverlay(me.popupOverlay);\n    },\n\n    /**\n     * Closes the popup if user click X button.\n     */\n    closePopup() {\n      const me = this;\n      if (me.popupOverlay) {\n        me.popupOverlay.setPosition(undefined);\n        me.popup.isVisible = false;\n      }\n      me.getInfoResult = [];\n      me.popup.currentLayerIndex = 0;\n      if (me.getInfoLayerSource) {\n        me.getInfoLayerSource.clear();\n      }\n    },\n\n    /**\n     * Show getInfo popup.\n     */\n    showPopup(coordinate) {\n      // Clear highligh feature\n      this.getInfoLayerSource.clear();\n      const infoFeature = this.getInfoResult[this.popup.currentLayerIndex];\n      let position = infoFeature.getGeometry()\n        ? infoFeature.getGeometry().getCoordinates()\n        : coordinate;\n      // Add highlight feature\n      this.getInfoLayerSource.addFeature(\n        this.getInfoResult[this.popup.currentLayerIndex]\n      );\n      while (position && Array.isArray(position[0])) {\n        position = position[0];\n      }\n      this.map.getView().animate({\n        center: position,\n        duration: 400\n      });\n      this.popupOverlay.setPosition(position);\n      this.popup.isVisible = true;\n      this.popup.title = `info`;\n    },\n\n    /**\n     * Map pointer move event .\n     */\n    setupMapPointerMove() {\n      this.mapPointerMoveListenerKey = this.map.on(\"pointermove\", evt => {\n        if (\n          evt.dragging ||\n          this.activeInteractions.length > 0 ||\n          !this.isochroneLayer\n        ) {\n          return;\n        }\n        const features = this.map.getFeaturesAtPixel(evt.pixel, {\n          layerFilter: candidate => {\n            if (\n              [\"isochrone_layer\", \"pois_aois_layer\"].includes(\n                candidate.get(\"name\")\n              )\n            ) {\n              return true;\n            }\n            return false;\n          }\n        });\n        const style = this.map.getTarget().style;\n        if (!style) return false;\n        if (features.length > 0) {\n          style.cursor = \"pointer\";\n        } else {\n          style.cursor = \"\";\n        }\n      });\n    },\n\n    /**\n     * Right click menu .\n     */\n    setupContentMenu() {\n      const contextMenu = new ContextMenu({\n        width: 170,\n        defaultItems: true // defaultItems are (for now) Zoom In/Zoom Out\n      });\n\n      // Rename default items\n      for (let item of contextMenu.getDefaultItems()) {\n        if (item.text === \"Zoom In\") {\n          item.text = this.$t(\"map.contextMenu.zoomIn\");\n          item.label = \"zoomIn\";\n        } else if (item.text === \"Zoom Out\") {\n          item.text = this.$t(\"map.contextMenu.zoomOut\");\n          item.label = \"zoomOut\";\n        }\n      }\n\n      this.setContextMenu(contextMenu);\n      this.map.addControl(contextMenu);\n\n      // Before open event\n      contextMenu.on(\"beforeopen\", () => {\n        let defaultItems = contextMenu.getDefaultItems();\n        defaultItems.forEach(defaultItem => {\n          defaultItem.text = this.$t(`map.contextMenu.${defaultItem.label}`);\n        });\n        contextMenu.clear();\n        contextMenu.extend(defaultItems);\n      });\n    },\n\n    /**\n     * Map click event for Module.\n     */\n    setupMapClick() {\n      const me = this;\n      const map = me.map;\n      me.mapClickListenerKey = map.on(\"click\", evt => {\n        me.closePopup();\n        if (me.activeInteractions.length > 0) {\n          return;\n        }\n\n        //Check for isochrone features\n        const isochroneFeatures = me.map.getFeaturesAtPixel(evt.pixel, {\n          layerFilter: candidate => {\n            if (candidate.get(\"name\") === \"isochrone_layer\") {\n              return true;\n            }\n            return false;\n          }\n        });\n        const otherFeatures = me.map.getFeaturesAtPixel(evt.pixel, {\n          layerFilter: candidate => {\n            if (candidate.get(\"name\") !== \"isochrone_layer\") {\n              return true;\n            }\n            return false;\n          }\n        });\n        if (isochroneFeatures.length > 0 && otherFeatures.length === 0) {\n          // Toggle thematic data for isochrone window\n          const isochroneFeature = isochroneFeatures[0];\n          EventBus.$emit(\n            \"show-isochrone-window\",\n            isochroneFeature.get(\"calculationNumber\")\n          );\n          return;\n        }\n\n        me.queryableLayers = getAllChildLayers(me.map).filter(\n          layer =>\n            layer.get(\"queryable\") === true && layer.getVisible() === true\n        );\n\n        //WMS Requests\n        let promiseArray = [];\n        me.queryableLayers.forEach(layer => {\n          const layerType = layer.get(\"type\");\n          switch (layerType) {\n            case \"WFS\":\n            case \"VECTOR\":\n            case \"MVT\":\n            case \"GEOBUF\":\n            case \"VECTORTILE\": {\n              let selectedFeatures = me.map.getFeaturesAtPixel(evt.pixel, {\n                hitTolerance: 4,\n                layerFilter: layerCandidate => {\n                  return layerCandidate.get(\"name\") === layer.get(\"name\");\n                }\n              });\n              if (selectedFeatures !== null && selectedFeatures.length > 0) {\n                //TODO: If there are more then 2 features selected get the closest one to coordinate rather than the first element\n                let clonedFeature;\n\n                if (!selectedFeatures[0].clone) {\n                  // !!! Workaround for vector tile features.\n                  const vtProps = {\n                    layerName: layer.get(\"name\"),\n                    osm_type: selectedFeatures[0].getType()\n                  };\n\n                  Object.assign(vtProps, selectedFeatures[0].getProperties());\n                  const flatCoordinates = selectedFeatures[0].getFlatCoordinates();\n                  if (flatCoordinates && flatCoordinates.length > 0) {\n                    const _coordinates = [];\n                    const _values = Object.values(flatCoordinates);\n                    for (let i = 0; i < _values.length; i += 2) {\n                      _coordinates.push(_values.slice(i, i + 2));\n                    }\n\n                    const geometry = new LineString(_coordinates, \"XY\");\n                    vtProps.geometry = geometry;\n                  }\n                  clonedFeature = new Feature(vtProps);\n                } else {\n                  clonedFeature = selectedFeatures[0].clone();\n                  clonedFeature.set(\"layerName\", layer.get(\"name\"));\n                }\n                me.getInfoResult.push(clonedFeature);\n              }\n              break;\n            }\n            default:\n              break;\n          }\n        });\n        if (promiseArray.length > 0) {\n          console.log(promiseArray);\n          axios.all(promiseArray).then(function(results) {\n            console.log(results);\n            results.forEach(response => {\n              if (response && response.data && response.data.features) {\n                const features = response.data.features;\n                const layerName = JSON.parse(response.config.data).layerName;\n                if (features && features.length === 0) {\n                  return;\n                }\n                const olFeatures = geojsonToFeature(response.data, {});\n\n                olFeatures[0].set(\"layerName\", layerName);\n                me.getInfoResult.push(olFeatures[0]);\n              }\n            });\n            if (me.getInfoResult.length > 0) {\n              me.showPopup(evt.coordinate);\n            }\n          });\n        } else {\n          //Only for WFS layer\n          if (me.getInfoResult.length > 0) {\n            me.showPopup(evt.coordinate);\n          }\n        }\n      });\n    },\n    previousGetInfoLayer() {\n      this.popup.currentLayerIndex -= 1;\n      this.showPopup();\n    },\n    nextGetInfoLayer() {\n      this.popup.currentLayerIndex += 1;\n      this.showPopup();\n    },\n\n    showNonVisibleLayersInfo: debounce(function() {\n      const currentResolution = this.map.getView().getResolution();\n      const notVisibleLayers = [];\n      this.limitedVisibilityLayers.forEach(layer => {\n        if (\n          layer.getMaxResolution() &&\n          layer.getMaxResolution() < currentResolution &&\n          layer.getVisible()\n        ) {\n          const layerName = this.$te(`map.layerName.${layer.get(\"name\")}`)\n            ? this.$t(`map.layerName.${layer.get(\"name\")}`)\n            : layerName;\n          notVisibleLayers.push(layerName);\n        }\n      });\n\n      if (notVisibleLayers.length > 0) {\n        this.visibilityLayerSnackbar = {\n          state: true,\n          message: `${this.$t(\n            `map.snackbarMessages.zoomInToShowFeatures`\n          )}: <b>${notVisibleLayers.toString()}</b>`,\n          timeout: 80000\n        };\n      } else {\n        this.visibilityLayerSnackbar = {\n          state: false,\n          message: ``,\n          timeout: 0\n        };\n      }\n    }, 200),\n    getOsmHrefLink() {\n      let link = ``;\n      if (this.currentInfoFeature && this.currentInfoFeature.get(\"osm_id\")) {\n        const feature = this.currentInfoFeature;\n\n        let type = feature.get(\"osm_type\");\n        if (!type && feature.get(\"orgin_geometry\")) {\n          const originGeometry =\n            feature.getProperties()[\"orgin_geometry\"] ||\n            feature\n              .getGeometry()\n              .getType()\n              .toLowerCase();\n          switch (originGeometry) {\n            case \"polygon\":\n            case \"multipolygon\":\n            case \"linestring\":\n              type = \"way\";\n              break;\n            case \"point\":\n              type = \"node\";\n              break;\n            default:\n              type = null;\n              break;\n          }\n        }\n        link =\n          `https://www.openstreetmap.org/edit?editor=id&` +\n          `${type}` +\n          `=${feature.get(\"osm_id\")}`;\n      }\n      return link;\n    },\n    getPopupTitle() {\n      if (this.getInfoResult[this.popup.currentLayerIndex]) {\n        const layer = this.getInfoResult[this.popup.currentLayerIndex];\n        const canTranslate = this.$te(\n          `map.layerName.${layer.get(\"layerName\")}`\n        );\n        if (canTranslate) {\n          return this.$t(`map.layerName.${layer.get(\"layerName\")}`);\n        } else {\n          return layer.get(\"layerName\");\n        }\n      } else {\n        return \"\";\n      }\n    },\n    transformExtent,\n    showMiniViewer() {\n      this.miniViewerVisible = true;\n      this.isMapillaryBtnDisabled = true;\n    },\n    ...mapMutations(\"map\", {\n      setContextMenu: \"SET_CONTEXTMENU\",\n      setLayer: \"SET_LAYER\",\n      toggleSnackbar: \"TOGGLE_SNACKBAR\"\n    }),\n    ...mapMutations(\"pois\", {\n      init: \"INIT\"\n    })\n  },\n  computed: {\n    ...mapFields(\"map\", {\n      subStudyAreaLayer: \"subStudyAreaLayer\",\n      selectedEditLayer: \"selectedEditLayer\",\n      isMapillaryBtnDisabled: \"isMapillaryBtnDisabled\",\n      miniViewerVisible: \"miniViewerVisible\"\n    }),\n    ...mapFields(\"poisaois\", {\n      poisAoisLayer: \"poisAoisLayer\",\n      selectedPoisAois: \"selectedPoisAois\",\n      poisAois: \"poisAois\"\n    }),\n\n    ...mapGetters(\"map\", {\n      studyArea: \"studyArea\",\n      helpTooltip: \"helpTooltip\",\n      currentMessage: \"currentMessage\",\n      layers: \"layers\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      appConfig: \"appConfig\",\n      scenarioLayerEditModeColor: \"scenarioLayerEditModeColor\",\n      isRecomputingHeatmap: \"isRecomputingHeatmap\",\n      calculationMode: \"calculationMode\"\n    }),\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\",\n      options: \"options\"\n    }),\n    ...mapGetters(\"scenarios\", {\n      activeScenario: \"activeScenario\"\n    }),\n    ...mapGetters(\"loader\", { isNetworkBusy: \"isNetworkBusy\" }),\n    currentInfo() {\n      const feature = this.getInfoResult[this.popup.currentLayerIndex];\n      if (!feature) return;\n      const props = feature.getProperties();\n      let transformed = [];\n      const excludedProperties = [\n        \"uid\",\n        \"id\",\n        \"geometry\",\n        \"geom\",\n        \"orgin_geometry\",\n        \"osm_id\",\n        \"gid\",\n        \"layerName\"\n      ];\n      Object.keys(props).forEach(k => {\n        if (!excludedProperties.includes(k) && !typeof k !== \"object\") {\n          transformed.push({\n            property: humanize(k),\n            value: !props[k] ? \"---\" : props[k]\n          });\n        }\n      });\n\n      return transformed;\n    },\n    currentInfoFeature() {\n      return this.getInfoResult[this.popup.currentLayerIndex];\n    }\n  },\n  watch: {\n    activeInteractions() {\n      if (!this.dblClickZoomInteraction) return;\n      if (this.activeInteractions.length > 0) {\n        this.dblClickZoomInteraction.setActive(false);\n      } else {\n        this.dblClickZoomInteraction.setActive(true);\n      }\n    },\n    appColor() {\n      this.setOlButtonColor();\n    },\n    // Edge case for pois layer style. We have to restructure the state of selected pois as a key value pair (category: state)\n    // in order to use it in the style (getters can't be accessed outside vue component).\n    // As the selectedPoisState is also changed from editing component\n    // this should be watched here as it might be that poisAoisTree component is not rendered yet.\n    selectedPoisAois(selected) {\n      const poisAois = {};\n      selected.forEach(item => {\n        poisAois[item.value] = true;\n      });\n      this.poisAois = poisAois;\n      this.poisAoisLayer.changed();\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\ndiv.ol-attribution {\n  bottom: 4px;\n  border-radius: 40px;\n}\n\ndiv.ol-control {\n  padding: 0px;\n  border-radius: 40px;\n}\n\ndiv.ol-control button {\n  margin: 0px !important;\n}\n\n/* Hover tooltip */\n.wg-hover-tooltiptext {\n  width: 120px;\n  background-color: rgba(211, 211, 211, 0.9);\n  color: #222;\n  text-align: center;\n  padding: 5px;\n  border-radius: 6px;\n\n  /* Position the hover tooltip */\n  position: absolute;\n  z-index: 1;\n}\n\n.ol-attribution ul {\n  margin: 0;\n  padding: 0 0.5em;\n  font-size: 0.7rem;\n  line-height: 1.375em;\n  color: #000;\n  text-shadow: 0 0 2px #fff;\n}\n</style>\n"]}]}