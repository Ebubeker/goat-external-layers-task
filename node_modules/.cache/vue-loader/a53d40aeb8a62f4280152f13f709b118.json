{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/mapillary/Mapillary.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/mapillary/Mapillary.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Viewer } from \"mapillary-js\";\n\n//Ol imports\nimport OlVectorLayer from \"ol/layer/Vector\";\nimport OlVectorSource from \"ol/source/Vector\";\nimport OlPoint from \"ol/geom/Point\";\nimport OlVectorTileLayer from \"ol/layer/VectorTile\";\nimport OlVectorTileSource from \"ol/source/VectorTile\";\nimport OlOverlay from \"ol/Overlay\";\nimport { createXYZ } from \"ol/tilegrid\";\nimport { fromLonLat } from \"ol/proj\";\nimport OlFeature from \"ol/Feature\";\nimport MVT from \"ol/format/MVT\";\nimport { unByKey } from \"ol/Observable\";\nimport { transformExtent } from \"ol/proj\";\n// import { toLonLat } from \"ol/proj\";\n// import axios from \"axios\";\n\n//Style and map object import\nimport { mapillaryStyleDefs } from \"../../../style/OlStyleDefs\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { mapFields } from \"vuex-map-fields\";\n\n// Image preview component import (enabled on hover)\nimport MapillaryImagePreview from \"./controls/MapillaryImagePreview\";\n\nimport \"mapillary-js/dist/mapillary.css\";\nimport { debounce } from \"../../../utils/Helpers\";\n\nexport default {\n  name: \"app-mapillary\",\n  components: {\n    \"mapillary-image-preview\": MapillaryImagePreview\n  },\n  props: {\n    accessToken: {\n      type: String,\n      required: false,\n      default: \"MLY|4945732362162775|a3872ee8a2b737be51db110cdcdea3d4\"\n    },\n    baseLayerExtent: {\n      type: Array,\n      required: false\n    }\n  },\n  data() {\n    return {\n      // Preview Image url\n      previewImageUrl: \"\",\n      // Mapillary viewer\n      mapillary: null,\n      // Features\n      highlightFeature: null,\n      pointFeature: null,\n      // Layers\n      movePointLayer: null,\n      baseOverlayerLayer: null,\n      hoverHighlightLayer: null,\n      // Listener keys\n      mapClickListenerKey: null,\n      mapHoverListenerKey: null,\n      // Overlays\n      imagePreviewOverlay: null\n    };\n  },\n  mixins: [Mapable],\n  mounted() {\n    const container = document.getElementById(\"mapillary-container\");\n    const mapCenter = this.map.getView().getCenter();\n    const searchBounds = [\n      mapCenter[0] - 1500,\n      mapCenter[1] - 1500,\n      mapCenter[0] + 1500,\n      mapCenter[1] + 1500\n    ];\n    const extent = transformExtent(searchBounds, \"EPSG:3857\", \"EPSG:4326\");\n    fetch(\n      `https://graph.mapillary.com/images?fields=id,sequence&bbox=${extent.toString()}&limit=1`,\n      {\n        headers: { Authorization: \"OAuth \" + this.accessToken }\n      }\n    )\n      .then(response => response.json())\n      .then(response => {\n        this.isMapillaryBtnDisabled = false;\n        if (Array.isArray(response.data) && response.data.length > 0) {\n          const startImageId = response.data[0].id;\n          mapillaryStyleDefs.activeSequence = response.data[0].sequence;\n          console.log(response.data[0]);\n          this.mapillary = new Viewer({\n            accessToken: this.accessToken,\n            container: container,\n            imageId: startImageId,\n            component: { cover: false }\n          });\n          this.isMapillaryBtnDisabled = false;\n          window.addEventListener(\"resize\", this.resize());\n          this.createBaseOverlayLayer();\n          this.mapillary.on(\"image\", this.mapillaryChanged);\n          this.createFeatureOverlay();\n          this.createImagePreviewOverlay();\n          this.createMovePointLayer();\n          this.createHoverHighlightLayer();\n          this.addInteractions();\n          this.mapClickListenerKey = this.map.on(\"click\", this.onClick);\n          this.$nextTick(() => {\n            this.resize();\n          });\n        }\n      })\n      .catch(() => {\n        this.isMapillaryBtnDisabled = false;\n      });\n  },\n  methods: {\n    /**\n     * Overlay style\n     */\n    createFeatureOverlay() {\n      this.featureOverlay = new OlVectorLayer({\n        source: new OlVectorSource(),\n        map: this.map,\n        style: [\n          mapillaryStyleDefs.wifiStyle,\n          mapillaryStyleDefs.circleSolidStyle\n        ]\n      });\n    },\n\n    /**\n     * Image preview overlay\n     */\n\n    /**\n     * Show popup for the get info module.\n     */\n    createImagePreviewOverlay() {\n      this.imagePreviewOverlay = new OlOverlay({\n        element: this.$refs.imagePreview.$el,\n        autoPan: false,\n        autoPanMargin: 40,\n        autoPanAnimation: {\n          duration: 250\n        }\n      });\n      this.map.addOverlay(this.imagePreviewOverlay);\n    },\n\n    /**\n     * Radar point layer\n     */\n    createMovePointLayer() {\n      this.pointFeature = new OlFeature({\n        geometry: null\n      });\n      this.pointFeature.setStyle([\n        mapillaryStyleDefs.wifiStyle,\n        mapillaryStyleDefs.circleSolidStyle\n      ]);\n      this.movePointLayer = new OlVectorLayer({\n        zIndex: 10,\n        source: new OlVectorSource({ features: [this.pointFeature] })\n      });\n      this.map.addLayer(this.movePointLayer);\n    },\n\n    /**\n     * Overlay layer (sequences, images)\n     */\n    createBaseOverlayLayer() {\n      this.baseOverlayerLayer = new OlVectorTileLayer({\n        name: \"mapillaryBaseOverlay\",\n        renderMode: \"image\",\n        source: new OlVectorTileSource({\n          attributions:\n            \"Â© <a href='https://www.mapillary.com/'> <img src='./static/layer-styles/assets/icons/_backgroundLayers/mapillary.svg' width='12px' height='12px'> Mapillary</a>\",\n          format: new MVT(),\n          tileGrid: createXYZ({ maxZoom: 14 }),\n          tilePixelRatio: 16,\n          opacity: 0.7,\n          url: `https://tiles.mapillary.com/maps/vtp/mly1_computed_public/2/{z}/{x}/{y}?access_token=${this.accessToken}`\n        }),\n        style: mapillaryStyleDefs.baseOverlayStyle(this.map)\n      });\n      if (this.baseLayerExtent) {\n        this.baseOverlayerLayer.setExtent(this.baseLayerExtent);\n      }\n      this.map.addLayer(this.baseOverlayerLayer);\n    },\n\n    /**\n     * Create hover highlight layers\n     */\n    createHoverHighlightLayer() {\n      this.hoverHighlightLayer = new OlVectorLayer({\n        zIndex: 20,\n        name: \"mapillaryHighlightLayer\",\n        source: new OlVectorSource(),\n        style: mapillaryStyleDefs.highlightStyle\n      });\n      this.map.addLayer(this.hoverHighlightLayer);\n    },\n\n    /**\n     * Overlay layer interactions\n     */\n    async addInteractions() {\n      this.mapHoverListenerKey = this.map.on(\n        \"pointermove\",\n        debounce(async evt => {\n          let features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"mapillaryBaseOverlay\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          features = features.filter(feature => {\n            return feature.get(\"layer\") === \"image\";\n          });\n          this.hoverHighlightLayer.getSource().clear();\n          if (features.length > 0 && features[0].get(\"id\")) {\n            this.imagePreviewOverlay.setPosition(\n              features[0].getFlatCoordinates()\n            );\n            const feature = new OlFeature({\n              geometry: new OlPoint(features[0].getFlatCoordinates())\n            });\n            feature.setProperties(features[0].getProperties());\n            this.hoverHighlightLayer.getSource().addFeature(feature);\n            this.map.getTarget().style.cursor = \"pointer\";\n            const imageRequestUrl = `https://graph.mapillary.com/${features[0].get(\n              \"id\"\n            )}?fields=id,captured_at,compass_angle,sequence,geometry,thumb_256_url`;\n            fetch(imageRequestUrl, {\n              headers: { Authorization: \"OAuth \" + this.accessToken }\n            })\n              .then(response => response.json())\n              .then(response => {\n                this.previewImageUrl = response.thumb_256_url;\n              });\n          } else {\n            this.previewImageUrl = \"\";\n            this.imagePreviewOverlay.setPosition(undefined);\n            this.map.getTarget().style.cursor = \"\";\n          }\n        }, 50)\n      );\n    },\n\n    /**\n     * Click event handler\n     */\n    onClick(evt) {\n      this.hoverHighlightLayer.getSource().clear();\n      const feature = this.map.forEachFeatureAtPixel(\n        evt.pixel,\n        function(feature) {\n          return feature;\n        },\n        {\n          layerFilter: layer => {\n            return layer === this.baseOverlayerLayer;\n          },\n          hitTolerance: 5\n        }\n      );\n\n      if (feature) {\n        if (feature.get(\"layer\") === \"sequence\") {\n          return;\n        }\n        var bearing = feature.get(\"compass_angle\");\n        this.mapillary.moveTo(feature.get(\"id\"));\n        this.featureOverlay.setStyle(\n          mapillaryStyleDefs.updateBearingStyle(bearing)\n        );\n        mapillaryStyleDefs.activeSequence = feature.get(\"sequence_id\");\n      } else {\n        return;\n      }\n      //Update layer\n      this.baseOverlayerLayer.changed();\n    },\n\n    /**\n     * Mapillary changed event handler\n     */\n    mapillaryChanged(evt) {\n      if (this.featureOverlay.getVisible()) {\n        this.featureOverlay.setVisible(false);\n      }\n      const image = evt.image;\n      const lonLat = new fromLonLat([image.lngLat.lng, image.lngLat.lat]);\n      this.map.getView().animate({\n        center: lonLat,\n        duration: 400\n      });\n      if (this.pointFeature.getGeometry() === null) {\n        this.pointFeature.setGeometry(new OlPoint(lonLat));\n      } else {\n        this.pointFeature.getGeometry().setCoordinates(lonLat);\n      }\n      this.pointFeature.setStyle(\n        mapillaryStyleDefs.updateBearingStyle(image.compassAngle)\n      );\n    },\n\n    /**\n     * Resize method\n     */\n    resize() {\n      this.mapillary.resize();\n    }\n  },\n  computed: {\n    ...mapFields(\"map\", {\n      isMapillaryBtnDisabled: \"isMapillaryBtnDisabled\",\n      isMapillaryButtonActive: \"isMapillaryButtonActive\"\n    })\n  },\n  destroyed() {\n    unByKey(this.mapClickListenerKey);\n    unByKey(this.mapHoverListenerKey);\n    this.map.removeLayer(this.movePointLayer);\n    this.map.removeLayer(this.baseOverlayerLayer);\n    this.map.removeLayer(this.hoverHighlightLayer);\n    this.map.removeOverlay(this.imagePreviewOverlay);\n    window.removeEventListener(\"resize\", this.resize());\n    this.mapillary.off(\"position\", this.mapillaryChanged);\n    this.mapillary.getComponent(\"sequence\").stop();\n  }\n};\n",{"version":3,"sources":["Mapillary.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Mapillary.vue","sourceRoot":"src/components/viewer/mapillary","sourcesContent":["<template>\n  <div id=\"mapillary-container\" style=\"width: 100%; height: 100%;\">\n    <mapillary-image-preview\n      ref=\"imagePreview\"\n      :imageUrl=\"previewImageUrl\"\n      v-show=\"previewImageUrl.length > 1\"\n    />\n  </div>\n</template>\n<script>\nimport { Viewer } from \"mapillary-js\";\n\n//Ol imports\nimport OlVectorLayer from \"ol/layer/Vector\";\nimport OlVectorSource from \"ol/source/Vector\";\nimport OlPoint from \"ol/geom/Point\";\nimport OlVectorTileLayer from \"ol/layer/VectorTile\";\nimport OlVectorTileSource from \"ol/source/VectorTile\";\nimport OlOverlay from \"ol/Overlay\";\nimport { createXYZ } from \"ol/tilegrid\";\nimport { fromLonLat } from \"ol/proj\";\nimport OlFeature from \"ol/Feature\";\nimport MVT from \"ol/format/MVT\";\nimport { unByKey } from \"ol/Observable\";\nimport { transformExtent } from \"ol/proj\";\n// import { toLonLat } from \"ol/proj\";\n// import axios from \"axios\";\n\n//Style and map object import\nimport { mapillaryStyleDefs } from \"../../../style/OlStyleDefs\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { mapFields } from \"vuex-map-fields\";\n\n// Image preview component import (enabled on hover)\nimport MapillaryImagePreview from \"./controls/MapillaryImagePreview\";\n\nimport \"mapillary-js/dist/mapillary.css\";\nimport { debounce } from \"../../../utils/Helpers\";\n\nexport default {\n  name: \"app-mapillary\",\n  components: {\n    \"mapillary-image-preview\": MapillaryImagePreview\n  },\n  props: {\n    accessToken: {\n      type: String,\n      required: false,\n      default: \"MLY|4945732362162775|a3872ee8a2b737be51db110cdcdea3d4\"\n    },\n    baseLayerExtent: {\n      type: Array,\n      required: false\n    }\n  },\n  data() {\n    return {\n      // Preview Image url\n      previewImageUrl: \"\",\n      // Mapillary viewer\n      mapillary: null,\n      // Features\n      highlightFeature: null,\n      pointFeature: null,\n      // Layers\n      movePointLayer: null,\n      baseOverlayerLayer: null,\n      hoverHighlightLayer: null,\n      // Listener keys\n      mapClickListenerKey: null,\n      mapHoverListenerKey: null,\n      // Overlays\n      imagePreviewOverlay: null\n    };\n  },\n  mixins: [Mapable],\n  mounted() {\n    const container = document.getElementById(\"mapillary-container\");\n    const mapCenter = this.map.getView().getCenter();\n    const searchBounds = [\n      mapCenter[0] - 1500,\n      mapCenter[1] - 1500,\n      mapCenter[0] + 1500,\n      mapCenter[1] + 1500\n    ];\n    const extent = transformExtent(searchBounds, \"EPSG:3857\", \"EPSG:4326\");\n    fetch(\n      `https://graph.mapillary.com/images?fields=id,sequence&bbox=${extent.toString()}&limit=1`,\n      {\n        headers: { Authorization: \"OAuth \" + this.accessToken }\n      }\n    )\n      .then(response => response.json())\n      .then(response => {\n        this.isMapillaryBtnDisabled = false;\n        if (Array.isArray(response.data) && response.data.length > 0) {\n          const startImageId = response.data[0].id;\n          mapillaryStyleDefs.activeSequence = response.data[0].sequence;\n          console.log(response.data[0]);\n          this.mapillary = new Viewer({\n            accessToken: this.accessToken,\n            container: container,\n            imageId: startImageId,\n            component: { cover: false }\n          });\n          this.isMapillaryBtnDisabled = false;\n          window.addEventListener(\"resize\", this.resize());\n          this.createBaseOverlayLayer();\n          this.mapillary.on(\"image\", this.mapillaryChanged);\n          this.createFeatureOverlay();\n          this.createImagePreviewOverlay();\n          this.createMovePointLayer();\n          this.createHoverHighlightLayer();\n          this.addInteractions();\n          this.mapClickListenerKey = this.map.on(\"click\", this.onClick);\n          this.$nextTick(() => {\n            this.resize();\n          });\n        }\n      })\n      .catch(() => {\n        this.isMapillaryBtnDisabled = false;\n      });\n  },\n  methods: {\n    /**\n     * Overlay style\n     */\n    createFeatureOverlay() {\n      this.featureOverlay = new OlVectorLayer({\n        source: new OlVectorSource(),\n        map: this.map,\n        style: [\n          mapillaryStyleDefs.wifiStyle,\n          mapillaryStyleDefs.circleSolidStyle\n        ]\n      });\n    },\n\n    /**\n     * Image preview overlay\n     */\n\n    /**\n     * Show popup for the get info module.\n     */\n    createImagePreviewOverlay() {\n      this.imagePreviewOverlay = new OlOverlay({\n        element: this.$refs.imagePreview.$el,\n        autoPan: false,\n        autoPanMargin: 40,\n        autoPanAnimation: {\n          duration: 250\n        }\n      });\n      this.map.addOverlay(this.imagePreviewOverlay);\n    },\n\n    /**\n     * Radar point layer\n     */\n    createMovePointLayer() {\n      this.pointFeature = new OlFeature({\n        geometry: null\n      });\n      this.pointFeature.setStyle([\n        mapillaryStyleDefs.wifiStyle,\n        mapillaryStyleDefs.circleSolidStyle\n      ]);\n      this.movePointLayer = new OlVectorLayer({\n        zIndex: 10,\n        source: new OlVectorSource({ features: [this.pointFeature] })\n      });\n      this.map.addLayer(this.movePointLayer);\n    },\n\n    /**\n     * Overlay layer (sequences, images)\n     */\n    createBaseOverlayLayer() {\n      this.baseOverlayerLayer = new OlVectorTileLayer({\n        name: \"mapillaryBaseOverlay\",\n        renderMode: \"image\",\n        source: new OlVectorTileSource({\n          attributions:\n            \"Â© <a href='https://www.mapillary.com/'> <img src='./static/layer-styles/assets/icons/_backgroundLayers/mapillary.svg' width='12px' height='12px'> Mapillary</a>\",\n          format: new MVT(),\n          tileGrid: createXYZ({ maxZoom: 14 }),\n          tilePixelRatio: 16,\n          opacity: 0.7,\n          url: `https://tiles.mapillary.com/maps/vtp/mly1_computed_public/2/{z}/{x}/{y}?access_token=${this.accessToken}`\n        }),\n        style: mapillaryStyleDefs.baseOverlayStyle(this.map)\n      });\n      if (this.baseLayerExtent) {\n        this.baseOverlayerLayer.setExtent(this.baseLayerExtent);\n      }\n      this.map.addLayer(this.baseOverlayerLayer);\n    },\n\n    /**\n     * Create hover highlight layers\n     */\n    createHoverHighlightLayer() {\n      this.hoverHighlightLayer = new OlVectorLayer({\n        zIndex: 20,\n        name: \"mapillaryHighlightLayer\",\n        source: new OlVectorSource(),\n        style: mapillaryStyleDefs.highlightStyle\n      });\n      this.map.addLayer(this.hoverHighlightLayer);\n    },\n\n    /**\n     * Overlay layer interactions\n     */\n    async addInteractions() {\n      this.mapHoverListenerKey = this.map.on(\n        \"pointermove\",\n        debounce(async evt => {\n          let features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"mapillaryBaseOverlay\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          features = features.filter(feature => {\n            return feature.get(\"layer\") === \"image\";\n          });\n          this.hoverHighlightLayer.getSource().clear();\n          if (features.length > 0 && features[0].get(\"id\")) {\n            this.imagePreviewOverlay.setPosition(\n              features[0].getFlatCoordinates()\n            );\n            const feature = new OlFeature({\n              geometry: new OlPoint(features[0].getFlatCoordinates())\n            });\n            feature.setProperties(features[0].getProperties());\n            this.hoverHighlightLayer.getSource().addFeature(feature);\n            this.map.getTarget().style.cursor = \"pointer\";\n            const imageRequestUrl = `https://graph.mapillary.com/${features[0].get(\n              \"id\"\n            )}?fields=id,captured_at,compass_angle,sequence,geometry,thumb_256_url`;\n            fetch(imageRequestUrl, {\n              headers: { Authorization: \"OAuth \" + this.accessToken }\n            })\n              .then(response => response.json())\n              .then(response => {\n                this.previewImageUrl = response.thumb_256_url;\n              });\n          } else {\n            this.previewImageUrl = \"\";\n            this.imagePreviewOverlay.setPosition(undefined);\n            this.map.getTarget().style.cursor = \"\";\n          }\n        }, 50)\n      );\n    },\n\n    /**\n     * Click event handler\n     */\n    onClick(evt) {\n      this.hoverHighlightLayer.getSource().clear();\n      const feature = this.map.forEachFeatureAtPixel(\n        evt.pixel,\n        function(feature) {\n          return feature;\n        },\n        {\n          layerFilter: layer => {\n            return layer === this.baseOverlayerLayer;\n          },\n          hitTolerance: 5\n        }\n      );\n\n      if (feature) {\n        if (feature.get(\"layer\") === \"sequence\") {\n          return;\n        }\n        var bearing = feature.get(\"compass_angle\");\n        this.mapillary.moveTo(feature.get(\"id\"));\n        this.featureOverlay.setStyle(\n          mapillaryStyleDefs.updateBearingStyle(bearing)\n        );\n        mapillaryStyleDefs.activeSequence = feature.get(\"sequence_id\");\n      } else {\n        return;\n      }\n      //Update layer\n      this.baseOverlayerLayer.changed();\n    },\n\n    /**\n     * Mapillary changed event handler\n     */\n    mapillaryChanged(evt) {\n      if (this.featureOverlay.getVisible()) {\n        this.featureOverlay.setVisible(false);\n      }\n      const image = evt.image;\n      const lonLat = new fromLonLat([image.lngLat.lng, image.lngLat.lat]);\n      this.map.getView().animate({\n        center: lonLat,\n        duration: 400\n      });\n      if (this.pointFeature.getGeometry() === null) {\n        this.pointFeature.setGeometry(new OlPoint(lonLat));\n      } else {\n        this.pointFeature.getGeometry().setCoordinates(lonLat);\n      }\n      this.pointFeature.setStyle(\n        mapillaryStyleDefs.updateBearingStyle(image.compassAngle)\n      );\n    },\n\n    /**\n     * Resize method\n     */\n    resize() {\n      this.mapillary.resize();\n    }\n  },\n  computed: {\n    ...mapFields(\"map\", {\n      isMapillaryBtnDisabled: \"isMapillaryBtnDisabled\",\n      isMapillaryButtonActive: \"isMapillaryButtonActive\"\n    })\n  },\n  destroyed() {\n    unByKey(this.mapClickListenerKey);\n    unByKey(this.mapHoverListenerKey);\n    this.map.removeLayer(this.movePointLayer);\n    this.map.removeLayer(this.baseOverlayerLayer);\n    this.map.removeLayer(this.hoverHighlightLayer);\n    this.map.removeOverlay(this.imagePreviewOverlay);\n    window.removeEventListener(\"resize\", this.resize());\n    this.mapillary.off(\"position\", this.mapillaryChanged);\n    this.mapillary.getComponent(\"sequence\").stop();\n  }\n};\n</script>\n<style lang=\"css\" scoped></style>\n"]}]}