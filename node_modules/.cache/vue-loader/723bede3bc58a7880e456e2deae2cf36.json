{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/edit/Edit.vue?vue&type=style&index=0&id=09e3a4dc&scoped=true&lang=css&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/layers/edit/Edit.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/css-loader/index.js","mtime":1657636580953},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657636583241},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/postcss-loader/src/index.js","mtime":1657636582109},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.scenario-icon:hover {\n  cursor: pointer;\n  color: #30c2ff;\n}\n.scenario-icon-delete:hover {\n  cursor: pointer;\n  color: red;\n}\n\n.create-scenario-text {\n  display: block;\n  width: 150px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAw1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit.vue","sourceRoot":"src/components/layers/edit","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-card flat>\n      <v-subheader class=\"mb-4\">\n        <span class=\"title\">{{ $t(\"appBar.edit.title\") }}</span>\n      </v-subheader>\n      <v-card-text class=\"pt-0 pb-0 px-0 mx-0\">\n        <v-divider></v-divider>\n      </v-card-text>\n      <v-card-text class=\"pa-2\">\n        <div v-if=\"scenarioList.length === 1 && scenarioList[0].id === null\">\n          <v-tooltip top>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn\n                v-on=\"on\"\n                class=\"mt-n11 ml-2\"\n                :color=\"appColor.primary\"\n                @click=\"showScenarioDialog = true\"\n                fab\n                dark\n                small\n              >\n                <v-icon dark>add</v-icon>\n              </v-btn>\n            </template>\n            <span>{{ $t(\"appBar.edit.createScenario\") }}</span>\n          </v-tooltip>\n        </div>\n      </v-card-text>\n\n      <v-card class=\"px-16 mx-4 py-0 mb-2 fill-height\" flat>\n        <!-- CREATE SCENARIO  -->\n        <div v-if=\"scenarioList.length > 1\">\n          <v-row class=\"mt-4\" no-gutters no-wrap>\n            <v-select\n              v-model=\"activeScenario\"\n              :items=\"scenarioList\"\n              style=\"max-width: 260px;\"\n              item-text=\"scenario_name\"\n              item-value=\"id\"\n              label=\"Select scenario\"\n              solo\n            >\n              <template\n                class=\"create-scenario-text\"\n                slot=\"selection\"\n                slot-scope=\"{ item }\"\n              >\n                {{ item.scenario_name }}\n              </template>\n              <template\n                class=\"create-scenario-text\"\n                slot=\"item\"\n                slot-scope=\"{ item }\"\n              >\n                {{ item.scenario_name }}\n              </template>\n            </v-select>\n\n            <div v-if=\"activeScenario\">\n              <v-speed-dial\n                style=\"z-index:100;\"\n                v-model=\"scenarioSpeedDialFab\"\n                direction=\"bottom\"\n                class=\"ml-3 mt-2\"\n                transition=\"slide-y-reverse-transition\"\n              >\n                <template v-slot:activator>\n                  <v-btn\n                    v-model=\"scenarioSpeedDialFab\"\n                    :color=\"scenarioSpeedDialFab ? 'error' : appColor.primary\"\n                    dark\n                    small\n                    fab\n                  >\n                    <v-icon v-if=\"scenarioSpeedDialFab\">\n                      close\n                    </v-icon>\n                    <v-icon v-else>\n                      more_vert\n                    </v-icon>\n                  </v-btn>\n                </template>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-on=\"on\"\n                      :color=\"appColor.primary\"\n                      fab\n                      dark\n                      x-small\n                      v-if=\"scenarios.length < currentUser.limit_scenarios\"\n                      @click=\"showScenarioDialog = true\"\n                    >\n                      <v-icon dark>add</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.createScenario\") }}</span>\n                </v-tooltip>\n                <v-tooltip v-show=\"activeScenario\" top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"activeScenario\"\n                      v-on=\"on\"\n                      :color=\"appColor.primary\"\n                      fab\n                      dark\n                      x-small\n                      @click=\"\n                        showScenarioDialog = true;\n                        activeScenarioId = activeScenario;\n                      \"\n                    >\n                      <v-icon dark>edit</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.editScenarioName\") }}</span>\n                </v-tooltip>\n                <v-tooltip v-show=\"activeScenario\" top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"activeScenario\"\n                      v-on=\"on\"\n                      color=\"error\"\n                      fab\n                      dark\n                      x-small\n                      @click=\"deleteScenario\"\n                    >\n                      <v-icon dark>delete</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.deleteScenario\") }}</span>\n                </v-tooltip>\n              </v-speed-dial>\n            </div>\n            <div v-else>\n              <v-tooltip top>\n                <template v-slot:activator=\"{ on }\">\n                  <v-btn\n                    v-on=\"on\"\n                    :color=\"appColor.primary\"\n                    class=\"ml-3 mt-2\"\n                    fab\n                    :disabled=\"scenarios.length >= currentUser.limit_scenarios\"\n                    small\n                    @click=\"showScenarioDialog = true\"\n                  >\n                    <v-icon color=\"white\">add</v-icon>\n                  </v-btn>\n                </template>\n                <span>{{ $t(\"appBar.edit.createScenario\") }}</span>\n              </v-tooltip>\n            </div>\n          </v-row>\n        </div>\n        <v-alert\n          v-if=\"scenarios.length >= currentUser.limit_scenarios\"\n          dense\n          outlined\n          type=\"error\"\n        >\n          {{ $t(\"appBar.edit.scenarioLimitReached\") }}\n        </v-alert>\n        <div v-if=\"scenarioList.length > 1 && activeScenario\">\n          <v-divider></v-divider>\n          <v-subheader class=\"ml-0 pl-0 mb-0 pb-0\">\n            <v-icon :style=\"`color:${appColor.secondary};`\" small class=\"mr-2\"\n              >fas fa-layer-group</v-icon\n            >\n            <h3>{{ $t(\"appBar.edit.selectLayer\") }}</h3>\n          </v-subheader>\n          <v-select\n            class=\"mt-4\"\n            :items=\"editableLayers\"\n            v-model=\"selectedLayer\"\n            item-value=\"name\"\n            return-object\n            solo\n            :label=\"$t('appBar.edit.layerToEdit')\"\n          >\n            <template slot=\"selection\" slot-scope=\"{ item }\">\n              {{ translate(\"layerName\", item.name) }}\n            </template>\n            <template slot=\"item\" slot-scope=\"{ item }\">\n              {{ translate(\"layerName\", item.name) }}\n            </template>\n          </v-select>\n        </div>\n\n        <template v-if=\"selectedLayer && schema[layerName] && activeScenario\">\n          <v-divider></v-divider>\n          <!-- ==== <EDIT> ====-->\n\n          <v-subheader\n            v-show=\"selectedLayer !== null && activeScenario\"\n            class=\"clickable ml-0 pl-0\"\n            @click=\"editElVisible = !editElVisible\"\n          >\n            <v-icon\n              :style=\"\n                editElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              small\n              class=\"mr-2\"\n              >fas fa-edit</v-icon\n            >\n            <h3>{{ $t(\"appBar.edit.editTools\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon v-html=\"editElVisible === true ? 'remove' : 'add'\"></v-icon>\n          </v-subheader>\n\n          <div class=\"ml-2\" v-if=\"editElVisible\">\n            <span\n              v-show=\"selectedLayer != null && selectedLayer['name'] !== 'poi'\"\n              class=\"py-1 mb-0 mt-3 pl-0 ml-0\"\n            >\n              <h4>{{ $t(\"appBar.edit.selectFeatures\") }}</h4>\n            </span>\n\n            <v-flex\n              xs12\n              v-show=\"selectedLayer != null && selectFeaturesVisible\"\n              class=\"mt-1 pt-0 mb-4\"\n            >\n              <v-btn-toggle\n                v-show=\"selectedLayer['name'] != 'poi'\"\n                v-model=\"toggleSelection\"\n              >\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn v-on=\"on\" text>\n                      <v-icon>far fa-dot-circle</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.drawCircle\") }}</span>\n                </v-tooltip>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn v-on=\"on\" text v-show=\"false\">\n                      <v-icon>far fa-hand-pointer</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.selectOnMap\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n            </v-flex>\n\n            <span v-show=\"selectedLayer != null\" class=\"py-1 mb-0 pl-0 ml-0\">\n              <h4>{{ $t(\"appBar.edit.editTools\") }}</h4>\n            </span>\n\n            <v-flex\n              xs12\n              v-show=\"selectEditVisible && selectedLayer != null\"\n              class=\"mt-1 pt-0 mb-3\"\n            >\n              <v-btn-toggle v-model=\"toggleEdit\">\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn :value=\"1\" v-on=\"on\" text>\n                      <v-icon medium>add</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.drawFeatureTooltip\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip\n                  v-show=\"selectedLayer['canModifyGeom'] !== false\"\n                  top\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"selectedLayer['canModifyGeom'] !== false\"\n                      :value=\"2\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-edit</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.modifyFeatureTooltip\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      :value=\"3\"\n                      v-show=\"selectedLayer['modifyAttributes'] === true\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-list-alt</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.modifyAttributes\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn :value=\"4\" v-on=\"on\" text>\n                      <v-icon>far fa-trash-alt</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.deleteFeature\") }}</span>\n                </v-tooltip>\n\n                <v-tooltip\n                  top\n                  v-show=\"\n                    !['Point'].some(r =>\n                      selectedLayer['editGeometry'].includes(r)\n                    )\n                  \"\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      v-show=\"\n                        !['Point', 'LineString'].some(r =>\n                          selectedLayer['editGeometry'].includes(r)\n                        )\n                      \"\n                      :value=\"5\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-clone</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.moveFeature\") }}</span>\n                </v-tooltip>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      :value=\"6\"\n                      v-show=\"\n                        !['Point', 'LineString'].some(r =>\n                          selectedLayer['editGeometry'].includes(r)\n                        )\n                      \"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-object-group</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.drawPolygonHole\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n              <br />\n\n              <v-btn-toggle v-model=\"toggleEdit\">\n                <v-tooltip v-if=\"selectedLayer['name'] === 'building'\" top>\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn\n                      class=\"ml-0 mr-2 mt-2\"\n                      v-if=\"selectedLayer['name'] === 'building'\"\n                      :value=\"7\"\n                      v-on=\"on\"\n                      text\n                    >\n                      <v-icon>far fa-building</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.addBldEntrance\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n\n              <v-btn-toggle v-model=\"toggleSnapGuide\">\n                <v-tooltip\n                  top\n                  v-if=\"\n                    ['Polygon', 'MultiPolygon'].some(r =>\n                      selectedLayer['editGeometry'].includes(r)\n                    )\n                  \"\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn class=\"ml-0 mt-2\" v-on=\"on\" text>\n                      <v-icon>fas fa-border-all</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.snapGuide\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n\n              <v-btn-toggle v-model=\"toggleFeatureLabels\">\n                <v-tooltip\n                  top\n                  v-if=\"\n                    ['Polygon', 'MultiPolygon'].some(r =>\n                      selectedLayer['editGeometry'].includes(r)\n                    )\n                  \"\n                >\n                  <template v-slot:activator=\"{ on }\">\n                    <v-btn class=\"ml-2 mt-2\" v-on=\"on\" text>\n                      <v-icon>fas fa-font</v-icon>\n                    </v-btn>\n                  </template>\n                  <span>{{ $t(\"appBar.edit.featureLabels\") }}</span>\n                </v-tooltip>\n              </v-btn-toggle>\n            </v-flex>\n          </div>\n          <v-divider></v-divider>\n          <!-- ==== </EDIT> ==== -->\n        </template>\n\n        <template v-if=\"activeScenario && selectedLayer && schema[layerName]\">\n          <!-- ==== <DATA TABLE> ====-->\n          <v-subheader\n            class=\"clickable ml-0 pl-0\"\n            @click=\"dataTableElVisible = !dataTableElVisible\"\n          >\n            <v-icon\n              :style=\"\n                dataTableElVisible === true ? { color: appColor.secondary } : {}\n              \"\n              small\n              class=\"mr-2\"\n              >far fa-list-alt</v-icon\n            >\n            <h3>{{ $t(\"appBar.edit.scenarioFeatures\") }}</h3>\n            <v-spacer></v-spacer>\n            <v-icon\n              v-html=\"dataTableElVisible === true ? 'remove' : 'add'\"\n            ></v-icon>\n          </v-subheader>\n          <div class=\"ml-2\" v-if=\"dataTableElVisible\">\n            <v-expand-transition>\n              <v-flex xs12 class=\"mt-1 pt-0 mb-0\">\n                <v-data-table\n                  :headers=\"headers\"\n                  :loading=\"isTableLoading\"\n                  :items=\"scenarioDataTable\"\n                  :items-per-page=\"15\"\n                  class=\"elevation-0\"\n                >\n                  <template v-slot:item.status=\"{ item }\">\n                    <v-chip\n                      small\n                      :color=\"\n                        item.status === 'uploaded' ? appColor.primary : 'error'\n                      \"\n                      dark\n                      class=\"mx-0 px-1\"\n                      >{{ $t(`appBar.edit.status.${item.status}`) }}</v-chip\n                    >\n                  </template>\n                  <template v-slot:item.type=\"{ item }\">\n                    <span>{{ $t(`appBar.edit.type.${item.type}`) }}</span>\n                  </template>\n\n                  <template v-slot:item.action=\"{ item }\">\n                    <!-- zoom to scenario feature -->\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-icon\n                          v-on=\"on\"\n                          :disabled=\"isUploadBusy\"\n                          class=\"scenario-icon\"\n                          @click=\"scenarioActionBtnHandler(item, 'zoom')\"\n                        >\n                          zoom_out_map\n                        </v-icon>\n                      </template>\n                      <span>{{ $t(`map.tooltips.zoomToFeature`) }}</span>\n                    </v-tooltip>\n                    <!-- delete scenario feature -->\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-icon\n                          v-show=\"isDeleteBtnVisible(item)\"\n                          class=\"scenario-icon-delete\"\n                          :disabled=\"isUploadBusy\"\n                          v-on=\"on\"\n                          @click=\"scenarioActionBtnHandler(item, 'delete')\"\n                        >\n                          delete\n                        </v-icon>\n                      </template>\n                      <span>{{ $t(`map.tooltips.deleteFeature`) }}</span>\n                    </v-tooltip>\n                    <v-tooltip top>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-icon\n                          v-show=\"isRestoreBtnVisible(item)\"\n                          class=\"scenario-icon\"\n                          :disabled=\"isUploadBusy\"\n                          v-on=\"on\"\n                          @click=\"scenarioActionBtnHandler(item, 'restore')\"\n                        >\n                          restore_from_trash\n                        </v-icon>\n                      </template>\n                      <span>{{ $t(`map.tooltips.restoreFeature`) }}</span>\n                    </v-tooltip>\n                  </template>\n                </v-data-table>\n              </v-flex>\n            </v-expand-transition>\n          </div>\n          <!-- ==== < /DATA TABLE> ====-->\n        </template>\n      </v-card>\n      <!-- ----- -->\n      <v-card-actions v-if=\"selectedLayer && schema[layerName]\">\n        <v-spacer></v-spacer>\n\n        <v-hover v-slot=\"{ hover }\">\n          <v-btn\n            v-show=\"selectedLayer\"\n            class=\"white--text\"\n            :color=\"hover ? 'error' : 'grey'\"\n            outlined\n            :loading=\"isDeleteAllBusy\"\n            :disabled=\"scenarioDataTable.length === 0 || isUploadBusy\"\n            @click=\"deleteAll\"\n          >\n            <v-icon left>delete</v-icon>{{ $t(\"appBar.edit.clearBtn\") }}\n          </v-btn>\n        </v-hover>\n      </v-card-actions>\n    </v-card>\n\n    <!-- Scenario dialog -->\n    <scenario-dialog\n      :visible=\"showScenarioDialog\"\n      :scenarioId=\"activeScenarioId\"\n      @close=\"\n        showScenarioDialog = false;\n        activeScenarioId = null;\n      \"\n    ></scenario-dialog>\n    <!-- Confirm Delete all  -->\n    <confirm ref=\"confirm\"></confirm>\n    <!-- Popup overlay  -->\n    <overlay-popup\n      style=\"cursor: default;\"\n      :title=\"$t(`map.popup.${popup.title}`)\"\n      v-show=\"popup.isVisible\"\n      ref=\"popup\"\n    >\n      <v-btn icon>\n        <v-icon>close</v-icon>\n      </v-btn>\n      <template v-slot:close>\n        <v-btn @click=\"closePopup()\" icon>\n          <v-icon>close</v-icon>\n        </v-btn>\n      </template>\n      <template v-slot:body>\n        <div v-if=\"popup.selectedInteraction === 'delete'\">\n          <b>{{ $t(\"appBar.edit.popup.deleteFeatureMsg\") }}</b>\n        </div>\n        <div\n          v-else-if=\"\n            ['add', 'modifyAttributes'].includes(popup.selectedInteraction)\n          \"\n        >\n          <v-form ref=\"edit-form\" v-model=\"formValid\">\n            <v-jsonschema-form\n              style=\"width:260px;\"\n              v-if=\"schema[layerName] && popup && popup.isVisible\"\n              :schema=\"schema[layerName]\"\n              :model=\"dataObject\"\n              :key=\"jsonFormKey\"\n              :options=\"options\"\n            />\n          </v-form>\n        </div>\n      </template>\n      <template v-slot:actions>\n        <template v-if=\"popup.selectedInteraction === 'delete'\">\n          <v-btn color=\"primary darken-1\" @click=\"ok('delete')\" text>{{\n            $t(\"buttonLabels.yes\")\n          }}</v-btn>\n          <v-btn color=\"grey\" text @click=\"closePopup()\">{{\n            $t(\"buttonLabels.cancel\")\n          }}</v-btn>\n        </template>\n        <template\n          v-else-if=\"\n            ['add', 'modifyAttributes'].includes(popup.selectedInteraction)\n          \"\n        >\n          <v-btn\n            color=\"primary darken-1\"\n            :disabled=\"formValid === false\"\n            @click=\"ok(popup.selectedInteraction)\"\n            text\n            >{{ $t(\"buttonLabels.save\") }}</v-btn\n          >\n          <v-btn color=\"grey\" text @click=\"closePopup()\">{{\n            $t(\"buttonLabels.cancel\")\n          }}</v-btn>\n        </template>\n      </template>\n    </overlay-popup>\n  </v-flex>\n</template>\n\n<script>\nimport { EventBus } from \"../../../EventBus\";\nimport { Mapable } from \"../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../mixins/InteractionsToggle\";\nimport { Isochrones } from \"../../../mixins/Isochrones\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { mapFeatureTypeProps } from \"../../../utils/Layer\";\nimport OlSelectController from \"../../../controllers/OlSelectController\";\nimport OlEditController from \"../../../controllers/OlEditController\";\nimport {\n  bldEntrancePointsStyle,\n  getEditStyle,\n  getFeatureHighlightStyle\n} from \"../../../style/OlStyleDefs\";\nimport OverlayPopup from \"../../viewer/ol/controls/Overlay\";\nimport ScenarioDialog from \"../../core/ScenarioDialog\";\nimport ApiService from \"../../../services/api.service\";\nimport axios from \"axios\";\nimport VJsonschemaForm from \"../../other/dynamicForms/index\";\n\nimport { geojsonToFeature, geometryToWKT } from \"../../../utils/MapUtils\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { debounce } from \"../../../utils/Helpers\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport VectorSource from \"ol/source/Vector\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorImageLayer from \"ol/layer/VectorImage\";\nimport { GET_SCENARIOS } from \"../../../store/actions.type\";\n\nexport default {\n  components: {\n    \"overlay-popup\": OverlayPopup,\n    \"scenario-dialog\": ScenarioDialog,\n    VJsonschemaForm\n  },\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts, Isochrones],\n  data: () => ({\n    interactionType: \"edit-interaction\",\n    selectedFeatures: [],\n    editableLayers: [],\n    toggleSelection: undefined,\n    toggleEdit: undefined,\n    toggleSnapGuide: 0, // Used for snap and other functionalities (Active by default).\n    toggleFeatureLabels: 0,\n    isUploadBusy: false,\n    isDeleteAllBusy: false,\n    //Popup configuration\n    popup: {\n      title: \"\",\n      isVisible: false,\n      el: null,\n      selectedInteraction: null\n    },\n    //Edit form\n    layerConf: {},\n    schema: {},\n    dataObject: {},\n    formValid: false,\n    //Others\n    mapCursorTypeEnum: {\n      add: \"crosshair\",\n      modify: \"pointer\",\n      delete: \"pointer\",\n      select: \"pointer\",\n      move: \"auto\",\n      modifyAttributes: \"pointer\",\n      addBldEntrance: \"pointer\",\n      drawHole: \"crosshair\"\n    },\n    //Data table\n    isTableLoading: false,\n    //Scenario Dialog\n    showScenarioDialog: false,\n    activeScenarioId: null,\n\n    editElVisible: true,\n    dataManageElVisible: true,\n    selectEditVisible: true,\n    selectFeaturesVisible: true,\n    dataTableElVisible: true,\n    scenarioSpeedDialFab: false,\n    // -------------------------\n    // ------------------------\n    olEditCtrl: null,\n    olSelectCtrl: null,\n    highlightLayer: null,\n    tempBldEntranceFeature: null,\n    featuresToCommit: [],\n    // Cache for poi modified feature\n    poiModifiedFeatures: [],\n    jsonFormKey: 0\n  }),\n  watch: {\n    activeScenario() {\n      // Fetch all features from the scenario\n      if (this.selectedLayer) {\n        this.fetchScenarioLayerFeatures(this.selectedLayer[\"name\"]);\n      }\n\n      if (!this.activeScenario) {\n        this.clearAll();\n        this.cleanPoiTreeNode();\n        this.poisAoisLayer.setVisible(true);\n        this.selectedLayer = null;\n        this.calculationMode.active = \"default\";\n      }\n      if (this.activeScenario) {\n        this.calculationMode.active = \"scenario\";\n      }\n      this.fetchScenarioLayerSchemas();\n    },\n    selectedLayer(value, oldValue) {\n      if (this.olEditCtrl && value) {\n        this.appConfig.app_ui.base_color.primary = this.scenarioLayerEditModeColor;\n        this.olEditCtrl.selectedLayer = value;\n        this.originIdName = this.original_id;\n        this.stop();\n        this.clearAll();\n        if (value && value.name === \"poi\") {\n          this.poisAoisLayer.setVisible(false);\n        } else {\n          this.cleanPoiTreeNode();\n          this.poisAoisLayer.setVisible(true);\n        }\n        // Fetch features for the selected layer\n        this.fetchScenarioLayerFeatures(this.selectedLayer[\"name\"]);\n      }\n\n      if (!value && this.primaryColorBackup) {\n        if (oldValue.name === \"poi\") {\n          this.cleanPoiTreeNode();\n          this.poisAoisLayer.setVisible(true);\n          this.clearAll();\n        }\n        // Revert color theme\n        this.appConfig.app_ui.base_color.primary = this.primaryColorBackup;\n      }\n    },\n    toggleSelection: {\n      handler(state, oldState) {\n        if (state !== undefined) {\n          this.olEditCtrl.removeInteraction();\n          this.toggleEdit = undefined;\n          if (oldState !== undefined) {\n            this.olSelectCtrl.removeInteraction();\n            EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n            if (this.map.getTarget().style) {\n              this.map.getTarget().style.cursor = \"\";\n            }\n          }\n          this.toggleSelectInteraction(state);\n        }\n      }\n    },\n    toggleEdit: {\n      handler(state, oldState) {\n        this.olSelectCtrl.removeInteraction();\n        this.toggleSelection = undefined;\n        if (oldState !== undefined) {\n          this.olEditCtrl.removeInteraction();\n          EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n          if (this.map.getTarget().style) {\n            this.map.getTarget().style.cursor = \"\";\n          }\n        }\n        if (state !== undefined) {\n          this.toggleEditInteraction(state);\n        }\n      }\n    },\n    toggleSnapGuide(value) {\n      this.toggleSnapGuideInteraction(value);\n    },\n    toggleFeatureLabels(value) {\n      this.toggleFeatureLabelsInteraction(value);\n    },\n    dataObject: {\n      immediate: true,\n      async handler() {\n        await this.$nextTick();\n        if (this.$refs[\"edit-form\"]) {\n          this.$refs[\"edit-form\"].validate();\n        }\n      },\n      deep: true\n    },\n    selectedPoisOnlyKeys() {\n      this.editLayer.getSource().changed();\n    },\n    \"calculationMode.active\": function() {\n      this.editLayer.getSource().changed();\n    },\n    poisAois() {\n      // Add remove features.\n      if (this.selectedLayer && this.selectedLayer[\"name\"] === \"poi\") {\n        this.syncPoiFeatures();\n      }\n    }\n  },\n  mounted() {\n    this.popup.el = this.$refs.popup;\n  },\n  methods: {\n    syncPoiFeatures() {\n      this.poisAoisLayer\n        .getSource()\n        .getFeatures()\n        .forEach(feature => {\n          if (\n            ![\"MultiPolygon\", \"Polygon\"].includes(\n              feature.getGeometry().getType()\n            )\n          ) {\n            const category = feature.get(\"category\");\n            const featureInEdit = this.editLayer\n              .getSource()\n              .getFeatureById(feature.get(\"id\"));\n            const isFeatureActive = this.poisAois[category];\n            if (featureInEdit && !isFeatureActive) {\n              this.editLayer.getSource().removeFeature(featureInEdit);\n            } else if (!featureInEdit && isFeatureActive) {\n              let isFeatureModified = false;\n              this.poiModifiedFeatures.forEach(modifiedFeature => {\n                if (modifiedFeature.get(\"uid\") === feature.get(\"uid\")) {\n                  isFeatureModified = true;\n                }\n              });\n              if (!isFeatureModified) {\n                const clonedFeature = feature.clone();\n                clonedFeature.setId(feature.get(\"id\"));\n                clonedFeature.set(\"layerName\", \"poi\");\n                this.editLayer.getSource().addFeature(clonedFeature);\n              }\n            }\n          }\n        });\n    },\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      this.olSelectCtrl = new OlSelectController(this.map);\n      this.olSelectCtrl.createSelectionLayer();\n      // Initialize ol edit controller.\n      this.olEditCtrl = new OlEditController(this.map);\n      //Initialize ol select controller.\n      this.createLayers();\n      this.olEditCtrl.highlightSource = this.highlightLayer.getSource();\n      this.olEditCtrl.popup = this.popup;\n      //Initialize component layers\n      this.setUpCtxMenu();\n      this.toggleFeatureLabelsInteraction(this.toggleFeatureLabels);\n    },\n\n    /**\n     * Creates layers\n     */\n    createLayers() {\n      // Edit layer\n      const editLayer = new VectorImageLayer({\n        name: \"Edit Layer\",\n        displayInLayerList: false,\n        source: new VectorSource({ wrapX: false }),\n        zIndex: 10,\n        style: getEditStyle(),\n        queryable: true\n      });\n      editLayer.getSource().on(\"changefeature\", this.onFeatureChange);\n      editLayer.getSource().on(\"change\", this.onEditSourceChange);\n      this.map.addLayer(editLayer);\n      this.editLayer = editLayer;\n      this.olEditCtrl.layer = editLayer;\n      this.olEditCtrl.source = editLayer.getSource();\n      // Highlight Layer\n      const highlightLayer = new VectorLayer({\n        displayInLayerList: false,\n        source: new VectorSource({ wrapX: false }),\n        zIndex: 10,\n        style: getFeatureHighlightStyle()\n      });\n      this.map.addLayer(highlightLayer);\n      this.highlightLayer = highlightLayer;\n      // Building entrance layer\n      const bldEntranceLayer = new VectorLayer({\n        name: \"bld_entrance_layer\",\n        displayInLayerList: false,\n        source: new VectorSource({ wrapX: false }),\n        zIndex: 100,\n        queryable: false,\n        style: bldEntrancePointsStyle()\n      });\n      this.olEditCtrl.bldEntranceLayer = bldEntranceLayer;\n      this.bldEntranceLayer = bldEntranceLayer;\n      bldEntranceLayer\n        .getSource()\n        .on(\"changefeature\", this.onBldEntranceFeatureChange);\n      this.map.addLayer(bldEntranceLayer);\n    },\n    /**\n     * Get Layer attribute fields\n     */\n    fetchScenarioLayerSchemas() {\n      this.scenarioLayersConfig.forEach(config => {\n        const layerName = config.client_config.name;\n        const propertiesConfig = config.properties;\n        const props = [];\n        const layerConfig = {\n          listValues: {},\n          hiddenProps: [\n            \"id\",\n            \"way_id\",\n            \"building_id\",\n            \"uid\",\n            \"building_modified_id\",\n            \"geom\",\n            \"class_id\"\n          ],\n          enableFileUpload: config.client_config.enableFileUpload || false\n        };\n\n        Object.keys(propertiesConfig).forEach(key => {\n          const columnConfig = {};\n          columnConfig.column_name = key;\n          if (key === \"geom\") {\n            columnConfig.data_type = \"USER-DEFINED\";\n          } else {\n            columnConfig.data_type = propertiesConfig[key].type;\n          }\n          if (config.required && config.required.includes(key)) {\n            columnConfig.is_nullable = \"NO\";\n          } else {\n            columnConfig.is_nullable = \"YES\";\n          }\n          props.push(columnConfig);\n          // Check if it has enum values\n          if (propertiesConfig[key].enum) {\n            layerConfig.listValues[key] = {\n              values: propertiesConfig[key].enum\n            };\n          }\n          // For pois add all list from poiIcon\n          if (key === \"category\" && [\"poi\"].includes(layerName)) {\n            layerConfig.listValues[key] = {\n              values: this.poiList\n            };\n          }\n        });\n\n        const jsonSchema = mapFeatureTypeProps(props, layerName, layerConfig);\n        this.schema[layerName] = jsonSchema;\n      });\n      if (this.layerName) {\n        this.updateReqFields(this.reqFields);\n        this.$forceUpdate();\n      }\n    },\n    /**\n     * Fetch scenario features for a layer\n     */\n    fetchScenarioLayerFeatures(layer) {\n      const requests = [];\n      this.clearAll();\n      if (!this.activeScenario) return;\n\n      const modifiedFeaturesPromise = ApiService.get_(\n        `/scenarios/${this.activeScenario}/${layer}_modified/features?return_type=geojson`\n      );\n      requests.push(modifiedFeaturesPromise);\n      if (layer === \"building\") {\n        const populationModifiedFeaturePromise = ApiService.get_(\n          `/scenarios/${this.activeScenario}/population_modified/features?return_type=geojson`\n        );\n        requests.push(populationModifiedFeaturePromise);\n      }\n      this.isMapBusy = true;\n\n      axios\n        .all(requests)\n        .then(\n          axios.spread((modifiedLayer, population) => {\n            [modifiedLayer, population].forEach((layerData, index) => {\n              if (layerData) {\n                const features = geojsonToFeature(layerData.data, {\n                  dataProjection: \"EPSG:4326\",\n                  featureProjection: \"EPSG:3857\"\n                });\n\n                if (index === 1 && layer === \"building\") {\n                  layer = \"population\";\n                  this.bldEntranceLayer.getSource().clear();\n                  this.bldEntranceLayer.getSource().addFeatures(features);\n                  return;\n                }\n                features.forEach(feature => {\n                  feature.setId(`${layer}_${feature.getId()}`);\n                  feature.set(\"layerName\", layer);\n                });\n                this.editLayer.getSource().addFeatures(features);\n                if (layer === \"poi\") {\n                  this.poiModifiedFeatures = features;\n                  this.turnOnAndLockPoiTreeNode(features, \"add\");\n                }\n              }\n            });\n            if (layer === \"poi\") {\n              this.syncPoiFeatures();\n            }\n            this.onEditSourceChange();\n          })\n        )\n        .catch(error => {\n          throw new Error(error);\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n        });\n    },\n    /**\n     * When poi layer is selected check if category is already selected from user and lock it, if not select it first.\n     */\n    turnOnAndLockPoiTreeNode(features, type) {\n      const uniqueCategories = [\n        ...new Set(features.map(f => f.get(\"category\")))\n      ];\n      uniqueCategories.forEach(category => {\n        if (type == \"add\") {\n          if (!this.selectedPoisOnlyKeys.includes(category)) {\n            const poiNodeObj = this.poisTreeOnlyChildren[category];\n            if (poiNodeObj) {\n              poiNodeObj.isLocked = true;\n              this.selectedPoisAois.push(this.poisTreeOnlyChildren[category]);\n            }\n          } else {\n            this.selectedPoisAois.forEach(selectedPoi => {\n              if (selectedPoi.value === category) {\n                selectedPoi.isLocked = true;\n              }\n            });\n          }\n        }\n        if (type === \"unlock\") {\n          this.selectedPoisAois.forEach(selectedPoi => {\n            if (selectedPoi.values === category) {\n              selectedPoi.isLocked = false;\n            }\n          });\n        }\n      });\n    },\n    cleanPoiTreeNode() {\n      this.selectedPoisAois.forEach(selectedPoi => {\n        if (selectedPoi.isLocked) {\n          selectedPoi.isLocked = false;\n        }\n      });\n    },\n    /**\n     * Toggle the select interaction\n     */\n    toggleSelectInteraction(state) {\n      if (state != undefined) {\n        EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = this.mapCursorTypeEnum[\"select\"];\n        }\n      } else {\n        EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = \"\";\n        }\n      }\n      let selectionType;\n      switch (state) {\n        case 0:\n          selectionType = \"multiple\";\n          break;\n        default:\n          break;\n      }\n      if (selectionType !== undefined) {\n        this.olSelectCtrl.addInteraction(\n          selectionType,\n          this.selectedLayer,\n          this.onSelectionStart,\n          this.onSelectionEnd\n        );\n        if (this.addKeyupListener) {\n          this.addKeyupListener();\n        }\n      } else {\n        this.olSelectCtrl.removeInteraction();\n      }\n    },\n    /**\n     * Callback function executed when selection interaction starts.\n     */\n    onSelectionStart() {\n      this.clear();\n    },\n    /**\n     * Callback function executed when selection interaction ends.\n     *\n     * @param  {ol/feature} features The features returned from selection interaction\n     */\n    onSelectionEnd(response) {\n      this.toggleSelection = undefined;\n      this.olSelectCtrl.removeInteraction();\n      if (response) {\n        const features = geojsonToFeature(response.data, {\n          dataProjection: \"EPSG:4326\",\n          featureProjection: \"EPSG:3857\"\n        });\n        features.forEach(feature => {\n          feature.set(\"layerName\", this.selectedLayer[\"name\"]);\n        });\n        this.editLayer.getSource().addFeatures(features);\n      }\n    },\n\n    /**\n     * Toggle the edit interaction\n     */\n    toggleEditInteraction(state) {\n      let editType, startCb, endCb;\n      switch (state) {\n        case 1:\n          editType = \"add\";\n          startCb = this.onDrawStart;\n          endCb = this.onDrawEnd;\n          break;\n        case 2:\n          editType = \"modify\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n        case 3:\n          editType = \"modifyAttributes\";\n          startCb = this.openModifyAttributePopup;\n          break;\n        case 4:\n          editType = \"delete\";\n          endCb = this.openDeletePopup;\n          break;\n        case 5:\n          editType = \"move\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n        case 6:\n          editType = \"drawHole\";\n          startCb = this.onModifyStart;\n          endCb = this.onModifyEnd;\n          break;\n        case 7:\n          editType = \"addBldEntrance\";\n          endCb = this.onBldEntranceInteractionEnd;\n          break;\n        default:\n          break;\n      }\n      if (editType !== undefined) {\n        this.olEditCtrl.addInteraction(editType, startCb, endCb);\n        EventBus.$emit(\"ol-interaction-activated\", this.interactionType);\n        this.$nextTick(() => {\n          if (this.map.getTarget().style) {\n            this.map.getTarget().style.cursor = this.mapCursorTypeEnum[\n              editType\n            ];\n          }\n        });\n        if (this.addKeyupListener) {\n          this.addKeyupListener();\n        }\n        this.olEditCtrl.editType = editType;\n      } else {\n        this.olEditCtrl.editType = undefined;\n        this.olEditCtrl.removeInteraction();\n        EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n        if (this.map.getTarget().style) {\n          this.map.getTarget().style.cursor = \"\";\n        }\n      }\n    },\n\n    /**\n     * Adds or remove snap interaction\n     */\n    toggleSnapGuideInteraction(state) {\n      if (state === 0) {\n        this.olEditCtrl.addSnapGuideInteraction();\n        this.olEditCtrl.isSnapGuideActive = 1;\n      } else {\n        this.olEditCtrl.removeSnapGuideInteraction();\n        this.olEditCtrl.isSnapGuideActive = 0;\n      }\n    },\n\n    /**\n     * Toggle Feature labels\n     */\n\n    toggleFeatureLabelsInteraction(state) {\n      this.editLayer.set(\"showLabels\", state);\n      this.editLayer.getSource().changed();\n    },\n\n    /**\n     * Open modify attribute popup\n     */\n    openModifyAttributePopup(evt) {\n      const feature = this.editLayer\n        .getSource()\n        .getClosestFeatureToCoordinate(evt.coordinate);\n      this.featuresToCommit = [];\n      this.highlightLayer.getSource().clear();\n      if (feature) {\n        const props = feature.getProperties();\n        this.$nextTick(() => {\n          for (const attr in this.dataObject) {\n            this.dataObject[attr] = attr in props ? props[attr] : null;\n          }\n          this.jsonFormKey += 1;\n        });\n        const geometry = feature.getGeometry();\n        let popupCoordinate = geometry.getCoordinates();\n        while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n          popupCoordinate = popupCoordinate[0];\n        }\n        this.map.getView().animate({\n          center: popupCoordinate,\n          duration: 400\n        });\n        this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n        this.featuresToCommit.push(feature);\n        this.highlightLayer.getSource().addFeature(feature.clone());\n        this.popup.title = \"modifyAttributes\";\n        this.popup.selectedInteraction = \"modifyAttributes\";\n        this.popup.isVisible = true;\n      }\n    },\n    /**\n     * Opens a popup for the delete confirmation\n     */\n    openDeletePopup(evt) {\n      let feature;\n      if (evt.coordinate) {\n        const coordinate = evt.coordinate;\n        feature = this.editLayer\n          .getSource()\n          .getClosestFeatureToCoordinate(coordinate);\n      } else {\n        //Triggered when user click scenario data table\n        //Create overlayer\n        this.olEditCtrl.createPopupOverlay();\n        feature = evt;\n      }\n\n      this.highlightLayer.getSource().addFeature(feature.clone());\n      this.featuresToCommit.push(feature);\n      if (feature) {\n        const geometry = feature.getGeometry();\n        let popupCoordinate = geometry.getCoordinates();\n        while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n          popupCoordinate = popupCoordinate[0];\n        }\n        this.map.getView().animate({\n          center: popupCoordinate,\n          duration: 400\n        });\n        this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n        this.popup.title = \"confirm\";\n        this.popup.selectedInteraction = \"delete\";\n        this.popup.isVisible = true;\n      }\n    },\n\n    /**\n     * Modify interaction start event handler\n     */\n    onModifyStart() {\n      this.featuresToCommit = [];\n      this.olEditCtrl.isInteractionOnProgress = true;\n    },\n    /**\n     * Modify interaction end event handler\n     */\n    onModifyEnd() {\n      this.olEditCtrl.isInteractionOnProgress = false;\n      this.clearDataObject();\n      const featuresToAdd = [];\n      const featuresToUpdate = [];\n      this.featuresToCommit.forEach(feature => {\n        const featureOut = this.setFeatureFields(feature);\n        const props = feature.getProperties();\n        if (props.editType !== \"d\") {\n          if (props.hasOwnProperty(\"edit_type\")) {\n            featureOut.setId(feature.getId());\n            featuresToUpdate.push(featureOut);\n          } else {\n            Object.keys(featureOut.getProperties()).forEach(prop => {\n              if (![\"edit_type\", this.original_id, \"geometry\"].includes(prop)) {\n                featureOut.set(prop, feature.get(prop));\n              }\n            });\n            featureOut.set(\"edit_type\", \"m\");\n            featureOut.set(\n              this.original_id,\n              feature.get(\"uid\") || feature.get(\"id\")\n            );\n            featuresToAdd.push(featureOut);\n          }\n        }\n      });\n      this.createScenarioFeatures(featuresToAdd);\n      this.updateScenarioFeatures(featuresToUpdate);\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onDrawStart() {\n      this.featuresToCommit = [];\n    },\n    /**\n     * Draw interaction start event handler\n     */\n    onDrawEnd(evt) {\n      const feature = evt.feature;\n      this.editLayer.getSource().addFeature(feature);\n      this.clearDataObject();\n      //Disable interaction until user fills the attributes for the feature and closes the popup\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(false);\n      }\n      this.featuresToCommit.push(feature);\n      this.highlightLayer.getSource().addFeature(feature.clone());\n      let popupCoordinate = feature.getGeometry().getCoordinates();\n      while (popupCoordinate && Array.isArray(popupCoordinate[0])) {\n        popupCoordinate = popupCoordinate[0];\n      }\n      this.map.getView().animate({\n        center: popupCoordinate,\n        duration: 400\n      });\n      this.olEditCtrl.popupOverlay.setPosition(popupCoordinate);\n      this.popup.title = \"attributes\";\n      this.popup.selectedInteraction = \"add\";\n      this.popup.isVisible = true;\n    },\n    setFeatureFields(feature) {\n      const props = feature.getProperties();\n      const featureOut = feature.clone();\n      const mandatoryProps = [\n        ...Object.keys(this.dataObject),\n        \"edit_type\",\n        this.original_id,\n        \"geometry\",\n        \"geom\"\n      ];\n      Object.keys(props).forEach(prop => {\n        if (!mandatoryProps.includes(prop)) featureOut.unset(prop);\n      });\n      return featureOut;\n    },\n\n    /**\n     * Building Entrance interaction end.\n     */\n    onBldEntranceInteractionEnd(evt) {\n      let coordinate;\n      if (evt.type === \"modifyend\") {\n        if (!this.tempBldEntranceFeature) return;\n        coordinate = this.tempBldEntranceFeature.getGeometry().getCoordinates();\n      } else {\n        coordinate = evt.feature.getGeometry().getCoordinates();\n      }\n\n      let buildingFeatureAtCoord;\n      if (evt.type === \"modifyend\") {\n        buildingFeatureAtCoord = this.olEditCtrl.source.getClosestFeatureToCoordinate(\n          coordinate,\n          candidate => {\n            if (\n              ((candidate.get(\"id\") || candidate.getId()) &&\n                this.tempBldEntranceFeature &&\n                this.tempBldEntranceFeature.get(\"building_modified_id\") ===\n                  candidate.get(\"id\")) ||\n              this.tempBldEntranceFeature.get(\"building_modified_id\") ===\n                candidate.get(\"id\") ||\n              this.tempBldEntranceFeature.get(\"building_modified_id\") ===\n                candidate.getId()\n            ) {\n              return true;\n            } else {\n              return false;\n            }\n          }\n        );\n      } else {\n        buildingFeatureAtCoord = this.olEditCtrl.source.getClosestFeatureToCoordinate(\n          coordinate\n        );\n      }\n\n      if (!buildingFeatureAtCoord && !buildingFeatureAtCoord.getId()) return;\n\n      // This line restricts drawing entrance feature only in new drawn buildings (original_id is used as an identifier)\n      if (\n        !buildingFeatureAtCoord.getProperties().hasOwnProperty(this.original_id)\n      ) {\n        return;\n      }\n\n      let bldEntranceCoordinate;\n      if (\n        buildingFeatureAtCoord.getGeometry().intersectsCoordinate(coordinate)\n      ) {\n        bldEntranceCoordinate = coordinate;\n      } else {\n        const closestPoint = buildingFeatureAtCoord\n          .getGeometry()\n          .getClosestPoint(coordinate);\n        bldEntranceCoordinate = closestPoint;\n        if (this.tempBldEntranceFeature && evt.type === \"modifyend\") {\n          this.tempBldEntranceFeature.setGeometry(\n            new Point(bldEntranceCoordinate)\n          );\n        }\n      }\n      let bldEntranceFeature;\n      if (evt.type === \"modifyend\") {\n        // Update the existing building entrance feature\n        bldEntranceFeature = this.tempBldEntranceFeature;\n\n        // Can't update the feature if id isn't available\n        if (!bldEntranceFeature.getId()) return;\n\n        // Clone feature and transform for transaction.\n        const {\n          // eslint-disable-next-line no-unused-vars\n          geometry,\n          // eslint-disable-next-line no-unused-vars\n          geom,\n          ...propsWithNoGeometry\n        } = bldEntranceFeature.getProperties();\n        const clonedFeature = new Feature({\n          geom: bldEntranceFeature.getGeometry().clone(),\n          ...propsWithNoGeometry\n        });\n        clonedFeature.setGeometryName(\"geom\");\n        ApiService.put(\n          `/scenarios/${this.activeScenario}/population_modified/features`,\n          {\n            features: [\n              {\n                id: bldEntranceFeature.getId(),\n                geom: geometryToWKT(\n                  clonedFeature\n                    .getGeometry()\n                    .clone()\n                    .transform(\"EPSG:3857\", \"EPSG:4326\")\n                )\n              }\n            ]\n          }\n        ).then(response => {\n          if (response.data) {\n            const feature = geojsonToFeature(response.data);\n            if (feature[0] && feature[0].get(\"id\")) {\n              bldEntranceFeature.setId(feature[0].get(\"id\"));\n            }\n          }\n        });\n      } else {\n        // Add new feature\n        bldEntranceFeature = new Feature({\n          geometry: new Point(bldEntranceCoordinate),\n          building_modified_id:\n            buildingFeatureAtCoord.get(\"id\") ||\n            buildingFeatureAtCoord.get(\"id\") ||\n            buildingFeatureAtCoord.getId()\n        });\n        this.olEditCtrl.bldEntranceLayer\n          .getSource()\n          .addFeature(bldEntranceFeature);\n\n        // Clone feature and transform for transaction.\n        const {\n          // eslint-disable-next-line no-unused-vars\n          geometry,\n          // eslint-disable-next-line no-unused-vars\n          geom,\n          ...propsWithNoGeometry\n        } = bldEntranceFeature.getProperties();\n        const clonedFeature = new Feature({\n          geom: new Point(bldEntranceCoordinate),\n          ...propsWithNoGeometry\n        });\n        clonedFeature.setGeometryName(\"geom\");\n        ApiService.post(\n          `/scenarios/${this.activeScenario}/population_modified/features`,\n          {\n            features: [\n              {\n                ...clonedFeature.getProperties(),\n                geom: geometryToWKT(\n                  clonedFeature\n                    .getGeometry()\n                    .clone()\n                    .transform(\"EPSG:3857\", \"EPSG:4326\")\n                )\n              }\n            ]\n          }\n        ).then(response => {\n          if (response.data) {\n            const feature = geojsonToFeature(response.data);\n            this.editLayer.getSource().changed();\n            if (feature[0] && feature[0].get(\"id\")) {\n              bldEntranceFeature.setId(feature[0].get(\"id\"));\n            }\n          }\n        });\n      }\n\n      setTimeout(() => {\n        this.tempBldEntranceFeature = null;\n      }, 100);\n    },\n    /**\n     * Feature change event handler for building entrance edit layer\n     */\n    onBldEntranceFeatureChange(evt) {\n      if (evt.feature) {\n        // Used on modifyEnd event.\n        this.tempBldEntranceFeature = evt.feature;\n      }\n    },\n    /**\n     * Configure right-click for Edit.\n     */\n    setUpCtxMenu() {\n      if (this.contextmenu) {\n        this.olEditCtrl.contextmenu = this.contextmenu;\n        this.contextmenu.on(\"beforeopen\", evt => {\n          // Close helptoltip\n          if (this.olEditCtrl.helpTooltip) {\n            this.olEditCtrl.helpTooltip.setPosition(undefined);\n          }\n          const features = this.map.getFeaturesAtPixel(evt.pixel, {\n            layerFilter: candidate => {\n              if (candidate.get(\"name\") === \"bld_entrance_layer\") {\n                return true;\n              }\n              return false;\n            }\n          });\n          if (\n            features.length > 0 &&\n            this.selectedLayer[\"name\"] === \"building\"\n          ) {\n            this.contextmenu.extend([\n              \"-\", // this is a separator\n              {\n                text: `<i class=\"fa fa-trash fa-1x\" aria-hidden=\"true\"></i>&nbsp;&nbsp${this.$t(\n                  \"map.contextMenu.deleteBldEntrancePoint\"\n                )}`,\n                label: \"deleteBldEntrancePoint\",\n                callback: () => {\n                  ApiService.delete(\n                    `/scenarios/${\n                      this.activeScenario\n                    }/population_modified/features?id=${features[0].getId()}`\n                  ).then(response => {\n                    if (response.data) {\n                      this.olEditCtrl.bldEntranceLayer\n                        .getSource()\n                        .removeFeature(features[0]);\n                      this.editLayer.getSource().changed();\n                    }\n                  });\n                }\n              }\n            ]);\n          }\n        });\n      }\n    },\n    /**\n     * Feature change event handler for edit layer\n     */\n    onFeatureChange(evt) {\n      if (\n        [\"modify\", \"move\", \"modifyAttributes\", \"drawHole\"].includes(\n          this.olEditCtrl.editType\n        )\n      ) {\n        const index = this.featuresToCommit.findIndex(\n          i => i.ol_uid === evt.feature.ol_uid\n        );\n        if (index === -1) {\n          this.featuresToCommit.push(evt.feature);\n        } else {\n          this.featuresToCommit[index] = evt.feature;\n        }\n      }\n    },\n    /**\n     * Source change base event. Used to update scenario data table\n     * This event is called very often, so for performance improvement a\n     * debounce method  is used in updateDatatable\n     */\n    onEditSourceChange() {\n      this.isTableLoading = true;\n      this.updateDataTable();\n    },\n\n    /**\n     * Method called when edit layer source is changed.\n     * A debounce is addes to improve performance\n     * It updates the scenario data table.\n     */\n    updateDataTable: debounce(function() {\n      if (!this.activeScenario) return;\n      const editLayerFeatures = this.editLayer.getSource().getFeatures();\n      const scenarioDataTable = [];\n      editLayerFeatures.forEach(f => {\n        const fid = f.getId();\n        const layerName = f.get(\"layerName\");\n        let isDeleted = false;\n        let status = \"uploaded\";\n        let type = \"\";\n        let originId;\n        if (f.get(\"edit_type\")) {\n          const editType = f.get(\"edit_type\");\n          if (editType === \"n\") {\n            type = \"new\";\n          } else if (editType === \"d\") {\n            type = \"deleted\";\n            isDeleted = true;\n            originId = f.get(this.original_id);\n          } else if (editType === \"m\") {\n            type = \"modified\";\n            originId = f.get(this.original_id);\n          }\n          const obj = {\n            fid,\n            layerName,\n            isDeleted,\n            originId,\n            status,\n            type\n          };\n          scenarioDataTable.push(obj);\n        }\n      });\n      this.scenarioDataTable = scenarioDataTable;\n      this.isTableLoading = false;\n    }, 900),\n\n    scenarioActionBtnHandler(item, type) {\n      const fid = item.fid;\n      if (!fid) return;\n      let feature;\n      feature = this.editLayer.getSource().getFeatureById(fid);\n      if (!feature) return;\n      if (type === \"zoom\") {\n        this.map.getView().fit(feature.getGeometry().getExtent(), {\n          padding: [10, 10, 10, 10]\n        });\n        this.highlightLayer.getSource().addFeature(feature);\n        setTimeout(() => {\n          this.highlightLayer.getSource().removeFeature(feature);\n        }, 300);\n      } else if (type === \"delete\") {\n        this.openDeletePopup(feature);\n      } else if (type === \"restore\") {\n        this.map.getView().fit(feature.getGeometry().getExtent(), {\n          padding: [10, 10, 10, 10]\n        });\n        this.deleteScenarioFeatures([feature]);\n      }\n    },\n    isRestoreBtnVisible(item) {\n      if (item.type !== \"deleted\" || !this.selectedLayer) {\n        return false;\n      }\n      return item.isDeleted;\n    },\n    isDeleteBtnVisible(item) {\n      if ((!item.originalId && item.isDeleted) || !this.selectedLayer) {\n        return false;\n      }\n      return !item.isDeleted;\n    },\n\n    /**\n     * Clear data object that user has entered,\n     * so the next time the popup is opened the form is clean.\n     */\n    clearDataObject() {\n      if (!this.layerName) return;\n      const properties = this.schema[this.layerName].properties;\n      const dataObject = {};\n      Object.keys(properties).forEach(key => {\n        if (properties[key] && properties[key][\"x-display\"] !== \"hidden\") {\n          dataObject[key] = null;\n          this.dataObject = dataObject;\n        }\n      });\n    },\n\n    /**\n     * Closes the popup if user choose cancel.\n     */\n    closePopup() {\n      if (this.olEditCtrl.popupOverlay) {\n        this.olEditCtrl.popupOverlay.setPosition(undefined);\n        this.popup.isVisible = false;\n      }\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(true);\n      }\n      this.highlightLayer.getSource().clear();\n      if (this.interactionType === \"draw\") {\n        this.featuresToCommit.forEach(feature => {\n          if (this.editLayer.getSource().hasFeature(feature)) {\n            this.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      }\n      // Removes features that are not modified\n\n      this.editLayer\n        .getSource()\n        .getFeatures()\n        .forEach(feature => {\n          if (\n            !feature.get(\"edit_type\") &&\n            feature.get(\"layerName\") !== \"poi\" &&\n            !feature.get(\"building_modified_id\") // building_modified_id is edge case to not clean population_modified features as they don't have an edit_type property\n          ) {\n            this.editLayer.getSource().removeFeature(feature);\n          }\n        });\n\n      this.featuresToCommit = [];\n    },\n    /**\n     * Clears all the selection and edit interactions.\n     */\n    clear() {\n      // Removes features that are not modified\n      this.editLayer\n        .getSource()\n        .getFeatures()\n        .forEach(feature => {\n          if (\n            !feature.get(\"edit_type\") &&\n            feature.get(\"layerName\") !== \"poi\" &&\n            !feature.get(\"building_modified_id\") // building_modified_id is edge case to not clean population_modified features as they don't have an edit_type property\n          ) {\n            this.editLayer.getSource().removeFeature(feature);\n          }\n        });\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.clearDataObject();\n      if (this.contextmenu) {\n        this.contextmenu.close();\n      }\n      this.featuresToCommit = [];\n    },\n\n    /**\n     * Clears all the features from edit layer (triggered when user changes scenario)\n     */\n    clearAll() {\n      this.olEditCtrl.clear();\n      this.olSelectCtrl.clear();\n      this.editLayer.getSource().clear();\n      this.highlightLayer.getSource().clear();\n      this.bldEntranceLayer.getSource().clear();\n      if (this.contextmenu) {\n        this.contextmenu.close();\n      }\n      this.clearDataObject();\n      this.scenarioDataTable = [];\n      this.isInteractionOnProgress = false;\n      this.isTableLoading = false;\n      this.featuresToCommit = [];\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n    },\n    /**\n     * Delete all user scenario features in db.\n     */\n    deleteAll() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"appBar.edit.deleteAllTitle\"),\n          this.$t(\"appBar.edit.deleteAllMessage\"),\n          { color: this.appColor.primary }\n        )\n\n        .then(confirm => {\n          if (confirm) {\n            //1- Call api to delete all features.\n            this.isDeleteAllBusy = true;\n            ApiService.delete(\n              `/scenarios/${this.activeScenario}/${this.selectedLayer[\"name\"]}_modified/features-all`\n            )\n              .then(response => {\n                this.isDeleteAllBusy = false;\n                this.isUploadBtnEnabled = true;\n                if (response.data === \"error\") {\n                  //Show error message can't delete\n                  this.toggleSnackbar({\n                    type: \"error\", //success or error\n                    message: this.$t(\n                      `map.snackbarMessages.cantDeleteAllScenarioFeatures`\n                    ),\n                    state: true,\n                    timeout: 4000\n                  });\n                } else {\n                  //Show success message\n                  this.toggleSnackbar({\n                    type: this.appColor.primary, //success or error\n                    message: this.$t(\n                      `map.snackbarMessages.allScenarioFeaturesDelete`\n                    ),\n                    state: true,\n                    timeout: 4000\n                  });\n                  // Clear openlayers scenario features\n                  this.stop();\n                  if (this.selectedLayer[\"name\"] === \"poi\") {\n                    this.fetchScenarioLayerFeatures(\"poi\");\n                  } else {\n                    this.clearAll();\n                  }\n                }\n              })\n              .catch(() => {\n                this.isDeleteAllBusy = false;\n              });\n          }\n        });\n    },\n    /**\n     * Delete scenario\n     */\n    deleteScenario() {\n      this.$refs.confirm\n        .open(\n          this.$t(\"appBar.edit.deleteAllTitle\"),\n          this.$t(\"appBar.edit.confirmDeleteScenario\"),\n          { color: this.appColor.primary }\n        )\n\n        .then(confirm => {\n          if (confirm) {\n            ApiService.delete(`/scenarios/${this.activeScenario}`).then(\n              response => {\n                if (response.data === \"error\") {\n                  //Show error message can't delete\n                  this.toggleSnackbar({\n                    type: \"error\", //success or error\n                    message: this.$t(\"map.snackbarMessages.cantDeleteScenario\"),\n                    state: true,\n                    timeout: 3000\n                  });\n                } else {\n                  //Show success message\n                  this.toggleSnackbar({\n                    type: this.appColor.primary, //success or error\n                    message: this.$t(\"map.snackbarMessages.scenarioDeleted\"),\n                    state: true,\n                    timeout: 3000\n                  });\n\n                  //- Refetch Scenario\n                  this.$store.dispatch(`scenarios/${GET_SCENARIOS}`);\n                  //- Clear openlayers scenario features\n                  this.clearAll();\n                  this.selectedLayer = null;\n                  this.activeScenario = null;\n                }\n              }\n            );\n          }\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(\"map.snackbarMessages.cantDeleteScenario\"),\n            state: true,\n            timeout: 3000\n          });\n        });\n    },\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop() {\n      this.closePopup();\n      this.olSelectCtrl.removeInteraction();\n      this.olEditCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.toggleSelection = undefined;\n      this.toggleEdit = undefined;\n      if (this.map.getTarget().style) {\n        this.map.getTarget().style.cursor = \"\";\n      }\n      this.clear();\n    },\n    /**\n     * Translate method to avoid inline html logic\n     */\n    translate(type, key) {\n      //type = {layerGroup || layerName}\n      //Checks if key exists and translates it othewise return the input value\n      const canTranslate = this.$te(`map.${type}.${key}`);\n      if (canTranslate) {\n        return this.$t(`map.${type}.${key}`);\n      } else {\n        return key;\n      }\n    },\n    /**\n     * Method used on popup save (draw)/ok(delete) depending on interaction type\n     */\n    ok(type) {\n      const featureOut = this.featuresToCommit[0].clone();\n      // Reset id of the original feature\n      featureOut.setId(this.featuresToCommit[0].getId());\n      const properties = this.featuresToCommit[0].getProperties();\n      if (type === \"add\") {\n        // New feature\n        featureOut.setProperties(this.dataObject);\n        featureOut.set(\"edit_type\", \"n\");\n        this.createScenarioFeatures([featureOut]);\n      }\n      if (type === \"modifyAttributes\") {\n        // Modified existing feature\n        const featureOut = this.setFeatureFields(this.featuresToCommit[0]);\n        featureOut.setProperties(this.dataObject);\n        const props = this.featuresToCommit[0].getProperties();\n        if (props.editType !== \"d\") {\n          if (props.hasOwnProperty(\"edit_type\")) {\n            featureOut.setId(this.featuresToCommit[0].getId());\n            this.updateScenarioFeatures([featureOut]);\n          } else {\n            featureOut.set(\"edit_type\", \"m\");\n            featureOut.set(\n              this.original_id,\n              this.featuresToCommit[0].get(\"uid\") ||\n                this.featuresToCommit[0].get(\"id\")\n            );\n            this.createScenarioFeatures([featureOut]);\n            this.editLayer.getSource().removeFeature(this.featuresToCommit[0]);\n          }\n        }\n      } else if (type === \"delete\" && !properties.hasOwnProperty(\"edit_type\")) {\n        // Deleted an origin feature (has to be created as deleted feature)\n        const allowedKeys = Object.keys(this.dataObject);\n        Object.keys(this.featuresToCommit[0].getProperties()).forEach(prop => {\n          if (!allowedKeys.includes(prop) && prop !== \"geometry\") {\n            featureOut.unset(prop);\n          }\n        });\n        if (this.featuresToCommit[0].get(\"id\")) {\n          const original_id_ =\n            this.featuresToCommit[0].get(\"uid\") ||\n            this.featuresToCommit[0].get(\"id\");\n          featureOut.set(this.original_id, original_id_);\n        }\n        featureOut.set(\"edit_type\", \"d\");\n        this.createScenarioFeatures([featureOut]);\n        this.editLayer.getSource().removeFeature(this.featuresToCommit[0]);\n      } else if (type === \"delete\") {\n        // Deleted a feature which is already modified. Delete from \"_modified\" layer\n        this.deleteScenarioFeatures([featureOut]);\n      }\n      if (this.olEditCtrl.popupOverlay) {\n        this.olEditCtrl.popupOverlay.setPosition(undefined);\n        this.popup.isVisible = false;\n      }\n      if (this.olEditCtrl.edit) {\n        this.olEditCtrl.edit.setActive(true);\n      }\n      this.highlightLayer.getSource().clear();\n    },\n\n    /**\n     * ====API CALLS====\n     */\n    /**\n     * Create scenario features\n     */\n    createScenarioFeatures(features) {\n      if (features.length === 0) return;\n      let payload = features.map(feature => {\n        const transformed = {\n          ...feature.getProperties(),\n          geom: geometryToWKT(\n            feature\n              .getGeometry()\n              .clone()\n              .transform(\"EPSG:3857\", \"EPSG:4326\")\n          )\n        };\n        delete transformed.geometry;\n        return transformed;\n      });\n      this.isMapBusy = true;\n      ApiService.post(this.scenarioApiBaseUrl, {\n        features: payload\n      })\n        .then(response => {\n          // TODO: Don't remove features from featuresToCommit (Too late here. We should get the features from cloned features)\n          this.featuresToCommit.forEach(feature => {\n            if (this.editLayer.getSource().hasFeature(feature)) {\n              this.editLayer.getSource().removeFeature(feature);\n            }\n          });\n          const featuresWithId = geojsonToFeature(response.data, {\n            dataProjection: \"EPSG:4326\",\n            featureProjection: \"EPSG:3857\"\n          });\n          featuresWithId.forEach(feature => {\n            feature.setId(`${this.selectedLayer[\"name\"]}_${feature.getId()}`);\n            feature.set(\"layerName\", this.selectedLayer[\"name\"]);\n          });\n          if (this.selectedLayer[\"name\"] === \"poi\") {\n            this.turnOnAndLockPoiTreeNode(featuresWithId, \"add\");\n            this.poiModifiedFeatures.push(...featuresWithId);\n          }\n          this.editLayer.getSource().addFeatures(featuresWithId);\n          this.refreshHeatmap();\n          // Activate building entrance interaction if selected layer is building\n          if (\n            this.selectedLayer[\"name\"] === \"building\" &&\n            this.olEditCtrl.editType === \"add\"\n          ) {\n            this.toggleEdit = 7;\n          }\n        })\n        .catch(error => {\n          console.log(error);\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(`appBar.edit.cantCreateScenarioFeature`),\n            state: true,\n            timeout: 3000\n          });\n          this.featuresToCommit.forEach(feature => {\n            if (this.editLayer.getSource().hasFeature(feature)) {\n              this.editLayer.getSource().removeFeature(feature);\n            }\n          });\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n          this.featuresToCommit = [];\n        });\n    },\n    /**\n     * Update scenario features\n     */\n    updateScenarioFeatures(features) {\n      if (features.length === 0) return;\n      let payload = features.map(feature => {\n        const transformed = {\n          id: parseInt(feature.getId().split(\"_\")[1]),\n          ...feature.getProperties(),\n          geom: geometryToWKT(\n            feature\n              .getGeometry()\n              .clone()\n              .transform(\"EPSG:3857\", \"EPSG:4326\")\n          )\n        };\n        delete transformed.edit_type;\n        delete transformed.geometry;\n        delete transformed[this.original_id];\n        return transformed;\n      });\n      this.isMapBusy = true;\n      ApiService.put(this.scenarioApiBaseUrl, {\n        features: payload\n      })\n        .then(response => {\n          features.forEach(feature => {\n            const featureIn = this.editLayer\n              .getSource()\n              .getFeatureById(feature.getId());\n            if (featureIn) {\n              this.editLayer.getSource().removeFeature(featureIn);\n            }\n          });\n          const featuresWithId = geojsonToFeature(response.data, {\n            dataProjection: \"EPSG:4326\",\n            featureProjection: \"EPSG:3857\"\n          });\n          featuresWithId.forEach(feature => {\n            feature.setId(`${this.selectedLayer[\"name\"]}_${feature.getId()}`);\n            feature.set(\"layerName\", this.selectedLayer[\"name\"]);\n          });\n          this.editLayer.getSource().addFeatures(featuresWithId);\n          this.refreshHeatmap();\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(`appBar.edit.canNotUpdateScenarioFeature`),\n            state: true,\n            timeout: 3000\n          });\n          features.forEach(feature => {\n            if (this.editLayer.getSource().hasFeature(feature)) {\n              this.editLayer.getSource().removeFeature(feature);\n            }\n          });\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n          this.featuresToCommit = [];\n        });\n    },\n    /**\n     * Delete scenario features\n     */\n    deleteScenarioFeatures(features) {\n      let queryParam = \"\";\n      if (features.length === 1) {\n        queryParam += `id=${parseInt(features[0].getId().split(\"_\")[1])}`;\n      } else {\n        features.forEach((feature, index) => {\n          const id = parseInt(feature.getId().split(\"_\")[1]);\n          if (id && index !== features - 1) {\n            queryParam += `id=${id}&`;\n          } else if (id) {\n            queryParam += `id=${id}`;\n          }\n        });\n      }\n      this.isMapBusy = true;\n      ApiService.delete(`${this.scenarioApiBaseUrl}?${queryParam}`)\n        .then(() => {\n          // For pois if there is no modified features, we need to unlock the tree node.\n          features.forEach(feature => {\n            if (feature.getId()) {\n              const featureIn = this.editLayer\n                .getSource()\n                .getFeatureById(feature.getId());\n              if (featureIn) {\n                const props = featureIn.getProperties();\n                if ([\"m\", \"d\"].includes(props.edit_type)) {\n                  featureIn.unset(\"edit_type\");\n                  if (this.selectedLayer[\"name\"] === \"poi\") {\n                    // Find origin feature and add it here\n                    const originFeature = this.poisAoisLayer\n                      .getSource()\n                      .getFeatures()\n                      .filter(f => f.get(\"uid\") === featureIn.get(\"uid\"));\n                    if (\n                      Array.isArray(originFeature) &&\n                      originFeature.length > 0\n                    ) {\n                      const clonedFeature = originFeature[0].clone();\n                      clonedFeature.setId(originFeature[0].get(\"id\"));\n                      clonedFeature.set(\"layerName\", \"poi\");\n                      this.editLayer.getSource().addFeature(clonedFeature);\n                    }\n                    // Delete feature from pois modified features array\n                    this.poiModifiedFeatures.forEach(f => {\n                      if (f.get(\"uid\") === featureIn.get(\"uid\")) {\n                        this.poiModifiedFeatures.splice(\n                          this.poiModifiedFeatures.indexOf(f),\n                          1\n                        );\n                      }\n                    });\n                  }\n                }\n                if (\n                  this.selectedLayer[\"name\"] === \"building\" &&\n                  featureIn.get(\"id\")\n                ) {\n                  // Delete all bldEntrance features on the same building\n                  const bldEntranceFeatures = this.bldEntranceLayer\n                    .getSource()\n                    .getFeatures()\n                    .filter(\n                      f => f.get(\"building_modified_id\") === featureIn.get(\"id\")\n                    );\n                  bldEntranceFeatures.forEach(f => {\n                    this.bldEntranceLayer.getSource().removeFeature(f);\n                  });\n                }\n\n                this.editLayer.getSource().removeFeature(featureIn);\n              }\n            }\n          });\n          this.refreshHeatmap();\n        })\n        .catch(() => {\n          this.toggleSnackbar({\n            type: \"error\", //success or error\n            message: this.$t(`appBar.edit.canNotDeleteScenarioFeature`),\n            state: true,\n            timeout: 3000\n          });\n        })\n        .finally(() => {\n          this.isMapBusy = false;\n          this.featuresToCommit = [];\n        });\n    },\n    refreshHeatmap() {\n      if (this.selectedLayer[\"name\"]) {\n        EventBus.$emit(\"update-heatmap\", \"poi\");\n      }\n      if (this.selectedLayer[\"building\"]) {\n        // TODO: Update only when building population is added\n        EventBus.$emit(\"update-heatmap\", \"population\");\n      }\n    },\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\",\n      updateReqFields: \"UPDATE_REQ_FIELDS\",\n      setBldEntranceLayer: \"SET_BLD_ENTRANCE_LAYER\",\n      setEditLayer: \"SET_EDIT_LAYER\"\n    })\n  },\n  computed: {\n    headers() {\n      return [\n        {\n          text: this.$t(\"appBar.edit.table.layer\"),\n          value: \"layerName\",\n          sortable: false,\n          align: \"center\",\n          width: \"20%\"\n        },\n        {\n          text: this.$t(\"appBar.edit.table.status\"),\n          value: \"status\",\n          sortable: false,\n          align: \"center\",\n          width: \"25%\"\n        },\n        {\n          text: this.$t(\"appBar.edit.table.type\"),\n          value: \"type\",\n          sortable: false,\n          align: \"center\",\n          width: \"25%\"\n        },\n        {\n          text: this.$t(\"appBar.edit.table.actions\"),\n          value: \"action\",\n          sortable: false,\n          align: \"center\",\n          width: \"25%\"\n        }\n      ];\n    },\n    scenarioLayersConfig() {\n      const schemas = this.openapiConfig.components.schemas;\n      const scenarioLayersConfig = [\n        schemas.ScenarioPoisModifiedCreate,\n        schemas.ScenarioWaysModifiedCreate,\n        schemas.ScenarioBuildingsModifiedCreate\n      ];\n      return scenarioLayersConfig;\n    },\n    layerName() {\n      let value;\n      if (this.selectedLayer) {\n        value = this.selectedLayer[\"name\"];\n      } else {\n        value = \"\";\n      }\n      return value;\n    },\n    reqFields() {\n      const layerSchema = this.schema[this.layerName];\n      const layerFieldsKeys = Object.keys(layerSchema.properties);\n      return layerFieldsKeys.filter(\n        el =>\n          ![\n            \"way_id\",\n            \"uid\",\n            \"building_modified_id\",\n            \"building_id\",\n            \"id\",\n            \"scenario_id\"\n          ].includes(el) && layerSchema.required.includes(el)\n      );\n    },\n    options() {\n      return {\n        debug: false,\n        disableAll: false,\n        autoFoldObjects: true\n      };\n    },\n    original_id() {\n      if (!this.selectedLayer) return \"\";\n      if (this.selectedLayer[\"name\"] === \"poi\") {\n        return \"uid\";\n      } else if (this.selectedLayer[\"name\"] === \"building\") {\n        return \"building_id\";\n      } else if (this.selectedLayer[\"name\"] === \"way\") {\n        return \"way_id\";\n      } else {\n        return \"\";\n      }\n    },\n    poiList() {\n      return Object.keys(this.poiIcons).filter(\n        poiName => !!this.poisConfig[poiName]\n      );\n    },\n    scenarioApiBaseUrl() {\n      return `/scenarios/${this.activeScenario}/${this.selectedLayer[\"name\"]}_modified/features`;\n    },\n    ...mapGetters(\"auth\", { currentUser: \"currentUser\" }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\",\n      calculationMode: \"calculationMode\",\n      openapiConfig: \"openapiConfig\",\n      poiIcons: \"poiIcons\",\n      poisConfig: \"poisConfig\",\n      poisTreeOnlyChildren: \"poisTreeOnlyChildren\",\n      scenarioLayerEditModeColor: \"scenarioLayerEditModeColor\"\n    }),\n    ...mapGetters(\"map\", {\n      contextmenu: \"contextmenu\",\n      layers: \"layers\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAoisLayer: \"poisAoisLayer\",\n      poisAois: \"poisAois\",\n      selectedPoisOnlyKeys: \"selectedPoisOnlyKeys\"\n    }),\n    ...mapFields(\"poisaois\", {\n      selectedPoisAois: \"selectedPoisAois\"\n    }),\n    ...mapFields(\"scenarios\", {\n      scenarioDataTable: \"scenarioDataTable\",\n      scenarios: \"scenarios\",\n      activeScenario: \"activeScenario\"\n    }),\n    scenarioList() {\n      return [\n        { id: null, scenario_name: this.$t(\"appBar.edit.noSelection\") },\n        ...this.scenarios\n      ];\n    },\n    ...mapGetters(\"scenarios\", {\n      activeScenarioObj: \"activeScenarioObj\"\n    }),\n    ...mapFields(\"map\", {\n      selectedLayer: \"selectedEditLayer\",\n      isMapBusy: \"isMapBusy\",\n      editLayer: \"editLayer\",\n      bldEntranceLayer: \"bldEntranceLayer\"\n    }),\n    ...mapFields(\"app\", {\n      appConfig: \"appConfig\",\n      calculationMode: \"calculationMode\"\n    })\n  },\n  created() {\n    const editableLayers = [];\n    this.scenarioLayersConfig.forEach(config => {\n      editableLayers.push(config.client_config);\n    });\n    this.editableLayers = editableLayers;\n    this.fetchScenarioLayerSchemas();\n    this.primaryColorBackup = this.appConfig.app_ui.base_color.primary;\n  }\n};\n</script>\n<style scoped>\n.scenario-icon:hover {\n  cursor: pointer;\n  color: #30c2ff;\n}\n.scenario-icon-delete:hover {\n  cursor: pointer;\n  color: red;\n}\n\n.create-scenario-text {\n  display: block;\n  width: 150px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n"]}]}