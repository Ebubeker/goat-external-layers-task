{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/print/Print.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/print/Print.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Mapable } from \"../../mixins/Mapable\";\nimport * as olEvents from \"ol/events.js\";\nimport * as olMath from \"ol/math.js\";\n// import { getPointResolution } from \"ol/proj\";\nimport { humanize, numberWithCommas } from \"../../utils/Helpers\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { getCurrentDate, getCurrentTime } from \"../../utils/Helpers\";\nimport Graticule from \"ol/layer/Graticule\";\nimport olScaleLine from \"ol/control/ScaleLine\";\nimport Stroke from \"ol/style/Stroke\";\nimport OlRotate from \"ol/control/Rotate\";\nimport OlAttribution from \"ol/control/Attribution\";\nimport OlMouseWheelZoom from \"ol/interaction/MouseWheelZoom\";\n\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nexport default {\n  mixins: [Mapable],\n  data: () => ({\n    rules: {\n      required: [v => !!v || \"Field is required\"]\n    },\n    rotationListenerKey: null,\n    scaleLineControl: null,\n    gridLineControl: null,\n    defaultOlRotateControl: null,\n    defaultOlAttributionControl: null,\n    defaultOlMouseWheelZoom: null\n  }),\n  methods: {\n    humanize,\n    numberWithCommas,\n    getCurrentDate,\n    getCurrentTime,\n    changeRotation(rotation) {\n      this.setRotation(rotation);\n    },\n\n    /**\n     * Create a print report based on the values of the 'layoutInfo' values.\n     * @param {string} format An output format corresponding to one format in the\n     *     capabilities document ('pdf').\n     */\n    async printMap() {\n      const orientation = this.print.layout.orientation;\n      const format = this.print.layout.format;\n      const paperSize = this.print.layout.size;\n      // Convert html to canvas\n      const printCanvas = await html2canvas(\n        document.getElementById(\"map-print-wrapper\"),\n        {\n          scale: 5,\n          allowTaint: true,\n          useCORS: true\n        }\n      );\n      const fileName = `goat_print_${this.getCurrentDate()}_${this.getCurrentTime()}.${\n        this.print.selectedFormat\n      }`;\n      if (this.print.selectedFormat === \"png\") {\n        var a = document.createElement(\"a\");\n        // toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\n        a.href = printCanvas\n          .toDataURL(\"image/png\")\n          .replace(\"image/png\", \"image/octet-stream\");\n        a.download = fileName;\n        a.click();\n      } else {\n        var pdf = new jsPDF(orientation, undefined, format);\n        // Add image to pdf\n        pdf.addImage(printCanvas, \"JPEG\", 0, 0, paperSize[0], paperSize[1]);\n        // Save map\n        pdf.save(fileName);\n      }\n    },\n    /**\n     * Set the current rotation value.\n     * Updating the rotation will redraw the mask or rotate the map (depending on the configuration).\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    setRotation(rotation) {\n      if (!this.map) {\n        throw new Error(\"Missing map\");\n      }\n      this.updateRotation_(rotation);\n\n      this.map.getView().setRotation(olMath.toRadians(this.print.rotation));\n    },\n\n    /**\n     * Set the current rotation value.\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    updateRotation_(rotation) {\n      this.print.rotation = olMath.clamp(rotation, -180, 180);\n    },\n\n    /**\n     * Set the print dpi value.\n     * @param {number} dpi A dpi value as existing in the dpis list field.\n     */\n    setDpi(dpi) {\n      this.print.dpi = dpi;\n    },\n    timeout(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    },\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\"\n    })\n  },\n  activated: function() {\n    this.print.active = true;\n    this.rotationListenerKey = olEvents.listen(\n      this.map.getView(),\n      \"change:rotation\",\n      event => {\n        this.updateRotation_(\n          Math.round(olMath.toDegrees(event.target.getRotation()))\n        );\n      }\n    );\n\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(null);\n    }\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(false);\n      this.defaultOlAttributionControl.setCollapsible(false);\n    }\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(false);\n    }\n    this.map.addControl(this.scaleLineControl);\n    this.isochroneLayer\n      .getSource()\n      .getFeatures()\n      .forEach(feature => {\n        feature.set(\"showLabel\", true);\n      });\n    this.isochroneLayer.getSource().changed();\n  },\n  deactivated: function() {\n    this.print.active = false;\n    this.print.grid = false;\n    if (!this.map) {\n      throw new Error(\"Missing map\");\n    }\n    if (this.gridLayer) {\n      this.map.removeLayer(this.gridLayer);\n    }\n    if (this.rotationListenerKey) {\n      olEvents.unlistenByKey(this.rotationListenerKey);\n    }\n    this.map.removeControl(this.scaleLineControl);\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(this.map);\n    }\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(true);\n      this.defaultOlAttributionControl.setCollapsible(true);\n    }\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(true);\n    }\n    this.isochroneLayer\n      .getSource()\n      .getFeatures()\n      .forEach(feature => {\n        feature.set(\"showLabel\", false);\n      });\n    this.isochroneLayer.getSource().changed();\n    this.setRotation(0);\n    this.map.render();\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      print: \"print\"\n    }),\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\"\n    })\n  },\n  created() {\n    this.gridLayer = new Graticule({\n      // the style to use for the lines, optional.\n      strokeStyle: new Stroke({\n        color: \"rgba(255,120,0,0.9)\",\n        width: 2,\n        lineDash: [0.5, 4]\n      }),\n      zIndex: 1000,\n      showLabels: true,\n      wrapX: false\n    });\n    this.scaleLineControl = new olScaleLine({\n      steps: 2,\n      bar: true,\n      text: true\n    });\n    this.map\n      .getControls()\n      .getArray()\n      .forEach(control => {\n        if (control instanceof OlRotate) {\n          this.defaultOlRotateControl = control;\n        }\n        if (control instanceof OlAttribution) {\n          this.defaultOlAttributionControl = control;\n        }\n        if (control instanceof OlMouseWheelZoom) {\n          this.defaultOlMouseWheelZoom = control;\n        }\n      });\n  },\n  watch: {\n    \"print.grid\": function(state) {\n      if (state && this.gridLayer) {\n        this.map.addLayer(this.gridLayer);\n      }\n      if (!state && this.gridLayer) {\n        this.map.removeLayer(this.gridLayer);\n      }\n    }\n  }\n};\n",{"version":3,"sources":["Print.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Print.vue","sourceRoot":"src/components/print","sourcesContent":["<template>\n  <v-flex xs12 sm8 md4>\n    <v-card flat>\n      <v-subheader>\n        <span class=\"title\">{{ $t(\"appBar.printMap.title\") }}</span>\n      </v-subheader>\n\n      <v-card-text class=\"pr-16 pl-16 pt-0 pb-0\">\n        <v-divider></v-divider>\n      </v-card-text>\n      <template>\n        <v-card-text>\n          <v-form ref=\"form\" lazy-validation>\n            <v-text-field\n              v-model=\"print.title\"\n              :label=\"$t(`appBar.printMap.form.title.label`)\"\n              type=\"text\"\n              maxlength=\"50\"\n              :counter=\"50\"\n            ></v-text-field>\n            <v-select\n              v-model=\"print.layout\"\n              :items=\"print.layouts\"\n              item-text=\"name\"\n              item-value=\"name\"\n              prepend-icon=\"map\"\n              :label=\"$t('appBar.printMap.form.layout.label')\"\n              :rules=\"rules.required\"\n              return-object\n              required\n            ></v-select>\n            <v-select\n              v-model=\"print.selectedCrs\"\n              :items=\"print.crs\"\n              prepend-icon=\"language\"\n              item-text=\"display\"\n              item-value=\"value\"\n              :label=\"$t('appBar.printMap.form.crs.label')\"\n              :rules=\"rules.required\"\n              required\n            ></v-select>\n\n            <v-select\n              v-model=\"print.selectedFormat\"\n              :items=\"print.outputFormats\"\n              prepend-icon=\"description\"\n              item-text=\"display\"\n              item-value=\"value\"\n              :label=\"$t('appBar.printMap.form.outputFormat.label')\"\n              :rules=\"rules.required\"\n              required\n            ></v-select>\n\n            <v-layout row class=\"ml-0\">\n              <v-flex xs9 class=\"pr-3\">\n                <v-slider\n                  class=\"pt-4\"\n                  prepend-icon=\"rotate_right\"\n                  :value=\"print.rotation\"\n                  @input=\"changeRotation\"\n                  :track-color=\"appColor.secondary\"\n                  :color=\"appColor.secondary\"\n                  :min=\"-180\"\n                  :max=\"180\"\n                ></v-slider>\n              </v-flex>\n\n              <v-flex xs3>\n                <v-text-field\n                  :value=\"print.rotation\"\n                  @input=\"changeRotation\"\n                  suffix=\"°\"\n                  class=\"mt-0\"\n                  type=\"number\"\n                ></v-text-field>\n              </v-flex>\n            </v-layout>\n            <v-layout row class=\"ml-0 mt-2\">\n              <v-flex xs6>\n                <v-checkbox\n                  :color=\"appColor.secondary\"\n                  class=\"ml-1\"\n                  v-model=\"print.legend\"\n                  :label=\"$t('appBar.printMap.form.legend')\"\n                ></v-checkbox>\n              </v-flex>\n              <v-flex xs6>\n                <v-checkbox\n                  :color=\"appColor.secondary\"\n                  class=\"ml-1\"\n                  v-model=\"print.grid\"\n                  :label=\"$t('appBar.printMap.form.grid')\"\n                ></v-checkbox>\n              </v-flex>\n            </v-layout>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn\n            class=\"white--text\"\n            :color=\"appColor.primary\"\n            @click=\"printMap\"\n          >\n            <v-icon left>print</v-icon\n            >{{ $t(\"appBar.printMap.form.submit\") }}</v-btn\n          >\n        </v-card-actions>\n      </template>\n    </v-card>\n  </v-flex>\n</template>\n\n<script>\nimport { Mapable } from \"../../mixins/Mapable\";\nimport * as olEvents from \"ol/events.js\";\nimport * as olMath from \"ol/math.js\";\n// import { getPointResolution } from \"ol/proj\";\nimport { humanize, numberWithCommas } from \"../../utils/Helpers\";\nimport { mapGetters, mapMutations } from \"vuex\";\nimport { mapFields } from \"vuex-map-fields\";\nimport { getCurrentDate, getCurrentTime } from \"../../utils/Helpers\";\nimport Graticule from \"ol/layer/Graticule\";\nimport olScaleLine from \"ol/control/ScaleLine\";\nimport Stroke from \"ol/style/Stroke\";\nimport OlRotate from \"ol/control/Rotate\";\nimport OlAttribution from \"ol/control/Attribution\";\nimport OlMouseWheelZoom from \"ol/interaction/MouseWheelZoom\";\n\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nexport default {\n  mixins: [Mapable],\n  data: () => ({\n    rules: {\n      required: [v => !!v || \"Field is required\"]\n    },\n    rotationListenerKey: null,\n    scaleLineControl: null,\n    gridLineControl: null,\n    defaultOlRotateControl: null,\n    defaultOlAttributionControl: null,\n    defaultOlMouseWheelZoom: null\n  }),\n  methods: {\n    humanize,\n    numberWithCommas,\n    getCurrentDate,\n    getCurrentTime,\n    changeRotation(rotation) {\n      this.setRotation(rotation);\n    },\n\n    /**\n     * Create a print report based on the values of the 'layoutInfo' values.\n     * @param {string} format An output format corresponding to one format in the\n     *     capabilities document ('pdf').\n     */\n    async printMap() {\n      const orientation = this.print.layout.orientation;\n      const format = this.print.layout.format;\n      const paperSize = this.print.layout.size;\n      // Convert html to canvas\n      const printCanvas = await html2canvas(\n        document.getElementById(\"map-print-wrapper\"),\n        {\n          scale: 5,\n          allowTaint: true,\n          useCORS: true\n        }\n      );\n      const fileName = `goat_print_${this.getCurrentDate()}_${this.getCurrentTime()}.${\n        this.print.selectedFormat\n      }`;\n      if (this.print.selectedFormat === \"png\") {\n        var a = document.createElement(\"a\");\n        // toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\n        a.href = printCanvas\n          .toDataURL(\"image/png\")\n          .replace(\"image/png\", \"image/octet-stream\");\n        a.download = fileName;\n        a.click();\n      } else {\n        var pdf = new jsPDF(orientation, undefined, format);\n        // Add image to pdf\n        pdf.addImage(printCanvas, \"JPEG\", 0, 0, paperSize[0], paperSize[1]);\n        // Save map\n        pdf.save(fileName);\n      }\n    },\n    /**\n     * Set the current rotation value.\n     * Updating the rotation will redraw the mask or rotate the map (depending on the configuration).\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    setRotation(rotation) {\n      if (!this.map) {\n        throw new Error(\"Missing map\");\n      }\n      this.updateRotation_(rotation);\n\n      this.map.getView().setRotation(olMath.toRadians(this.print.rotation));\n    },\n\n    /**\n     * Set the current rotation value.\n     * @param {number} rotation The optional new rotation value in degrees.\n     */\n    updateRotation_(rotation) {\n      this.print.rotation = olMath.clamp(rotation, -180, 180);\n    },\n\n    /**\n     * Set the print dpi value.\n     * @param {number} dpi A dpi value as existing in the dpis list field.\n     */\n    setDpi(dpi) {\n      this.print.dpi = dpi;\n    },\n    timeout(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    },\n    ...mapMutations(\"map\", {\n      toggleSnackbar: \"TOGGLE_SNACKBAR\"\n    })\n  },\n  activated: function() {\n    this.print.active = true;\n    this.rotationListenerKey = olEvents.listen(\n      this.map.getView(),\n      \"change:rotation\",\n      event => {\n        this.updateRotation_(\n          Math.round(olMath.toDegrees(event.target.getRotation()))\n        );\n      }\n    );\n\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(null);\n    }\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(false);\n      this.defaultOlAttributionControl.setCollapsible(false);\n    }\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(false);\n    }\n    this.map.addControl(this.scaleLineControl);\n    this.isochroneLayer\n      .getSource()\n      .getFeatures()\n      .forEach(feature => {\n        feature.set(\"showLabel\", true);\n      });\n    this.isochroneLayer.getSource().changed();\n  },\n  deactivated: function() {\n    this.print.active = false;\n    this.print.grid = false;\n    if (!this.map) {\n      throw new Error(\"Missing map\");\n    }\n    if (this.gridLayer) {\n      this.map.removeLayer(this.gridLayer);\n    }\n    if (this.rotationListenerKey) {\n      olEvents.unlistenByKey(this.rotationListenerKey);\n    }\n    this.map.removeControl(this.scaleLineControl);\n    if (this.defaultOlRotateControl) {\n      this.defaultOlRotateControl.setMap(this.map);\n    }\n    if (this.defaultOlAttributionControl) {\n      this.defaultOlAttributionControl.setCollapsed(true);\n      this.defaultOlAttributionControl.setCollapsible(true);\n    }\n    if (this.defaultOlMouseWheelZoom) {\n      this.defaultOlMouseWheelZoom.setActive(true);\n    }\n    this.isochroneLayer\n      .getSource()\n      .getFeatures()\n      .forEach(feature => {\n        feature.set(\"showLabel\", false);\n      });\n    this.isochroneLayer.getSource().changed();\n    this.setRotation(0);\n    this.map.render();\n  },\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"map\", {\n      print: \"print\"\n    }),\n    ...mapGetters(\"isochrones\", {\n      isochroneLayer: \"isochroneLayer\"\n    })\n  },\n  created() {\n    this.gridLayer = new Graticule({\n      // the style to use for the lines, optional.\n      strokeStyle: new Stroke({\n        color: \"rgba(255,120,0,0.9)\",\n        width: 2,\n        lineDash: [0.5, 4]\n      }),\n      zIndex: 1000,\n      showLabels: true,\n      wrapX: false\n    });\n    this.scaleLineControl = new olScaleLine({\n      steps: 2,\n      bar: true,\n      text: true\n    });\n    this.map\n      .getControls()\n      .getArray()\n      .forEach(control => {\n        if (control instanceof OlRotate) {\n          this.defaultOlRotateControl = control;\n        }\n        if (control instanceof OlAttribution) {\n          this.defaultOlAttributionControl = control;\n        }\n        if (control instanceof OlMouseWheelZoom) {\n          this.defaultOlMouseWheelZoom = control;\n        }\n      });\n  },\n  watch: {\n    \"print.grid\": function(state) {\n      if (state && this.gridLayer) {\n        this.map.addLayer(this.gridLayer);\n      }\n      if (!state && this.gridLayer) {\n        this.map.removeLayer(this.gridLayer);\n      }\n    }\n  }\n};\n</script>\n"]}]}