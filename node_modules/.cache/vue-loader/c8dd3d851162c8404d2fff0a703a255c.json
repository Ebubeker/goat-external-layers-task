{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochroneThematicData.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/isochrones/IsochroneThematicData.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nimport { Draggable } from \"draggable-vue-directive\";\nimport { mapFields } from \"vuex-map-fields\";\n\nexport default {\n  directives: {\n    Draggable\n  },\n  data: () => ({\n    isochroneSteps: [],\n    selectedTime: null,\n    search: \"\",\n    isExpanded: true,\n    //Vue windows\\ draggable\n    handleId: \"handle-id\",\n    draggableValue: {\n      handle: undefined,\n      boundingElement: undefined,\n      resetInitialPos: undefined\n    }\n  }),\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.isochroneLayer\n        .getSource()\n        .getFeatures()\n        .forEach(f => {\n          f.set(\"highlightFeature\", false);\n        });\n      this.selectedThematicData = null;\n    },\n    getString(val) {\n      let string = \"\";\n      if (typeof val === \"object\" && val.cnt && val.area) {\n        const value = `${val.cnt} (${val.area} m2)`;\n        string = value;\n      } else {\n        string = val;\n      }\n      return string;\n    }\n  },\n  computed: {\n    tableHeaders() {\n      let headers;\n      if (this.selectedThematicData.calculationType === \"single\") {\n        let pois = this.selectedThematicData.pois;\n        headers = [\n          {\n            text: this.$t(\"isochrones.tableData.table.pois\"),\n            value: \"pois\",\n            sortable: false\n          }\n        ];\n\n        const keys = Object.keys(pois);\n\n        for (const key of keys) {\n          headers.push({\n            text: IsochroneUtils.getIsochroneAliasFromKey(key),\n            value: key,\n            sortable: false\n          });\n        }\n      } else {\n        headers = [\n          {\n            text: this.$t(\"isochrones.tableData.table.isochrone\"),\n            value: \"isochrone\",\n            sortable: false,\n            width: \"25%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.studyArea\"),\n            value: \"studyArea\",\n            sortable: false,\n            width: \"15%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.population\"),\n            value: \"population\",\n            sortable: false,\n            width: \"20%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.reachedPopulation\"),\n            value: \"reachPopulation\",\n            sortable: false,\n            width: \"20%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.shared\"),\n            value: \"shared\",\n            sortable: false,\n            width: \"20%\"\n          }\n        ];\n      }\n      return headers;\n    },\n    tableItems() {\n      let me = this;\n      let items = [];\n      if (me.selectedThematicData.calculationType === \"single\") {\n        let pois = me.selectedThematicData.pois;\n        let selectedTime = me.selectedTime;\n        let keys = Object.keys(pois);\n        if (keys.length > 0) {\n          let sumPois = pois[keys[0]][selectedTime];\n          let amenityNames = Object.keys(pois[keys[0]][selectedTime]);\n          // Only if double-calculation\n          if (keys.length === 2) {\n            const inputAmenityNames = Object.keys(pois[keys[1]][selectedTime]);\n            if (Array.isArray(inputAmenityNames)) {\n              amenityNames = [\n                ...new Set([...amenityNames, ...inputAmenityNames])\n              ];\n            }\n          }\n          if (sumPois) {\n            //Loop through  amenities\n            amenityNames.forEach(amenity => {\n              let isAmenitySelected = this.poisAois[amenity];\n              if (amenity === \"population\") {\n                isAmenitySelected = true;\n              }\n              if (isAmenitySelected) {\n                let obj = {\n                  pois: amenity ? this.$t(`pois.${amenity}`) : amenity\n                };\n                //Default or input calculation\n                let valueDefault = this.getString(sumPois[amenity]);\n\n                obj[keys[0]] = valueDefault || \"-\";\n                //Double calculation\n                if (pois[keys[1]]) {\n                  let valueDouble = this.getString(\n                    pois[keys[1]][selectedTime][amenity]\n                  );\n                  obj[keys[1]] = valueDouble || \"-\";\n                }\n                items.push(obj);\n              }\n            });\n          }\n        }\n      } else {\n        if (me.selectedThematicData.multiIsochroneTableData) {\n          items = me.selectedThematicData.multiIsochroneTableData;\n        }\n      }\n\n      //Sort table rows based on number of amenties || alphabeticaly (only on single calculations)\n      if (this.selectedThematicData.calculationType === \"single\") {\n        items.sort((a, b) => {\n          const b_Value = b[Object.keys(b)[0]];\n          const a_Value = a[Object.keys(a)[0]];\n          if (b_Value === a_Value) {\n            return a[\"pois\"].localeCompare(b[\"pois\"]);\n          }\n          return b_Value - a_Value;\n        });\n      }\n\n      return items;\n    },\n\n    ...mapGetters(\"isochrones\", {\n      selectedThematicData: \"selectedThematicData\",\n      isochroneLayer: \"isochroneLayer\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAois: \"poisAois\",\n      selectedPois: \"selectedPois\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"isochrones\", {\n      selectedThematicData: \"selectedThematicData\"\n    })\n  },\n  watch: {\n    selectedThematicData(value) {\n      this.isochroneSteps = [];\n      if (!value) return;\n      let pois = value.pois;\n      if (pois) {\n        for (const key in pois) {\n          let obj = pois[key];\n          for (const prop in obj) {\n            this.isochroneSteps.push({\n              display: `${Math.round(prop / 60)} min`,\n              value: `${prop}`\n            });\n          }\n          break;\n        }\n        this.selectedTime =\n          this.isochroneSteps.length > 0\n            ? this.isochroneSteps[this.isochroneSteps.length - 1].value\n            : [];\n      }\n    }\n  },\n  mounted() {\n    const element = document.getElementById(\"ol-map-container\");\n    this.draggableValue.resetInitialPos = false;\n    this.draggableValue.boundingElement = element;\n    this.draggableValue.handle = this.$refs[this.handleId];\n  }\n};\n",{"version":3,"sources":["IsochroneThematicData.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"IsochroneThematicData.vue","sourceRoot":"src/components/isochrones","sourcesContent":["<template>\n  <v-card\n    v-if=\"selectedThematicData\"\n    v-draggable=\"draggableValue\"\n    class=\"thematic-data elevation-4\"\n    id=\"isochroneWindowId\"\n    :style=\"[isExpanded ? { height: '400px' } : { height: '50px' }]\"\n    style=\"position:fixed;top:10px;left:400px;z-index:2;max-width:440px;min-width:370px;height:450px;overflow:hidden;\"\n  >\n    <v-layout justify-space-between column fill-height>\n      <v-app-bar\n        :ref=\"handleId\"\n        :color=\"appColor.primary\"\n        height=\"50\"\n        class=\"elevation-0\"\n        style=\"cursor:grab;\"\n        dark\n      >\n        <v-app-bar-nav-icon\n          ><v-icon>fas fa-bullseye</v-icon></v-app-bar-nav-icon\n        >\n        <v-toolbar-title>Isochrone</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-icon @click=\"expand\" class=\"toolbar-icons mr-2\">\n          {{ isExpanded ? \"fas fa-chevron-up\" : \"fas fa-chevron-down\" }}</v-icon\n        >\n        <v-icon @click=\"close\" class=\"toolbar-icons ml-2\">fas fa-times</v-icon>\n      </v-app-bar>\n\n      <vue-scroll>\n        <v-flex v-if=\"isExpanded\" xs12 class=\"mx-3 mt-1\">\n          <v-card-text class=\"ma-0 py-0 pt-0 pb-2\">\n            <v-layout row wrap justify-end>\n              <v-alert\n                v-if=\"\n                  selectedPois.length === 0 &&\n                    selectedThematicData.calculationType === 'single'\n                \"\n                border=\"left\"\n                colored-border\n                class=\"mb-1 mt-2 elevation-2\"\n                icon=\"info\"\n                :color=\"appColor.primary\"\n                dense\n              >\n                <span\n                  v-html=\"$t('isochrones.tableData.selectAmenitiesMsg')\"\n                ></span>\n              </v-alert>\n              <v-flex shrink>\n                <v-chip class=\"mt-1 mb-0\">\n                  {{\n                    `${$t(\"isochrones.calculation\")} - ${\n                      selectedThematicData.calculationId\n                    }`\n                  }}\n                </v-chip></v-flex\n              ></v-layout\n            >\n          </v-card-text>\n          <v-select\n            v-if=\"selectedThematicData.calculationType === 'single'\"\n            :items=\"isochroneSteps\"\n            item-text=\"display\"\n            item-value=\"value\"\n            :label=\"$t('isochrones.tableData.timeFilter')\"\n            v-model=\"selectedTime\"\n          ></v-select>\n\n          <v-data-table\n            :headers=\"tableHeaders\"\n            :items=\"tableItems\"\n            class=\"elevation-1 mb-2\"\n            :search=\"search\"\n            hide-default-footer\n            :no-data-text=\"\n              selectedTime === null\n                ? $t('isochrones.tableData.selectTimeMsg')\n                : $t('isochrones.tableData.noDataMsg')\n            \"\n            :items-per-page=\"-1\"\n          >\n            <template v-slot:items=\"props\">\n              <td v-for=\"(header, index) in tableHeaders\" :key=\"index\">\n                {{ props.item[header.value] }}\n              </td>\n            </template>\n          </v-data-table>\n        </v-flex>\n      </vue-scroll>\n    </v-layout>\n  </v-card>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport IsochroneUtils from \"../../utils/IsochroneUtils\";\nimport { Draggable } from \"draggable-vue-directive\";\nimport { mapFields } from \"vuex-map-fields\";\n\nexport default {\n  directives: {\n    Draggable\n  },\n  data: () => ({\n    isochroneSteps: [],\n    selectedTime: null,\n    search: \"\",\n    isExpanded: true,\n    //Vue windows\\ draggable\n    handleId: \"handle-id\",\n    draggableValue: {\n      handle: undefined,\n      boundingElement: undefined,\n      resetInitialPos: undefined\n    }\n  }),\n  methods: {\n    expand() {\n      this.isExpanded = !this.isExpanded;\n    },\n    close() {\n      this.isochroneLayer\n        .getSource()\n        .getFeatures()\n        .forEach(f => {\n          f.set(\"highlightFeature\", false);\n        });\n      this.selectedThematicData = null;\n    },\n    getString(val) {\n      let string = \"\";\n      if (typeof val === \"object\" && val.cnt && val.area) {\n        const value = `${val.cnt} (${val.area} m2)`;\n        string = value;\n      } else {\n        string = val;\n      }\n      return string;\n    }\n  },\n  computed: {\n    tableHeaders() {\n      let headers;\n      if (this.selectedThematicData.calculationType === \"single\") {\n        let pois = this.selectedThematicData.pois;\n        headers = [\n          {\n            text: this.$t(\"isochrones.tableData.table.pois\"),\n            value: \"pois\",\n            sortable: false\n          }\n        ];\n\n        const keys = Object.keys(pois);\n\n        for (const key of keys) {\n          headers.push({\n            text: IsochroneUtils.getIsochroneAliasFromKey(key),\n            value: key,\n            sortable: false\n          });\n        }\n      } else {\n        headers = [\n          {\n            text: this.$t(\"isochrones.tableData.table.isochrone\"),\n            value: \"isochrone\",\n            sortable: false,\n            width: \"25%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.studyArea\"),\n            value: \"studyArea\",\n            sortable: false,\n            width: \"15%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.population\"),\n            value: \"population\",\n            sortable: false,\n            width: \"20%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.reachedPopulation\"),\n            value: \"reachPopulation\",\n            sortable: false,\n            width: \"20%\"\n          },\n          {\n            text: this.$t(\"isochrones.tableData.table.shared\"),\n            value: \"shared\",\n            sortable: false,\n            width: \"20%\"\n          }\n        ];\n      }\n      return headers;\n    },\n    tableItems() {\n      let me = this;\n      let items = [];\n      if (me.selectedThematicData.calculationType === \"single\") {\n        let pois = me.selectedThematicData.pois;\n        let selectedTime = me.selectedTime;\n        let keys = Object.keys(pois);\n        if (keys.length > 0) {\n          let sumPois = pois[keys[0]][selectedTime];\n          let amenityNames = Object.keys(pois[keys[0]][selectedTime]);\n          // Only if double-calculation\n          if (keys.length === 2) {\n            const inputAmenityNames = Object.keys(pois[keys[1]][selectedTime]);\n            if (Array.isArray(inputAmenityNames)) {\n              amenityNames = [\n                ...new Set([...amenityNames, ...inputAmenityNames])\n              ];\n            }\n          }\n          if (sumPois) {\n            //Loop through  amenities\n            amenityNames.forEach(amenity => {\n              let isAmenitySelected = this.poisAois[amenity];\n              if (amenity === \"population\") {\n                isAmenitySelected = true;\n              }\n              if (isAmenitySelected) {\n                let obj = {\n                  pois: amenity ? this.$t(`pois.${amenity}`) : amenity\n                };\n                //Default or input calculation\n                let valueDefault = this.getString(sumPois[amenity]);\n\n                obj[keys[0]] = valueDefault || \"-\";\n                //Double calculation\n                if (pois[keys[1]]) {\n                  let valueDouble = this.getString(\n                    pois[keys[1]][selectedTime][amenity]\n                  );\n                  obj[keys[1]] = valueDouble || \"-\";\n                }\n                items.push(obj);\n              }\n            });\n          }\n        }\n      } else {\n        if (me.selectedThematicData.multiIsochroneTableData) {\n          items = me.selectedThematicData.multiIsochroneTableData;\n        }\n      }\n\n      //Sort table rows based on number of amenties || alphabeticaly (only on single calculations)\n      if (this.selectedThematicData.calculationType === \"single\") {\n        items.sort((a, b) => {\n          const b_Value = b[Object.keys(b)[0]];\n          const a_Value = a[Object.keys(a)[0]];\n          if (b_Value === a_Value) {\n            return a[\"pois\"].localeCompare(b[\"pois\"]);\n          }\n          return b_Value - a_Value;\n        });\n      }\n\n      return items;\n    },\n\n    ...mapGetters(\"isochrones\", {\n      selectedThematicData: \"selectedThematicData\",\n      isochroneLayer: \"isochroneLayer\"\n    }),\n    ...mapGetters(\"poisaois\", {\n      poisAois: \"poisAois\",\n      selectedPois: \"selectedPois\"\n    }),\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    }),\n    ...mapFields(\"isochrones\", {\n      selectedThematicData: \"selectedThematicData\"\n    })\n  },\n  watch: {\n    selectedThematicData(value) {\n      this.isochroneSteps = [];\n      if (!value) return;\n      let pois = value.pois;\n      if (pois) {\n        for (const key in pois) {\n          let obj = pois[key];\n          for (const prop in obj) {\n            this.isochroneSteps.push({\n              display: `${Math.round(prop / 60)} min`,\n              value: `${prop}`\n            });\n          }\n          break;\n        }\n        this.selectedTime =\n          this.isochroneSteps.length > 0\n            ? this.isochroneSteps[this.isochroneSteps.length - 1].value\n            : [];\n      }\n    }\n  },\n  mounted() {\n    const element = document.getElementById(\"ol-map-container\");\n    this.draggableValue.resetInitialPos = false;\n    this.draggableValue.boundingElement = element;\n    this.draggableValue.handle = this.$refs[this.handleId];\n  }\n};\n</script>\n<style scoped>\n.toolbar-icons:hover {\n  cursor: pointer;\n}\n.thematic-data {\n  transition: height 0.1s linear;\n}\n</style>\n"]}]}