{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/Measure.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/viewer/ol/controls/Measure.vue","mtime":1657636289859},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { EventBus } from \"../../../../EventBus\";\nimport { Mapable } from \"../../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../../mixins/InteractionsToggle\";\nimport OlMeasureController from \"../../../../controllers/OlMeasureController\";\n\nexport default {\n  name: \"measure\",\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts],\n  props: {\n    color: { type: String, default: \"#2BB381\" }\n  },\n  data: () => ({\n    measureSpeedDialFab: false,\n    interactionType: \"measure-interaction\",\n    activeMeasureType: \"\",\n    moduleName: \"measuretool\",\n    stroke: \"2\",\n    colors: {\n      selected: \"#3c78d8\",\n      exceptions: [\"#FFFFFF\", \"#000000\"]\n    },\n    transparency: 100,\n    activeId: undefined,\n    measuretoolConf: {\n      strokeColor: \"#ffcc33\",\n      fillColor: \"rgba(255, 204, 51, 0.2)\",\n      sketchStrokeColor: \"rgba(0, 0, 0, 0.5)\",\n      sketchFillColor: \"rgba(255, 255, 255, 0.2)\",\n      sketchVertexStrokeColor: \"rgba(0, 0, 0, 0.7)\",\n      sketchVertexFillColor: \"rgba(255, 255, 255, 0.2)\"\n    }\n  }),\n  methods: {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      const me = this;\n      me.olMapCtrl = new OlMeasureController(me.map, this.measuretoolConf);\n      me.olMapCtrl.createMeasureLayer();\n    },\n    toggle(item, type) {\n      const me = this;\n\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", me.interactionType);\n\n      //1- Set active index of clicked item or remove it\n      //- If type is measure  toggle off drawing section if opened\n      me.olMapCtrl.removeInteraction();\n\n      const id = item.id;\n      if (type === \"measure\") {\n        me.closeDrawSection();\n        if (me.activeId === id) {\n          me.activeId = undefined;\n          me.activeMeasureType = \"\";\n        } else {\n          this.activeId = id;\n          me.olMapCtrl.addInteraction(item.measureType);\n          me.activeMeasureType = item.measureType;\n          me.map.getTarget().style.cursor = \"pointer\";\n          if (this.addKeyupListener) {\n            this.addKeyupListener();\n          }\n        }\n      }\n    },\n\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop() {\n      const me = this;\n      this.measureSpeedDialFab = false;\n      if (this.activeId !== undefined) {\n        this.closeDrawSection();\n        this.activeId = undefined;\n      }\n      me.olMapCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.olMapCtrl.clear();\n      this.map.getTarget().style.cursor = \"\";\n    },\n    closeDrawSection() {\n      //Option only for draw section items.\n      let el = this.$refs[this.activeId];\n      if (el) el[0].$el.click();\n    }\n  },\n\n  mounted() {},\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n",{"version":3,"sources":["Measure.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Measure.vue","sourceRoot":"src/components/viewer/ol/controls","sourcesContent":["<template>\n  <div>\n    <v-speed-dial\n      v-if=\"!activeId\"\n      v-model=\"measureSpeedDialFab\"\n      direction=\"right\"\n      class=\"measure-button\"\n      transition=\"slide-x-reverse-transition\"\n    >\n      <template v-slot:activator>\n        <v-btn\n          v-if=\"!activeId\"\n          :color=\"!activeId && measureSpeedDialFab ? 'error' : appColor.primary\"\n          dark\n          x-small\n          fab\n        >\n          <v-icon v-if=\"!measureSpeedDialFab\" small>\n            fa-solid fa-ruler-combined\n          </v-icon>\n          <v-icon v-else>\n            close\n          </v-icon>\n        </v-btn>\n      </template>\n      <v-tooltip top>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn\n            @click=\"\n              toggle(\n                { measureType: 'distance', id: 1, name: 'distance' },\n                'measure'\n              )\n            \"\n            v-on=\"on\"\n            :color=\"appColor.primary\"\n            fab\n            dark\n            x-small\n          >\n            <v-icon dark>fas fa-ruler</v-icon>\n          </v-btn>\n        </template>\n        <span>{{ $t(`appBar.drawAndMeasure.measure.length`) }}</span>\n      </v-tooltip>\n      <v-tooltip top>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn\n            @click=\"\n              toggle({ measureType: 'area', id: 1, name: 'area' }, 'measure')\n            \"\n            v-on=\"on\"\n            :color=\"appColor.primary\"\n            fab\n            dark\n            x-small\n          >\n            <v-icon dark>fa-solid fa-ruler-combined</v-icon>\n          </v-btn>\n        </template>\n        <span>{{ $t(`appBar.drawAndMeasure.measure.area`) }}</span>\n      </v-tooltip>\n    </v-speed-dial>\n    <v-btn\n      class=\"measure-button\"\n      v-if=\"activeId\"\n      color=\"error\"\n      dark\n      @click=\"stop()\"\n      x-small\n      fab\n    >\n      <v-icon>\n        close\n      </v-icon>\n    </v-btn>\n  </div>\n</template>\n<script>\nimport { mapGetters } from \"vuex\";\nimport { EventBus } from \"../../../../EventBus\";\nimport { Mapable } from \"../../../../mixins/Mapable\";\nimport { KeyShortcuts } from \"../../../../mixins/KeyShortcuts\";\nimport { InteractionsToggle } from \"../../../../mixins/InteractionsToggle\";\nimport OlMeasureController from \"../../../../controllers/OlMeasureController\";\n\nexport default {\n  name: \"measure\",\n  mixins: [InteractionsToggle, Mapable, KeyShortcuts],\n  props: {\n    color: { type: String, default: \"#2BB381\" }\n  },\n  data: () => ({\n    measureSpeedDialFab: false,\n    interactionType: \"measure-interaction\",\n    activeMeasureType: \"\",\n    moduleName: \"measuretool\",\n    stroke: \"2\",\n    colors: {\n      selected: \"#3c78d8\",\n      exceptions: [\"#FFFFFF\", \"#000000\"]\n    },\n    transparency: 100,\n    activeId: undefined,\n    measuretoolConf: {\n      strokeColor: \"#ffcc33\",\n      fillColor: \"rgba(255, 204, 51, 0.2)\",\n      sketchStrokeColor: \"rgba(0, 0, 0, 0.5)\",\n      sketchFillColor: \"rgba(255, 255, 255, 0.2)\",\n      sketchVertexStrokeColor: \"rgba(0, 0, 0, 0.7)\",\n      sketchVertexFillColor: \"rgba(255, 255, 255, 0.2)\"\n    }\n  }),\n  methods: {\n    /**\n     * This function is executed, after the map is bound (see mixins/Mapable)\n     */\n    onMapBound() {\n      const me = this;\n      me.olMapCtrl = new OlMeasureController(me.map, this.measuretoolConf);\n      me.olMapCtrl.createMeasureLayer();\n    },\n    toggle(item, type) {\n      const me = this;\n\n      //Close other interactions.\n      EventBus.$emit(\"ol-interaction-activated\", me.interactionType);\n\n      //1- Set active index of clicked item or remove it\n      //- If type is measure  toggle off drawing section if opened\n      me.olMapCtrl.removeInteraction();\n\n      const id = item.id;\n      if (type === \"measure\") {\n        me.closeDrawSection();\n        if (me.activeId === id) {\n          me.activeId = undefined;\n          me.activeMeasureType = \"\";\n        } else {\n          this.activeId = id;\n          me.olMapCtrl.addInteraction(item.measureType);\n          me.activeMeasureType = item.measureType;\n          me.map.getTarget().style.cursor = \"pointer\";\n          if (this.addKeyupListener) {\n            this.addKeyupListener();\n          }\n        }\n      }\n    },\n\n    /**\n     * Stop edit and select interactions (Doesn't deletes the features)\n     */\n    stop() {\n      const me = this;\n      this.measureSpeedDialFab = false;\n      if (this.activeId !== undefined) {\n        this.closeDrawSection();\n        this.activeId = undefined;\n      }\n      me.olMapCtrl.removeInteraction();\n      EventBus.$emit(\"ol-interaction-stoped\", this.interactionType);\n      this.olMapCtrl.clear();\n      this.map.getTarget().style.cursor = \"\";\n    },\n    closeDrawSection() {\n      //Option only for draw section items.\n      let el = this.$refs[this.activeId];\n      if (el) el[0].$el.click();\n    }\n  },\n\n  mounted() {},\n  computed: {\n    ...mapGetters(\"app\", {\n      appColor: \"appColor\"\n    })\n  }\n};\n</script>\n<style lang=\"css\" scoped>\n.measure-button {\n  z-index: 1;\n}\n</style>\n"]}]}