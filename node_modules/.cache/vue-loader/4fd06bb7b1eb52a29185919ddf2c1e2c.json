{"remainingRequest":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/other/IndicatorsChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/src/components/other/IndicatorsChart.vue","mtime":1657636289855},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/babel-loader/lib/index.js","mtime":1657636581481},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vuetify-loader/lib/loader.js","mtime":1657636582513},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/cache-loader/dist/cjs.js","mtime":1657636581841},{"path":"/home/ebubeker/Desktop/programming/work tasks/goat/app/client/node_modules/vue-loader/lib/index.js","mtime":1657636582549}],"contextDependencies":[],"result":["\nimport { HorizontalBar } from \"vue-chartjs\";\nimport { EventBus } from \"../../EventBus\";\n\nimport {\n  LinearColorInterpolator,\n  ColorObj,\n  humanize\n} from \"../../utils/Helpers\";\n// import { mapGetters } from \"vuex\";\n\nexport default {\n  extends: HorizontalBar,\n  props: {\n    feature: { type: Object }\n  },\n  data() {\n    return {\n      exludedProps: [\"id\", \"geom\", \"geometry\", \"layerName\"],\n      attributes: {\n        sidewalk_quality: [\"sidewalk\", \"incline_percent\", \"surface\", \"highway\"],\n        traffic_protection: [\n          \"lanes\",\n          \"maxspeed\",\n          \"crossings\",\n          \"parking\",\n          \"cnt_accidents\",\n          \"noise_day\",\n          \"noise_night\"\n        ],\n        security: [\"lit_classified\", \"covered\"],\n        green_blue_index: [\"vegetation\", \"water\"],\n        liveliness: [\"landuse\", \"pois\", \"population\"],\n        comfort: [\n          \"cnt_benches\",\n          \"cnt_waste_baskets\",\n          \"cnt_toilets\",\n          \"cnt_fountains\"\n        ],\n        data_quality: [],\n        walkability: []\n      },\n      colors: {\n        very_bad: {\n          lower: \"#c10707\",\n          upper: \"#be987f\"\n        },\n        bad: {\n          lower: \"#ed8137\",\n          upper: \"#ed8137\"\n        },\n        medium: {\n          lower: \"#fec107\",\n          upper: \"#9fbe36\"\n        },\n        good: {\n          lower: \"#a0bf3c\",\n          upper: \"#61953d\"\n        },\n        very_good: {\n          lower: \"#659843\",\n          upper: \"#385723\"\n        },\n        default: {\n          lower: \"#000000\",\n          upper: \"#000000\"\n        },\n        data_quality: {\n          lower: \"#808080\",\n          upper: \"#808080\"\n        }\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                callback: value => {\n                  return (\n                    this.$t(`charts.indicators.${value}`) || humanize(value)\n                  );\n                }\n              }\n            }\n          ],\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: true\n              },\n              scaleLabel: {\n                display: true\n              }\n            }\n          ]\n        },\n        tooltips: {\n          displayColors: false,\n          titleFontSize: 15,\n          bodyFontSize: 12,\n          titleFontStyle: \"bold\",\n          bodyFontStyle: \"bold\",\n          callbacks: {\n            title: function(tooltipItem) {\n              const attr = tooltipItem[0].label;\n              const label = this.$te(`charts.indicators.${attr}`)\n                ? this.$t(`charts.indicators.${attr}`)\n                : humanize(attr);\n              const value = tooltipItem[0].value;\n              return `${label}: ${value ? value : \"--\"}`;\n            }.bind(this),\n            label: function(tooltipItem) {\n              const labels = [];\n              const attrLabel = tooltipItem.label;\n              // const attrValue = tooltipItem.value;\n              const props = this.attributes[attrLabel];\n              if (Array.isArray(props)) {\n                props.forEach(prop => {\n                  const label = this.$te(`charts.indicators.${prop}`)\n                    ? this.$t(`charts.indicators.${prop}`)\n                    : humanize(prop);\n                  const value = this.feature.get(prop);\n                  if (label) {\n                    labels.push(`${label}: ${value ? value : \"--\"}`);\n                  }\n                });\n              }\n              return labels;\n            }.bind(this)\n          }\n        }\n      }\n    };\n  },\n  mounted() {\n    this.init();\n    EventBus.$on(\"ol-interaction-activated\", interaction => {\n      if (interaction === \"languageChange\") {\n        this.init();\n      }\n    });\n  },\n  methods: {\n    init() {\n      this.renderBarChart();\n    },\n    renderBarChart: function() {\n      this.renderChart(\n        {\n          labels: this.indicators.labels,\n          datasets: [\n            {\n              backgroundColor: this.indicators.colorData,\n              data: this.indicators.data\n            }\n          ]\n        },\n        this.options\n      );\n    }\n  },\n  watch: {\n    feature: {\n      handler: function() {\n        this.init();\n      },\n      deep: true\n    }\n  },\n  computed: {\n    indicators() {\n      const properties = Object.keys(this.attributes);\n      const labels = [];\n      const data = [];\n      const colorData = [];\n      properties.forEach(prop => {\n        if (!this.exludedProps.includes(prop)) {\n          let value = this.feature.get(prop);\n\n          labels.push(prop);\n          // Data quality (edge case) multiple with 100 (REMOVE if value is between 0 and 100)\n          if (prop === \"data_quality\" && Number.isFinite(value)) {\n            value = value * 100;\n          }\n          if (Number.isFinite(value)) {\n            value = value.toFixed(0);\n          }\n          data.push(value);\n\n          // Find the correct color based on value\n          let color;\n          let colorPercentage;\n          if (prop === \"data_quality\") {\n            color = this.colors[\"data_quality\"];\n            colorPercentage = 100;\n          } else if (value >= 0 && value <= 20) {\n            color = this.colors[\"very_bad\"];\n            colorPercentage = ((value - 0) / 20) * 100;\n          } else if (value > 20 && value <= 40) {\n            color = this.colors[\"bad\"];\n            colorPercentage = ((value - 20) / 20) * 100;\n          } else if (value > 40 && value <= 60) {\n            color = this.colors[\"medium\"];\n            colorPercentage = ((value - 40) / 20) * 100;\n          } else if (value > 60 && value <= 80) {\n            color = this.colors[\"good\"];\n            colorPercentage = ((value - 60) / 20) * 100;\n          } else if (value > 80 && value <= 100) {\n            color = this.colors[\"very_good\"];\n            colorPercentage = ((value - 80) / 20) * 100;\n          } else {\n            // Fallback if there is not in range\n            color = this.colors[\"default\"];\n            colorPercentage = 100;\n          }\n          const lower = new ColorObj(color.lower);\n          const upper = new ColorObj(color.upper);\n          const backgroundColor = LinearColorInterpolator.findColorBetween(\n            lower,\n            upper,\n            colorPercentage\n          ).asRgbCss();\n          colorData.push(backgroundColor);\n        }\n      });\n      return {\n        labels,\n        data,\n        colorData\n      };\n    }\n  }\n};\n",{"version":3,"sources":["IndicatorsChart.vue"],"names":[],"mappingsfile":"IndicatorsChart.vue","sourceRoot":"src/components/other","sourcesContent":["<script>\nimport { HorizontalBar } from \"vue-chartjs\";\nimport { EventBus } from \"../../EventBus\";\n\nimport {\n  LinearColorInterpolator,\n  ColorObj,\n  humanize\n} from \"../../utils/Helpers\";\n// import { mapGetters } from \"vuex\";\n\nexport default {\n  extends: HorizontalBar,\n  props: {\n    feature: { type: Object }\n  },\n  data() {\n    return {\n      exludedProps: [\"id\", \"geom\", \"geometry\", \"layerName\"],\n      attributes: {\n        sidewalk_quality: [\"sidewalk\", \"incline_percent\", \"surface\", \"highway\"],\n        traffic_protection: [\n          \"lanes\",\n          \"maxspeed\",\n          \"crossings\",\n          \"parking\",\n          \"cnt_accidents\",\n          \"noise_day\",\n          \"noise_night\"\n        ],\n        security: [\"lit_classified\", \"covered\"],\n        green_blue_index: [\"vegetation\", \"water\"],\n        liveliness: [\"landuse\", \"pois\", \"population\"],\n        comfort: [\n          \"cnt_benches\",\n          \"cnt_waste_baskets\",\n          \"cnt_toilets\",\n          \"cnt_fountains\"\n        ],\n        data_quality: [],\n        walkability: []\n      },\n      colors: {\n        very_bad: {\n          lower: \"#c10707\",\n          upper: \"#be987f\"\n        },\n        bad: {\n          lower: \"#ed8137\",\n          upper: \"#ed8137\"\n        },\n        medium: {\n          lower: \"#fec107\",\n          upper: \"#9fbe36\"\n        },\n        good: {\n          lower: \"#a0bf3c\",\n          upper: \"#61953d\"\n        },\n        very_good: {\n          lower: \"#659843\",\n          upper: \"#385723\"\n        },\n        default: {\n          lower: \"#000000\",\n          upper: \"#000000\"\n        },\n        data_quality: {\n          lower: \"#808080\",\n          upper: \"#808080\"\n        }\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                callback: value => {\n                  return (\n                    this.$t(`charts.indicators.${value}`) || humanize(value)\n                  );\n                }\n              }\n            }\n          ],\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: true\n              },\n              scaleLabel: {\n                display: true\n              }\n            }\n          ]\n        },\n        tooltips: {\n          displayColors: false,\n          titleFontSize: 15,\n          bodyFontSize: 12,\n          titleFontStyle: \"bold\",\n          bodyFontStyle: \"bold\",\n          callbacks: {\n            title: function(tooltipItem) {\n              const attr = tooltipItem[0].label;\n              const label = this.$te(`charts.indicators.${attr}`)\n                ? this.$t(`charts.indicators.${attr}`)\n                : humanize(attr);\n              const value = tooltipItem[0].value;\n              return `${label}: ${value ? value : \"--\"}`;\n            }.bind(this),\n            label: function(tooltipItem) {\n              const labels = [];\n              const attrLabel = tooltipItem.label;\n              // const attrValue = tooltipItem.value;\n              const props = this.attributes[attrLabel];\n              if (Array.isArray(props)) {\n                props.forEach(prop => {\n                  const label = this.$te(`charts.indicators.${prop}`)\n                    ? this.$t(`charts.indicators.${prop}`)\n                    : humanize(prop);\n                  const value = this.feature.get(prop);\n                  if (label) {\n                    labels.push(`${label}: ${value ? value : \"--\"}`);\n                  }\n                });\n              }\n              return labels;\n            }.bind(this)\n          }\n        }\n      }\n    };\n  },\n  mounted() {\n    this.init();\n    EventBus.$on(\"ol-interaction-activated\", interaction => {\n      if (interaction === \"languageChange\") {\n        this.init();\n      }\n    });\n  },\n  methods: {\n    init() {\n      this.renderBarChart();\n    },\n    renderBarChart: function() {\n      this.renderChart(\n        {\n          labels: this.indicators.labels,\n          datasets: [\n            {\n              backgroundColor: this.indicators.colorData,\n              data: this.indicators.data\n            }\n          ]\n        },\n        this.options\n      );\n    }\n  },\n  watch: {\n    feature: {\n      handler: function() {\n        this.init();\n      },\n      deep: true\n    }\n  },\n  computed: {\n    indicators() {\n      const properties = Object.keys(this.attributes);\n      const labels = [];\n      const data = [];\n      const colorData = [];\n      properties.forEach(prop => {\n        if (!this.exludedProps.includes(prop)) {\n          let value = this.feature.get(prop);\n\n          labels.push(prop);\n          // Data quality (edge case) multiple with 100 (REMOVE if value is between 0 and 100)\n          if (prop === \"data_quality\" && Number.isFinite(value)) {\n            value = value * 100;\n          }\n          if (Number.isFinite(value)) {\n            value = value.toFixed(0);\n          }\n          data.push(value);\n\n          // Find the correct color based on value\n          let color;\n          let colorPercentage;\n          if (prop === \"data_quality\") {\n            color = this.colors[\"data_quality\"];\n            colorPercentage = 100;\n          } else if (value >= 0 && value <= 20) {\n            color = this.colors[\"very_bad\"];\n            colorPercentage = ((value - 0) / 20) * 100;\n          } else if (value > 20 && value <= 40) {\n            color = this.colors[\"bad\"];\n            colorPercentage = ((value - 20) / 20) * 100;\n          } else if (value > 40 && value <= 60) {\n            color = this.colors[\"medium\"];\n            colorPercentage = ((value - 40) / 20) * 100;\n          } else if (value > 60 && value <= 80) {\n            color = this.colors[\"good\"];\n            colorPercentage = ((value - 60) / 20) * 100;\n          } else if (value > 80 && value <= 100) {\n            color = this.colors[\"very_good\"];\n            colorPercentage = ((value - 80) / 20) * 100;\n          } else {\n            // Fallback if there is not in range\n            color = this.colors[\"default\"];\n            colorPercentage = 100;\n          }\n          const lower = new ColorObj(color.lower);\n          const upper = new ColorObj(color.upper);\n          const backgroundColor = LinearColorInterpolator.findColorBetween(\n            lower,\n            upper,\n            colorPercentage\n          ).asRgbCss();\n          colorData.push(backgroundColor);\n        }\n      });\n      return {\n        labels,\n        data,\n        colorData\n      };\n    }\n  }\n};\n</script>\n"]}]}